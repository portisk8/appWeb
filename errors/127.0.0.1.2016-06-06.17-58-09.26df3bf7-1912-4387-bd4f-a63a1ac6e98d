(dp1
S'output'
p2
S''
sS'layer'
p3
S'Framework'
p4
sS'code'
p5
S''
sS'snapshot'
p6
(dp7
S'exception'
p8
(dp9
S'__hash__'
p10
S"<method-wrapper '__hash__' of exceptions.RuntimeError object>"
p11
sS'__setattr__'
p12
S"<method-wrapper '__setattr__' of exceptions.RuntimeError object>"
p13
sS'__reduce_ex__'
p14
S'<built-in method __reduce_ex__ of exceptions.RuntimeError object>'
p15
sS'__getslice__'
p16
S"<method-wrapper '__getslice__' of exceptions.RuntimeError object>"
p17
sS'__getitem__'
p18
S"<method-wrapper '__getitem__' of exceptions.RuntimeError object>"
p19
sS'__setstate__'
p20
S'<built-in method __setstate__ of exceptions.RuntimeError object>'
p21
sS'__reduce__'
p22
S'<built-in method __reduce__ of exceptions.RuntimeError object>'
p23
sS'__str__'
p24
S"<method-wrapper '__str__' of exceptions.RuntimeError object>"
p25
sS'__format__'
p26
S'<built-in method __format__ of exceptions.RuntimeError object>'
p27
sS'__getattribute__'
p28
S"<method-wrapper '__getattribute__' of exceptions.RuntimeError object>"
p29
sS'__class__'
p30
S"<type 'exceptions.RuntimeError'>"
p31
sS'__unicode__'
p32
S'<built-in method __unicode__ of exceptions.RuntimeError object>'
p33
sS'__delattr__'
p34
S"<method-wrapper '__delattr__' of exceptions.RuntimeError object>"
p35
sS'__subclasshook__'
p36
S'<built-in method __subclasshook__ of type object>'
p37
sS'__repr__'
p38
S"<method-wrapper '__repr__' of exceptions.RuntimeError object>"
p39
sS'args'
p40
S"('maximum recursion depth exceeded in cmp',)"
p41
sS'__dict__'
p42
S'{}'
p43
sS'__sizeof__'
p44
S'<built-in method __sizeof__ of exceptions.RuntimeError object>'
p45
sS'__doc__'
p46
S"'Unspecified run-time error.'"
p47
sS'__init__'
p48
S"<method-wrapper '__init__' of exceptions.RuntimeError object>"
p49
sS'__new__'
p50
S'<built-in method __new__ of type object>'
p51
ssS'evalue'
p52
S'maximum recursion depth exceeded in cmp'
p53
sS'request'
p54
cgluon.html
XML_unpickle
p55
(S's@^\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">csrftoken</td><td style="vertical-align:top;">:</td><td><div>Gj37u4ZNpAsevb4jUuZN1nkyGTZODv5R<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_informarq</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-c4f6d00e-0d23-4ec5-9dcb-91c35bf497cb<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-1a198384-8566-4d55-bb30-266cf29bda87<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>es-ES,es;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CACHE_CONTROL</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>csrftoken=Gj37u4ZNpAsevb4jUuZN1nkyGTZODv5R; __utma=96992031.944755686.1465171580.1465171580.1465171580.1; __utmz=96992031.1465171580.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); session_id_welcome=127.0.0.1-1a198384-8566-4d55-bb30-266cf29bda87; session_id_informarq=127.0.0.1-c4f6d00e-0d23-4ec5-9dcb-91c35bf497cb</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_UPGRADE_INSECURE_REQUESTS</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>52547</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>QXVndXN0bw</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py\\\\applications\\\\InformarQ\\\\&#x27;, &#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py\\\\applications\\\\welcome\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x2d8ceb8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;QXVndXN0bw&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>es-ES,es;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cache_control</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>csrftoken=Gj37u4ZNpAsevb4jUuZN1nkyGTZODv5R; __utma=96992031.944755686.1465171580.1465171580.1465171580.1; __utmz=96992031.1465171580.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); session_id_welcome=127.0.0.1-1a198384-8566-4d55-bb30-266cf29bda87; session_id_informarq=127.0.0.1-c4f6d00e-0d23-4ec5-9dcb-91c35bf497cb</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_upgrade_insecure_requests</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.131.44</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::141d:406:3f57:7cd3%6</div></td></tr><tr><td><div>QXVndXN0bw</div></td></tr><tr><td><div>fe80::4150:290d:3134:4e74%3</div></td></tr><tr><td><div>2001:0:5ef5:79fb:141d:406:3f57:7cd3</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>52547</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>QXVndXN0bw</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01BBD0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x02C4A068&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x03912DB0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x01BBD0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x02C4A068&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x03912DB0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py\\\\applications\\\\InformarQ\\\\&#x27;, &#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py\\\\applications\\\\welcome\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x2d8ceb8: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;QXVndXN0bw&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;C:\\\\Users\\\\Augusto\\\\Desktop\\\\Informatorio\\\\App-Bienal\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.131.44</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::141d:406:3f57:7cd3%6</div></td></tr><tr><td><div>QXVndXN0bw</div></td></tr><tr><td><div>fe80::4150:290d:3134:4e74%3</div></td></tr><tr><td><div>2001:0:5ef5:79fb:141d:406:3f57:7cd3</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 6, 6, 17, 58, 9, 991000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 6, 6, 20, 58, 9, 991000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x039DE050&gt;</div></td></tr></table></div>'
tRp56
sS'frames'
p57
(lp58
(dp59
S'file'
p60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\main.py'
p61
sS'dump'
p62
(dp63
S'global serve_controller'
p64
S'<function serve_controller>'
p65
sS'session'
p66
S'<Storage {}>'
p67
sS'request'
p68
S"<Storage {'_vars': None, 'function': 'index', 'c...\\App-Bienal\\\\web2py\\\\applications\\\\InformarQ\\\\'}>"
p69
sS'response'
p70
S"<Storage {'body': <cStringIO.StringO object at 0...a> at 0x039B5F70>, 'view': 'default/index.html'}>"
p71
ssS'lnum'
p72
I449
sS'lines'
p73
(dp74
I448
S''
sI449
S'                serve_controller(request, response, session)'
p75
sI450
S''
sI451
S'            except HTTP, http_response:'
p76
sI452
S''
sI453
S'                if static_file:'
p77
sI444
S'                if global_settings.debugging and app != "admin":'
p78
sI445
S'                    import gluon.debug'
p79
sI446
S'                    # activate the debugger'
p80
sI447
S'                    gluon.debug.dbg.do_debug(mainpyfile=request.folder)'
p81
ssS'call'
p82
S"(environ={'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, sdch', 'HTTP_ACCEPT_LANGUAGE': 'es-ES,es;q=0.8', 'HTTP_CACHE_CONTROL': 'max-age=0', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_COOKIE': 'csrftoken=Gj37u4ZNpAsevb4jUuZN1nkyGTZODv5R; __ut...rq=127.0.0.1-c4f6d00e-0d23-4ec5-9dcb-91c35bf497cb', 'HTTP_HOST': '127.0.0.1:8000', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/...L, like Gecko) Chrome/50.0.2661.102 Safari/537.36', 'PATH_INFO': '/InformarQ', ...}, responder=<function responder2>)"
p83
sS'func'
p84
S'wsgibase'
p85
sa(dp86
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\main.py'
p87
sg62
(dp88
S'response._view_environment'
p89
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p90
sS'response'
p91
S"<Storage {'body': <cStringIO.StringO object at 0...a> at 0x039B5F70>, 'view': 'default/index.html'}>"
p92
sS'global run_view_in'
p93
S'<function run_view_in>'
p94
ssg72
I191
sg73
(dp95
I192
S'        page = response.body.getvalue()'
p96
sI193
S'    # logic to garbage collect after exec, not always, once every 100 requests'
p97
sI194
S'    global requests'
p98
sI195
S"    requests = ('requests' in globals()) and (requests + 1) % 100 or 0"
p99
sI186
S'    response._view_environment = copy.copy(environment)'
p100
sI187
S'    page = run_controller_in(request.controller, request.function, environment)'
p101
sI188
S'    if isinstance(page, dict):'
p102
sI189
S'        response._vars = page'
p103
sI190
S'        response._view_environment.update(page)'
p104
sI191
S'        run_view_in(response._view_environment)'
p105
ssg82
S"(request=<Storage {'_vars': None, 'function': 'index', 'c...\\App-Bienal\\\\web2py\\\\applications\\\\InformarQ\\\\'}>, response=<Storage {'body': <cStringIO.StringO object at 0...a> at 0x039B5F70>, 'view': 'default/index.html'}>, session=<Storage {}>)"
p106
sg84
S'serve_controller'
p107
sa(dp108
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\compileapp.py'
p109
sg62
(dp110
S'environment'
p111
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p112
sS'context'
p113
S'undefined'
p114
ssg72
I714
sg73
(dp115
I709
S"                                            pjoin(folder, 'views'),"
p116
sI710
S'                                            context=environment), layer))'
p117
sI711
S'        else:'
p118
sI712
S'            ccode = parse_template(view,'
p119
sI713
S"                                   pjoin(folder, 'views'),"
p120
sI714
S'                                   context=environment)'
p121
sI715
S'        restricted(ccode, environment, layer)'
p122
sI716
S''
sI717
S''
sI718
S'def remove_compiled_application(folder):'
p123
ssg82
S"(environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...})"
p124
sg84
S'run_view_in'
p125
sa(dp126
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p127
sg62
(dp128
S'builtinstr'
p129
S"<type 'str'>"
p130
sS'global TemplateParser'
p131
S"<class 'gluon.template.TemplateParser'>"
p132
sS'delimiters'
p133
S"('{{', '}}')"
p134
sS'context'
p135
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p136
sS'text'
p137
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p138
sS'path'
p139
S"r'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views'"
p140
sS'lexers'
p141
g43
ssg72
I797
sg73
(dp142
I800
S'def get_parsed(text):'
p143
sI801
S'    """'
p144
sI792
S"            raise RestrictedError(filename, '', 'Unable to find the file')"
p145
sI793
S'    else:'
p146
sI794
S'        text = filename.read()'
p147
sI795
S''
sI796
S'    # Use the file contents to get a parsed template and return it.'
p148
sI797
S'    return str(TemplateParser(text, context=context, path=path, lexers=lexers, delimiters=delimiters))'
p149
sI798
S''
sI799
S''
ssg82
S"(filename='default/index.html', path=r'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views', context={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, lexers={}, delimiters=('{{', '}}'))"
p150
sg84
S'parse_template'
p151
sa(dp152
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p153
sg62
(dp154
S'text'
p155
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p156
sS'self'
p157
S'<gluon.template.TemplateParser object>'
p158
sS'self.parse'
p159
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p160
ssg72
I319
sg73
(dp161
I320
S''
sI321
S'    def to_string(self):'
p162
sI322
S'        """'
p163
sI323
S'        Returns the parsed template with correct indentation.'
p164
sI314
S'        # This variable will hold a reference to every block'
p165
sI315
S'        # that we come across in this template'
p166
sI316
S'        self.blocks = {}'
p167
sI317
S''
sI318
S'        # Begin parsing.'
p168
sI319
S'        self.parse(text)'
p169
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name=\'ParserContainer\', context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p170
sg84
g48
sa(dp171
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p172
sg62
(dp173
S'self'
p174
S'<gluon.template.TemplateParser object>'
p175
sS'extend'
p176
S'"\'default/index.html\'"'
p177
sS'self.extend'
p178
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p179
ssg72
I765
sg73
(dp180
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p181
sI761
S'            self.child_super_nodes.remove(node)'
p182
sI762
S''
sI763
S'        # If we need to extend a template.'
p183
sI764
S'        if extend:'
p184
sI765
S'            self.extend(extend)'
p185
sI766
S''
sI767
S'# We need this for integration with gluon'
p186
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p187
sg84
S'parse'
p188
sa(dp189
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p190
sg62
(dp191
S'super_nodes'
p192
S'[]'
p193
sS'_super_nodes'
p194
g114
ssg72
I494
sg73
(dp195
I489
S'                           name=filename,'
p196
sI490
S'                           context=self.context,'
p197
sI491
S'                           path=self.path,'
p198
sI492
S'                           writer=self.writer,'
p199
sI493
S'                           delimiters=self.delimiters,'
p200
sI494
S'                           _super_nodes=super_nodes)'
p201
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p202
sI497
S'        # template.'
p203
sI498
S'        buf = BlockNode('
p204
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p205
sg84
S'extend'
p206
sa(dp207
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p208
sg62
(dp209
S'text'
p210
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p211
sS'self'
p212
S'<gluon.template.TemplateParser object>'
p213
sS'self.parse'
p214
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p215
ssg72
I319
sg73
(dp216
I320
S''
sI321
S'    def to_string(self):'
p217
sI322
S'        """'
p218
sI323
S'        Returns the parsed template with correct indentation.'
p219
sI314
S'        # This variable will hold a reference to every block'
p220
sI315
S'        # that we come across in this template'
p221
sI316
S'        self.blocks = {}'
p222
sI317
S''
sI318
S'        # Begin parsing.'
p223
sI319
S'        self.parse(text)'
p224
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p225
sg84
g48
sa(dp226
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p227
sg62
(dp228
S'self'
p229
S'<gluon.template.TemplateParser object>'
p230
sS'extend'
p231
S'"\'default/index.html\'"'
p232
sS'self.extend'
p233
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p234
ssg72
I765
sg73
(dp235
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p236
sI761
S'            self.child_super_nodes.remove(node)'
p237
sI762
S''
sI763
S'        # If we need to extend a template.'
p238
sI764
S'        if extend:'
p239
sI765
S'            self.extend(extend)'
p240
sI766
S''
sI767
S'# We need this for integration with gluon'
p241
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p242
sg84
g188
sa(dp243
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p244
sg62
(dp245
S'super_nodes'
p246
S'[]'
p247
sS'_super_nodes'
p248
g114
ssg72
I494
sg73
(dp249
I489
S'                           name=filename,'
p250
sI490
S'                           context=self.context,'
p251
sI491
S'                           path=self.path,'
p252
sI492
S'                           writer=self.writer,'
p253
sI493
S'                           delimiters=self.delimiters,'
p254
sI494
S'                           _super_nodes=super_nodes)'
p255
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p256
sI497
S'        # template.'
p257
sI498
S'        buf = BlockNode('
p258
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p259
sg84
g206
sa(dp260
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p261
sg62
(dp262
S'text'
p263
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p264
sS'self'
p265
S'<gluon.template.TemplateParser object>'
p266
sS'self.parse'
p267
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p268
ssg72
I319
sg73
(dp269
I320
S''
sI321
S'    def to_string(self):'
p270
sI322
S'        """'
p271
sI323
S'        Returns the parsed template with correct indentation.'
p272
sI314
S'        # This variable will hold a reference to every block'
p273
sI315
S'        # that we come across in this template'
p274
sI316
S'        self.blocks = {}'
p275
sI317
S''
sI318
S'        # Begin parsing.'
p276
sI319
S'        self.parse(text)'
p277
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p278
sg84
g48
sa(dp279
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p280
sg62
(dp281
S'self'
p282
S'<gluon.template.TemplateParser object>'
p283
sS'extend'
p284
S'"\'default/index.html\'"'
p285
sS'self.extend'
p286
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p287
ssg72
I765
sg73
(dp288
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p289
sI761
S'            self.child_super_nodes.remove(node)'
p290
sI762
S''
sI763
S'        # If we need to extend a template.'
p291
sI764
S'        if extend:'
p292
sI765
S'            self.extend(extend)'
p293
sI766
S''
sI767
S'# We need this for integration with gluon'
p294
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p295
sg84
g188
sa(dp296
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p297
sg62
(dp298
S'super_nodes'
p299
S'[]'
p300
sS'_super_nodes'
p301
g114
ssg72
I494
sg73
(dp302
I489
S'                           name=filename,'
p303
sI490
S'                           context=self.context,'
p304
sI491
S'                           path=self.path,'
p305
sI492
S'                           writer=self.writer,'
p306
sI493
S'                           delimiters=self.delimiters,'
p307
sI494
S'                           _super_nodes=super_nodes)'
p308
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p309
sI497
S'        # template.'
p310
sI498
S'        buf = BlockNode('
p311
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p312
sg84
g206
sa(dp313
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p314
sg62
(dp315
S'text'
p316
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p317
sS'self'
p318
S'<gluon.template.TemplateParser object>'
p319
sS'self.parse'
p320
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p321
ssg72
I319
sg73
(dp322
I320
S''
sI321
S'    def to_string(self):'
p323
sI322
S'        """'
p324
sI323
S'        Returns the parsed template with correct indentation.'
p325
sI314
S'        # This variable will hold a reference to every block'
p326
sI315
S'        # that we come across in this template'
p327
sI316
S'        self.blocks = {}'
p328
sI317
S''
sI318
S'        # Begin parsing.'
p329
sI319
S'        self.parse(text)'
p330
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p331
sg84
g48
sa(dp332
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p333
sg62
(dp334
S'self'
p335
S'<gluon.template.TemplateParser object>'
p336
sS'extend'
p337
S'"\'default/index.html\'"'
p338
sS'self.extend'
p339
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p340
ssg72
I765
sg73
(dp341
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p342
sI761
S'            self.child_super_nodes.remove(node)'
p343
sI762
S''
sI763
S'        # If we need to extend a template.'
p344
sI764
S'        if extend:'
p345
sI765
S'            self.extend(extend)'
p346
sI766
S''
sI767
S'# We need this for integration with gluon'
p347
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p348
sg84
g188
sa(dp349
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p350
sg62
(dp351
S'super_nodes'
p352
S'[]'
p353
sS'_super_nodes'
p354
g114
ssg72
I494
sg73
(dp355
I489
S'                           name=filename,'
p356
sI490
S'                           context=self.context,'
p357
sI491
S'                           path=self.path,'
p358
sI492
S'                           writer=self.writer,'
p359
sI493
S'                           delimiters=self.delimiters,'
p360
sI494
S'                           _super_nodes=super_nodes)'
p361
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p362
sI497
S'        # template.'
p363
sI498
S'        buf = BlockNode('
p364
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p365
sg84
g206
sa(dp366
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p367
sg62
(dp368
S'text'
p369
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p370
sS'self'
p371
S'<gluon.template.TemplateParser object>'
p372
sS'self.parse'
p373
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p374
ssg72
I319
sg73
(dp375
I320
S''
sI321
S'    def to_string(self):'
p376
sI322
S'        """'
p377
sI323
S'        Returns the parsed template with correct indentation.'
p378
sI314
S'        # This variable will hold a reference to every block'
p379
sI315
S'        # that we come across in this template'
p380
sI316
S'        self.blocks = {}'
p381
sI317
S''
sI318
S'        # Begin parsing.'
p382
sI319
S'        self.parse(text)'
p383
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p384
sg84
g48
sa(dp385
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p386
sg62
(dp387
S'self'
p388
S'<gluon.template.TemplateParser object>'
p389
sS'extend'
p390
S'"\'default/index.html\'"'
p391
sS'self.extend'
p392
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p393
ssg72
I765
sg73
(dp394
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p395
sI761
S'            self.child_super_nodes.remove(node)'
p396
sI762
S''
sI763
S'        # If we need to extend a template.'
p397
sI764
S'        if extend:'
p398
sI765
S'            self.extend(extend)'
p399
sI766
S''
sI767
S'# We need this for integration with gluon'
p400
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p401
sg84
g188
sa(dp402
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p403
sg62
(dp404
S'super_nodes'
p405
S'[]'
p406
sS'_super_nodes'
p407
g114
ssg72
I494
sg73
(dp408
I489
S'                           name=filename,'
p409
sI490
S'                           context=self.context,'
p410
sI491
S'                           path=self.path,'
p411
sI492
S'                           writer=self.writer,'
p412
sI493
S'                           delimiters=self.delimiters,'
p413
sI494
S'                           _super_nodes=super_nodes)'
p414
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p415
sI497
S'        # template.'
p416
sI498
S'        buf = BlockNode('
p417
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p418
sg84
g206
sa(dp419
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p420
sg62
(dp421
S'text'
p422
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p423
sS'self'
p424
S'<gluon.template.TemplateParser object>'
p425
sS'self.parse'
p426
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p427
ssg72
I319
sg73
(dp428
I320
S''
sI321
S'    def to_string(self):'
p429
sI322
S'        """'
p430
sI323
S'        Returns the parsed template with correct indentation.'
p431
sI314
S'        # This variable will hold a reference to every block'
p432
sI315
S'        # that we come across in this template'
p433
sI316
S'        self.blocks = {}'
p434
sI317
S''
sI318
S'        # Begin parsing.'
p435
sI319
S'        self.parse(text)'
p436
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p437
sg84
g48
sa(dp438
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p439
sg62
(dp440
S'self'
p441
S'<gluon.template.TemplateParser object>'
p442
sS'extend'
p443
S'"\'default/index.html\'"'
p444
sS'self.extend'
p445
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p446
ssg72
I765
sg73
(dp447
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p448
sI761
S'            self.child_super_nodes.remove(node)'
p449
sI762
S''
sI763
S'        # If we need to extend a template.'
p450
sI764
S'        if extend:'
p451
sI765
S'            self.extend(extend)'
p452
sI766
S''
sI767
S'# We need this for integration with gluon'
p453
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p454
sg84
g188
sa(dp455
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p456
sg62
(dp457
S'super_nodes'
p458
S'[]'
p459
sS'_super_nodes'
p460
g114
ssg72
I494
sg73
(dp461
I489
S'                           name=filename,'
p462
sI490
S'                           context=self.context,'
p463
sI491
S'                           path=self.path,'
p464
sI492
S'                           writer=self.writer,'
p465
sI493
S'                           delimiters=self.delimiters,'
p466
sI494
S'                           _super_nodes=super_nodes)'
p467
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p468
sI497
S'        # template.'
p469
sI498
S'        buf = BlockNode('
p470
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p471
sg84
g206
sa(dp472
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p473
sg62
(dp474
S'text'
p475
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p476
sS'self'
p477
S'<gluon.template.TemplateParser object>'
p478
sS'self.parse'
p479
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p480
ssg72
I319
sg73
(dp481
I320
S''
sI321
S'    def to_string(self):'
p482
sI322
S'        """'
p483
sI323
S'        Returns the parsed template with correct indentation.'
p484
sI314
S'        # This variable will hold a reference to every block'
p485
sI315
S'        # that we come across in this template'
p486
sI316
S'        self.blocks = {}'
p487
sI317
S''
sI318
S'        # Begin parsing.'
p488
sI319
S'        self.parse(text)'
p489
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p490
sg84
g48
sa(dp491
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p492
sg62
(dp493
S'self'
p494
S'<gluon.template.TemplateParser object>'
p495
sS'extend'
p496
S'"\'default/index.html\'"'
p497
sS'self.extend'
p498
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p499
ssg72
I765
sg73
(dp500
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p501
sI761
S'            self.child_super_nodes.remove(node)'
p502
sI762
S''
sI763
S'        # If we need to extend a template.'
p503
sI764
S'        if extend:'
p504
sI765
S'            self.extend(extend)'
p505
sI766
S''
sI767
S'# We need this for integration with gluon'
p506
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p507
sg84
g188
sa(dp508
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p509
sg62
(dp510
S'super_nodes'
p511
S'[]'
p512
sS'_super_nodes'
p513
g114
ssg72
I494
sg73
(dp514
I489
S'                           name=filename,'
p515
sI490
S'                           context=self.context,'
p516
sI491
S'                           path=self.path,'
p517
sI492
S'                           writer=self.writer,'
p518
sI493
S'                           delimiters=self.delimiters,'
p519
sI494
S'                           _super_nodes=super_nodes)'
p520
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p521
sI497
S'        # template.'
p522
sI498
S'        buf = BlockNode('
p523
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p524
sg84
g206
sa(dp525
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p526
sg62
(dp527
S'text'
p528
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p529
sS'self'
p530
S'<gluon.template.TemplateParser object>'
p531
sS'self.parse'
p532
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p533
ssg72
I319
sg73
(dp534
I320
S''
sI321
S'    def to_string(self):'
p535
sI322
S'        """'
p536
sI323
S'        Returns the parsed template with correct indentation.'
p537
sI314
S'        # This variable will hold a reference to every block'
p538
sI315
S'        # that we come across in this template'
p539
sI316
S'        self.blocks = {}'
p540
sI317
S''
sI318
S'        # Begin parsing.'
p541
sI319
S'        self.parse(text)'
p542
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p543
sg84
g48
sa(dp544
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p545
sg62
(dp546
S'self'
p547
S'<gluon.template.TemplateParser object>'
p548
sS'extend'
p549
S'"\'default/index.html\'"'
p550
sS'self.extend'
p551
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p552
ssg72
I765
sg73
(dp553
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p554
sI761
S'            self.child_super_nodes.remove(node)'
p555
sI762
S''
sI763
S'        # If we need to extend a template.'
p556
sI764
S'        if extend:'
p557
sI765
S'            self.extend(extend)'
p558
sI766
S''
sI767
S'# We need this for integration with gluon'
p559
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p560
sg84
g188
sa(dp561
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p562
sg62
(dp563
S'super_nodes'
p564
S'[]'
p565
sS'_super_nodes'
p566
g114
ssg72
I494
sg73
(dp567
I489
S'                           name=filename,'
p568
sI490
S'                           context=self.context,'
p569
sI491
S'                           path=self.path,'
p570
sI492
S'                           writer=self.writer,'
p571
sI493
S'                           delimiters=self.delimiters,'
p572
sI494
S'                           _super_nodes=super_nodes)'
p573
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p574
sI497
S'        # template.'
p575
sI498
S'        buf = BlockNode('
p576
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p577
sg84
g206
sa(dp578
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p579
sg62
(dp580
S'text'
p581
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p582
sS'self'
p583
S'<gluon.template.TemplateParser object>'
p584
sS'self.parse'
p585
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p586
ssg72
I319
sg73
(dp587
I320
S''
sI321
S'    def to_string(self):'
p588
sI322
S'        """'
p589
sI323
S'        Returns the parsed template with correct indentation.'
p590
sI314
S'        # This variable will hold a reference to every block'
p591
sI315
S'        # that we come across in this template'
p592
sI316
S'        self.blocks = {}'
p593
sI317
S''
sI318
S'        # Begin parsing.'
p594
sI319
S'        self.parse(text)'
p595
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p596
sg84
g48
sa(dp597
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p598
sg62
(dp599
S'self'
p600
S'<gluon.template.TemplateParser object>'
p601
sS'extend'
p602
S'"\'default/index.html\'"'
p603
sS'self.extend'
p604
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p605
ssg72
I765
sg73
(dp606
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p607
sI761
S'            self.child_super_nodes.remove(node)'
p608
sI762
S''
sI763
S'        # If we need to extend a template.'
p609
sI764
S'        if extend:'
p610
sI765
S'            self.extend(extend)'
p611
sI766
S''
sI767
S'# We need this for integration with gluon'
p612
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p613
sg84
g188
sa(dp614
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p615
sg62
(dp616
S'super_nodes'
p617
S'[]'
p618
sS'_super_nodes'
p619
g114
ssg72
I494
sg73
(dp620
I489
S'                           name=filename,'
p621
sI490
S'                           context=self.context,'
p622
sI491
S'                           path=self.path,'
p623
sI492
S'                           writer=self.writer,'
p624
sI493
S'                           delimiters=self.delimiters,'
p625
sI494
S'                           _super_nodes=super_nodes)'
p626
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p627
sI497
S'        # template.'
p628
sI498
S'        buf = BlockNode('
p629
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p630
sg84
g206
sa(dp631
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p632
sg62
(dp633
S'text'
p634
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p635
sS'self'
p636
S'<gluon.template.TemplateParser object>'
p637
sS'self.parse'
p638
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p639
ssg72
I319
sg73
(dp640
I320
S''
sI321
S'    def to_string(self):'
p641
sI322
S'        """'
p642
sI323
S'        Returns the parsed template with correct indentation.'
p643
sI314
S'        # This variable will hold a reference to every block'
p644
sI315
S'        # that we come across in this template'
p645
sI316
S'        self.blocks = {}'
p646
sI317
S''
sI318
S'        # Begin parsing.'
p647
sI319
S'        self.parse(text)'
p648
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p649
sg84
g48
sa(dp650
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p651
sg62
(dp652
S'self'
p653
S'<gluon.template.TemplateParser object>'
p654
sS'extend'
p655
S'"\'default/index.html\'"'
p656
sS'self.extend'
p657
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p658
ssg72
I765
sg73
(dp659
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p660
sI761
S'            self.child_super_nodes.remove(node)'
p661
sI762
S''
sI763
S'        # If we need to extend a template.'
p662
sI764
S'        if extend:'
p663
sI765
S'            self.extend(extend)'
p664
sI766
S''
sI767
S'# We need this for integration with gluon'
p665
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p666
sg84
g188
sa(dp667
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p668
sg62
(dp669
S'super_nodes'
p670
S'[]'
p671
sS'_super_nodes'
p672
g114
ssg72
I494
sg73
(dp673
I489
S'                           name=filename,'
p674
sI490
S'                           context=self.context,'
p675
sI491
S'                           path=self.path,'
p676
sI492
S'                           writer=self.writer,'
p677
sI493
S'                           delimiters=self.delimiters,'
p678
sI494
S'                           _super_nodes=super_nodes)'
p679
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p680
sI497
S'        # template.'
p681
sI498
S'        buf = BlockNode('
p682
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p683
sg84
g206
sa(dp684
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p685
sg62
(dp686
S'text'
p687
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p688
sS'self'
p689
S'<gluon.template.TemplateParser object>'
p690
sS'self.parse'
p691
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p692
ssg72
I319
sg73
(dp693
I320
S''
sI321
S'    def to_string(self):'
p694
sI322
S'        """'
p695
sI323
S'        Returns the parsed template with correct indentation.'
p696
sI314
S'        # This variable will hold a reference to every block'
p697
sI315
S'        # that we come across in this template'
p698
sI316
S'        self.blocks = {}'
p699
sI317
S''
sI318
S'        # Begin parsing.'
p700
sI319
S'        self.parse(text)'
p701
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p702
sg84
g48
sa(dp703
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p704
sg62
(dp705
S'self'
p706
S'<gluon.template.TemplateParser object>'
p707
sS'extend'
p708
S'"\'default/index.html\'"'
p709
sS'self.extend'
p710
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p711
ssg72
I765
sg73
(dp712
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p713
sI761
S'            self.child_super_nodes.remove(node)'
p714
sI762
S''
sI763
S'        # If we need to extend a template.'
p715
sI764
S'        if extend:'
p716
sI765
S'            self.extend(extend)'
p717
sI766
S''
sI767
S'# We need this for integration with gluon'
p718
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p719
sg84
g188
sa(dp720
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p721
sg62
(dp722
S'super_nodes'
p723
S'[]'
p724
sS'_super_nodes'
p725
g114
ssg72
I494
sg73
(dp726
I489
S'                           name=filename,'
p727
sI490
S'                           context=self.context,'
p728
sI491
S'                           path=self.path,'
p729
sI492
S'                           writer=self.writer,'
p730
sI493
S'                           delimiters=self.delimiters,'
p731
sI494
S'                           _super_nodes=super_nodes)'
p732
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p733
sI497
S'        # template.'
p734
sI498
S'        buf = BlockNode('
p735
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p736
sg84
g206
sa(dp737
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p738
sg62
(dp739
S'text'
p740
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p741
sS'self'
p742
S'<gluon.template.TemplateParser object>'
p743
sS'self.parse'
p744
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p745
ssg72
I319
sg73
(dp746
I320
S''
sI321
S'    def to_string(self):'
p747
sI322
S'        """'
p748
sI323
S'        Returns the parsed template with correct indentation.'
p749
sI314
S'        # This variable will hold a reference to every block'
p750
sI315
S'        # that we come across in this template'
p751
sI316
S'        self.blocks = {}'
p752
sI317
S''
sI318
S'        # Begin parsing.'
p753
sI319
S'        self.parse(text)'
p754
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p755
sg84
g48
sa(dp756
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p757
sg62
(dp758
S'self'
p759
S'<gluon.template.TemplateParser object>'
p760
sS'extend'
p761
S'"\'default/index.html\'"'
p762
sS'self.extend'
p763
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p764
ssg72
I765
sg73
(dp765
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p766
sI761
S'            self.child_super_nodes.remove(node)'
p767
sI762
S''
sI763
S'        # If we need to extend a template.'
p768
sI764
S'        if extend:'
p769
sI765
S'            self.extend(extend)'
p770
sI766
S''
sI767
S'# We need this for integration with gluon'
p771
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p772
sg84
g188
sa(dp773
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p774
sg62
(dp775
S'super_nodes'
p776
S'[]'
p777
sS'_super_nodes'
p778
g114
ssg72
I494
sg73
(dp779
I489
S'                           name=filename,'
p780
sI490
S'                           context=self.context,'
p781
sI491
S'                           path=self.path,'
p782
sI492
S'                           writer=self.writer,'
p783
sI493
S'                           delimiters=self.delimiters,'
p784
sI494
S'                           _super_nodes=super_nodes)'
p785
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p786
sI497
S'        # template.'
p787
sI498
S'        buf = BlockNode('
p788
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p789
sg84
g206
sa(dp790
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p791
sg62
(dp792
S'text'
p793
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p794
sS'self'
p795
S'<gluon.template.TemplateParser object>'
p796
sS'self.parse'
p797
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p798
ssg72
I319
sg73
(dp799
I320
S''
sI321
S'    def to_string(self):'
p800
sI322
S'        """'
p801
sI323
S'        Returns the parsed template with correct indentation.'
p802
sI314
S'        # This variable will hold a reference to every block'
p803
sI315
S'        # that we come across in this template'
p804
sI316
S'        self.blocks = {}'
p805
sI317
S''
sI318
S'        # Begin parsing.'
p806
sI319
S'        self.parse(text)'
p807
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p808
sg84
g48
sa(dp809
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p810
sg62
(dp811
S'self'
p812
S'<gluon.template.TemplateParser object>'
p813
sS'extend'
p814
S'"\'default/index.html\'"'
p815
sS'self.extend'
p816
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p817
ssg72
I765
sg73
(dp818
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p819
sI761
S'            self.child_super_nodes.remove(node)'
p820
sI762
S''
sI763
S'        # If we need to extend a template.'
p821
sI764
S'        if extend:'
p822
sI765
S'            self.extend(extend)'
p823
sI766
S''
sI767
S'# We need this for integration with gluon'
p824
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p825
sg84
g188
sa(dp826
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p827
sg62
(dp828
S'super_nodes'
p829
S'[]'
p830
sS'_super_nodes'
p831
g114
ssg72
I494
sg73
(dp832
I489
S'                           name=filename,'
p833
sI490
S'                           context=self.context,'
p834
sI491
S'                           path=self.path,'
p835
sI492
S'                           writer=self.writer,'
p836
sI493
S'                           delimiters=self.delimiters,'
p837
sI494
S'                           _super_nodes=super_nodes)'
p838
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p839
sI497
S'        # template.'
p840
sI498
S'        buf = BlockNode('
p841
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p842
sg84
g206
sa(dp843
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p844
sg62
(dp845
S'text'
p846
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p847
sS'self'
p848
S'<gluon.template.TemplateParser object>'
p849
sS'self.parse'
p850
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p851
ssg72
I319
sg73
(dp852
I320
S''
sI321
S'    def to_string(self):'
p853
sI322
S'        """'
p854
sI323
S'        Returns the parsed template with correct indentation.'
p855
sI314
S'        # This variable will hold a reference to every block'
p856
sI315
S'        # that we come across in this template'
p857
sI316
S'        self.blocks = {}'
p858
sI317
S''
sI318
S'        # Begin parsing.'
p859
sI319
S'        self.parse(text)'
p860
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p861
sg84
g48
sa(dp862
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p863
sg62
(dp864
S'self'
p865
S'<gluon.template.TemplateParser object>'
p866
sS'extend'
p867
S'"\'default/index.html\'"'
p868
sS'self.extend'
p869
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p870
ssg72
I765
sg73
(dp871
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p872
sI761
S'            self.child_super_nodes.remove(node)'
p873
sI762
S''
sI763
S'        # If we need to extend a template.'
p874
sI764
S'        if extend:'
p875
sI765
S'            self.extend(extend)'
p876
sI766
S''
sI767
S'# We need this for integration with gluon'
p877
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p878
sg84
g188
sa(dp879
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p880
sg62
(dp881
S'super_nodes'
p882
S'[]'
p883
sS'_super_nodes'
p884
g114
ssg72
I494
sg73
(dp885
I489
S'                           name=filename,'
p886
sI490
S'                           context=self.context,'
p887
sI491
S'                           path=self.path,'
p888
sI492
S'                           writer=self.writer,'
p889
sI493
S'                           delimiters=self.delimiters,'
p890
sI494
S'                           _super_nodes=super_nodes)'
p891
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p892
sI497
S'        # template.'
p893
sI498
S'        buf = BlockNode('
p894
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p895
sg84
g206
sa(dp896
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p897
sg62
(dp898
S'text'
p899
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p900
sS'self'
p901
S'<gluon.template.TemplateParser object>'
p902
sS'self.parse'
p903
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p904
ssg72
I319
sg73
(dp905
I320
S''
sI321
S'    def to_string(self):'
p906
sI322
S'        """'
p907
sI323
S'        Returns the parsed template with correct indentation.'
p908
sI314
S'        # This variable will hold a reference to every block'
p909
sI315
S'        # that we come across in this template'
p910
sI316
S'        self.blocks = {}'
p911
sI317
S''
sI318
S'        # Begin parsing.'
p912
sI319
S'        self.parse(text)'
p913
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p914
sg84
g48
sa(dp915
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p916
sg62
(dp917
S'self'
p918
S'<gluon.template.TemplateParser object>'
p919
sS'extend'
p920
S'"\'default/index.html\'"'
p921
sS'self.extend'
p922
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p923
ssg72
I765
sg73
(dp924
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p925
sI761
S'            self.child_super_nodes.remove(node)'
p926
sI762
S''
sI763
S'        # If we need to extend a template.'
p927
sI764
S'        if extend:'
p928
sI765
S'            self.extend(extend)'
p929
sI766
S''
sI767
S'# We need this for integration with gluon'
p930
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p931
sg84
g188
sa(dp932
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p933
sg62
(dp934
S'super_nodes'
p935
S'[]'
p936
sS'_super_nodes'
p937
g114
ssg72
I494
sg73
(dp938
I489
S'                           name=filename,'
p939
sI490
S'                           context=self.context,'
p940
sI491
S'                           path=self.path,'
p941
sI492
S'                           writer=self.writer,'
p942
sI493
S'                           delimiters=self.delimiters,'
p943
sI494
S'                           _super_nodes=super_nodes)'
p944
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p945
sI497
S'        # template.'
p946
sI498
S'        buf = BlockNode('
p947
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p948
sg84
g206
sa(dp949
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p950
sg62
(dp951
S'text'
p952
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p953
sS'self'
p954
S'<gluon.template.TemplateParser object>'
p955
sS'self.parse'
p956
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p957
ssg72
I319
sg73
(dp958
I320
S''
sI321
S'    def to_string(self):'
p959
sI322
S'        """'
p960
sI323
S'        Returns the parsed template with correct indentation.'
p961
sI314
S'        # This variable will hold a reference to every block'
p962
sI315
S'        # that we come across in this template'
p963
sI316
S'        self.blocks = {}'
p964
sI317
S''
sI318
S'        # Begin parsing.'
p965
sI319
S'        self.parse(text)'
p966
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p967
sg84
g48
sa(dp968
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p969
sg62
(dp970
S'self'
p971
S'<gluon.template.TemplateParser object>'
p972
sS'extend'
p973
S'"\'default/index.html\'"'
p974
sS'self.extend'
p975
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p976
ssg72
I765
sg73
(dp977
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p978
sI761
S'            self.child_super_nodes.remove(node)'
p979
sI762
S''
sI763
S'        # If we need to extend a template.'
p980
sI764
S'        if extend:'
p981
sI765
S'            self.extend(extend)'
p982
sI766
S''
sI767
S'# We need this for integration with gluon'
p983
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p984
sg84
g188
sa(dp985
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p986
sg62
(dp987
S'super_nodes'
p988
S'[]'
p989
sS'_super_nodes'
p990
g114
ssg72
I494
sg73
(dp991
I489
S'                           name=filename,'
p992
sI490
S'                           context=self.context,'
p993
sI491
S'                           path=self.path,'
p994
sI492
S'                           writer=self.writer,'
p995
sI493
S'                           delimiters=self.delimiters,'
p996
sI494
S'                           _super_nodes=super_nodes)'
p997
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p998
sI497
S'        # template.'
p999
sI498
S'        buf = BlockNode('
p1000
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1001
sg84
g206
sa(dp1002
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1003
sg62
(dp1004
S'text'
p1005
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1006
sS'self'
p1007
S'<gluon.template.TemplateParser object>'
p1008
sS'self.parse'
p1009
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1010
ssg72
I319
sg73
(dp1011
I320
S''
sI321
S'    def to_string(self):'
p1012
sI322
S'        """'
p1013
sI323
S'        Returns the parsed template with correct indentation.'
p1014
sI314
S'        # This variable will hold a reference to every block'
p1015
sI315
S'        # that we come across in this template'
p1016
sI316
S'        self.blocks = {}'
p1017
sI317
S''
sI318
S'        # Begin parsing.'
p1018
sI319
S'        self.parse(text)'
p1019
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1020
sg84
g48
sa(dp1021
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1022
sg62
(dp1023
S'self'
p1024
S'<gluon.template.TemplateParser object>'
p1025
sS'extend'
p1026
S'"\'default/index.html\'"'
p1027
sS'self.extend'
p1028
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1029
ssg72
I765
sg73
(dp1030
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1031
sI761
S'            self.child_super_nodes.remove(node)'
p1032
sI762
S''
sI763
S'        # If we need to extend a template.'
p1033
sI764
S'        if extend:'
p1034
sI765
S'            self.extend(extend)'
p1035
sI766
S''
sI767
S'# We need this for integration with gluon'
p1036
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1037
sg84
g188
sa(dp1038
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1039
sg62
(dp1040
S'super_nodes'
p1041
S'[]'
p1042
sS'_super_nodes'
p1043
g114
ssg72
I494
sg73
(dp1044
I489
S'                           name=filename,'
p1045
sI490
S'                           context=self.context,'
p1046
sI491
S'                           path=self.path,'
p1047
sI492
S'                           writer=self.writer,'
p1048
sI493
S'                           delimiters=self.delimiters,'
p1049
sI494
S'                           _super_nodes=super_nodes)'
p1050
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1051
sI497
S'        # template.'
p1052
sI498
S'        buf = BlockNode('
p1053
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1054
sg84
g206
sa(dp1055
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1056
sg62
(dp1057
S'text'
p1058
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1059
sS'self'
p1060
S'<gluon.template.TemplateParser object>'
p1061
sS'self.parse'
p1062
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1063
ssg72
I319
sg73
(dp1064
I320
S''
sI321
S'    def to_string(self):'
p1065
sI322
S'        """'
p1066
sI323
S'        Returns the parsed template with correct indentation.'
p1067
sI314
S'        # This variable will hold a reference to every block'
p1068
sI315
S'        # that we come across in this template'
p1069
sI316
S'        self.blocks = {}'
p1070
sI317
S''
sI318
S'        # Begin parsing.'
p1071
sI319
S'        self.parse(text)'
p1072
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1073
sg84
g48
sa(dp1074
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1075
sg62
(dp1076
S'self'
p1077
S'<gluon.template.TemplateParser object>'
p1078
sS'extend'
p1079
S'"\'default/index.html\'"'
p1080
sS'self.extend'
p1081
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1082
ssg72
I765
sg73
(dp1083
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1084
sI761
S'            self.child_super_nodes.remove(node)'
p1085
sI762
S''
sI763
S'        # If we need to extend a template.'
p1086
sI764
S'        if extend:'
p1087
sI765
S'            self.extend(extend)'
p1088
sI766
S''
sI767
S'# We need this for integration with gluon'
p1089
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1090
sg84
g188
sa(dp1091
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1092
sg62
(dp1093
S'super_nodes'
p1094
S'[]'
p1095
sS'_super_nodes'
p1096
g114
ssg72
I494
sg73
(dp1097
I489
S'                           name=filename,'
p1098
sI490
S'                           context=self.context,'
p1099
sI491
S'                           path=self.path,'
p1100
sI492
S'                           writer=self.writer,'
p1101
sI493
S'                           delimiters=self.delimiters,'
p1102
sI494
S'                           _super_nodes=super_nodes)'
p1103
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1104
sI497
S'        # template.'
p1105
sI498
S'        buf = BlockNode('
p1106
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1107
sg84
g206
sa(dp1108
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1109
sg62
(dp1110
S'text'
p1111
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1112
sS'self'
p1113
S'<gluon.template.TemplateParser object>'
p1114
sS'self.parse'
p1115
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1116
ssg72
I319
sg73
(dp1117
I320
S''
sI321
S'    def to_string(self):'
p1118
sI322
S'        """'
p1119
sI323
S'        Returns the parsed template with correct indentation.'
p1120
sI314
S'        # This variable will hold a reference to every block'
p1121
sI315
S'        # that we come across in this template'
p1122
sI316
S'        self.blocks = {}'
p1123
sI317
S''
sI318
S'        # Begin parsing.'
p1124
sI319
S'        self.parse(text)'
p1125
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1126
sg84
g48
sa(dp1127
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1128
sg62
(dp1129
S'self'
p1130
S'<gluon.template.TemplateParser object>'
p1131
sS'extend'
p1132
S'"\'default/index.html\'"'
p1133
sS'self.extend'
p1134
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1135
ssg72
I765
sg73
(dp1136
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1137
sI761
S'            self.child_super_nodes.remove(node)'
p1138
sI762
S''
sI763
S'        # If we need to extend a template.'
p1139
sI764
S'        if extend:'
p1140
sI765
S'            self.extend(extend)'
p1141
sI766
S''
sI767
S'# We need this for integration with gluon'
p1142
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1143
sg84
g188
sa(dp1144
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1145
sg62
(dp1146
S'super_nodes'
p1147
S'[]'
p1148
sS'_super_nodes'
p1149
g114
ssg72
I494
sg73
(dp1150
I489
S'                           name=filename,'
p1151
sI490
S'                           context=self.context,'
p1152
sI491
S'                           path=self.path,'
p1153
sI492
S'                           writer=self.writer,'
p1154
sI493
S'                           delimiters=self.delimiters,'
p1155
sI494
S'                           _super_nodes=super_nodes)'
p1156
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1157
sI497
S'        # template.'
p1158
sI498
S'        buf = BlockNode('
p1159
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1160
sg84
g206
sa(dp1161
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1162
sg62
(dp1163
S'text'
p1164
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1165
sS'self'
p1166
S'<gluon.template.TemplateParser object>'
p1167
sS'self.parse'
p1168
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1169
ssg72
I319
sg73
(dp1170
I320
S''
sI321
S'    def to_string(self):'
p1171
sI322
S'        """'
p1172
sI323
S'        Returns the parsed template with correct indentation.'
p1173
sI314
S'        # This variable will hold a reference to every block'
p1174
sI315
S'        # that we come across in this template'
p1175
sI316
S'        self.blocks = {}'
p1176
sI317
S''
sI318
S'        # Begin parsing.'
p1177
sI319
S'        self.parse(text)'
p1178
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1179
sg84
g48
sa(dp1180
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1181
sg62
(dp1182
S'self'
p1183
S'<gluon.template.TemplateParser object>'
p1184
sS'extend'
p1185
S'"\'default/index.html\'"'
p1186
sS'self.extend'
p1187
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1188
ssg72
I765
sg73
(dp1189
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1190
sI761
S'            self.child_super_nodes.remove(node)'
p1191
sI762
S''
sI763
S'        # If we need to extend a template.'
p1192
sI764
S'        if extend:'
p1193
sI765
S'            self.extend(extend)'
p1194
sI766
S''
sI767
S'# We need this for integration with gluon'
p1195
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1196
sg84
g188
sa(dp1197
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1198
sg62
(dp1199
S'super_nodes'
p1200
S'[]'
p1201
sS'_super_nodes'
p1202
g114
ssg72
I494
sg73
(dp1203
I489
S'                           name=filename,'
p1204
sI490
S'                           context=self.context,'
p1205
sI491
S'                           path=self.path,'
p1206
sI492
S'                           writer=self.writer,'
p1207
sI493
S'                           delimiters=self.delimiters,'
p1208
sI494
S'                           _super_nodes=super_nodes)'
p1209
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1210
sI497
S'        # template.'
p1211
sI498
S'        buf = BlockNode('
p1212
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1213
sg84
g206
sa(dp1214
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1215
sg62
(dp1216
S'text'
p1217
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1218
sS'self'
p1219
S'<gluon.template.TemplateParser object>'
p1220
sS'self.parse'
p1221
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1222
ssg72
I319
sg73
(dp1223
I320
S''
sI321
S'    def to_string(self):'
p1224
sI322
S'        """'
p1225
sI323
S'        Returns the parsed template with correct indentation.'
p1226
sI314
S'        # This variable will hold a reference to every block'
p1227
sI315
S'        # that we come across in this template'
p1228
sI316
S'        self.blocks = {}'
p1229
sI317
S''
sI318
S'        # Begin parsing.'
p1230
sI319
S'        self.parse(text)'
p1231
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1232
sg84
g48
sa(dp1233
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1234
sg62
(dp1235
S'self'
p1236
S'<gluon.template.TemplateParser object>'
p1237
sS'extend'
p1238
S'"\'default/index.html\'"'
p1239
sS'self.extend'
p1240
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1241
ssg72
I765
sg73
(dp1242
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1243
sI761
S'            self.child_super_nodes.remove(node)'
p1244
sI762
S''
sI763
S'        # If we need to extend a template.'
p1245
sI764
S'        if extend:'
p1246
sI765
S'            self.extend(extend)'
p1247
sI766
S''
sI767
S'# We need this for integration with gluon'
p1248
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1249
sg84
g188
sa(dp1250
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1251
sg62
(dp1252
S'super_nodes'
p1253
S'[]'
p1254
sS'_super_nodes'
p1255
g114
ssg72
I494
sg73
(dp1256
I489
S'                           name=filename,'
p1257
sI490
S'                           context=self.context,'
p1258
sI491
S'                           path=self.path,'
p1259
sI492
S'                           writer=self.writer,'
p1260
sI493
S'                           delimiters=self.delimiters,'
p1261
sI494
S'                           _super_nodes=super_nodes)'
p1262
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1263
sI497
S'        # template.'
p1264
sI498
S'        buf = BlockNode('
p1265
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1266
sg84
g206
sa(dp1267
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1268
sg62
(dp1269
S'text'
p1270
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1271
sS'self'
p1272
S'<gluon.template.TemplateParser object>'
p1273
sS'self.parse'
p1274
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1275
ssg72
I319
sg73
(dp1276
I320
S''
sI321
S'    def to_string(self):'
p1277
sI322
S'        """'
p1278
sI323
S'        Returns the parsed template with correct indentation.'
p1279
sI314
S'        # This variable will hold a reference to every block'
p1280
sI315
S'        # that we come across in this template'
p1281
sI316
S'        self.blocks = {}'
p1282
sI317
S''
sI318
S'        # Begin parsing.'
p1283
sI319
S'        self.parse(text)'
p1284
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1285
sg84
g48
sa(dp1286
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1287
sg62
(dp1288
S'self'
p1289
S'<gluon.template.TemplateParser object>'
p1290
sS'extend'
p1291
S'"\'default/index.html\'"'
p1292
sS'self.extend'
p1293
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1294
ssg72
I765
sg73
(dp1295
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1296
sI761
S'            self.child_super_nodes.remove(node)'
p1297
sI762
S''
sI763
S'        # If we need to extend a template.'
p1298
sI764
S'        if extend:'
p1299
sI765
S'            self.extend(extend)'
p1300
sI766
S''
sI767
S'# We need this for integration with gluon'
p1301
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1302
sg84
g188
sa(dp1303
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1304
sg62
(dp1305
S'super_nodes'
p1306
S'[]'
p1307
sS'_super_nodes'
p1308
g114
ssg72
I494
sg73
(dp1309
I489
S'                           name=filename,'
p1310
sI490
S'                           context=self.context,'
p1311
sI491
S'                           path=self.path,'
p1312
sI492
S'                           writer=self.writer,'
p1313
sI493
S'                           delimiters=self.delimiters,'
p1314
sI494
S'                           _super_nodes=super_nodes)'
p1315
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1316
sI497
S'        # template.'
p1317
sI498
S'        buf = BlockNode('
p1318
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1319
sg84
g206
sa(dp1320
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1321
sg62
(dp1322
S'text'
p1323
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1324
sS'self'
p1325
S'<gluon.template.TemplateParser object>'
p1326
sS'self.parse'
p1327
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1328
ssg72
I319
sg73
(dp1329
I320
S''
sI321
S'    def to_string(self):'
p1330
sI322
S'        """'
p1331
sI323
S'        Returns the parsed template with correct indentation.'
p1332
sI314
S'        # This variable will hold a reference to every block'
p1333
sI315
S'        # that we come across in this template'
p1334
sI316
S'        self.blocks = {}'
p1335
sI317
S''
sI318
S'        # Begin parsing.'
p1336
sI319
S'        self.parse(text)'
p1337
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1338
sg84
g48
sa(dp1339
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1340
sg62
(dp1341
S'self'
p1342
S'<gluon.template.TemplateParser object>'
p1343
sS'extend'
p1344
S'"\'default/index.html\'"'
p1345
sS'self.extend'
p1346
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1347
ssg72
I765
sg73
(dp1348
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1349
sI761
S'            self.child_super_nodes.remove(node)'
p1350
sI762
S''
sI763
S'        # If we need to extend a template.'
p1351
sI764
S'        if extend:'
p1352
sI765
S'            self.extend(extend)'
p1353
sI766
S''
sI767
S'# We need this for integration with gluon'
p1354
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1355
sg84
g188
sa(dp1356
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1357
sg62
(dp1358
S'super_nodes'
p1359
S'[]'
p1360
sS'_super_nodes'
p1361
g114
ssg72
I494
sg73
(dp1362
I489
S'                           name=filename,'
p1363
sI490
S'                           context=self.context,'
p1364
sI491
S'                           path=self.path,'
p1365
sI492
S'                           writer=self.writer,'
p1366
sI493
S'                           delimiters=self.delimiters,'
p1367
sI494
S'                           _super_nodes=super_nodes)'
p1368
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1369
sI497
S'        # template.'
p1370
sI498
S'        buf = BlockNode('
p1371
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1372
sg84
g206
sa(dp1373
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1374
sg62
(dp1375
S'text'
p1376
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1377
sS'self'
p1378
S'<gluon.template.TemplateParser object>'
p1379
sS'self.parse'
p1380
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1381
ssg72
I319
sg73
(dp1382
I320
S''
sI321
S'    def to_string(self):'
p1383
sI322
S'        """'
p1384
sI323
S'        Returns the parsed template with correct indentation.'
p1385
sI314
S'        # This variable will hold a reference to every block'
p1386
sI315
S'        # that we come across in this template'
p1387
sI316
S'        self.blocks = {}'
p1388
sI317
S''
sI318
S'        # Begin parsing.'
p1389
sI319
S'        self.parse(text)'
p1390
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1391
sg84
g48
sa(dp1392
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1393
sg62
(dp1394
S'self'
p1395
S'<gluon.template.TemplateParser object>'
p1396
sS'extend'
p1397
S'"\'default/index.html\'"'
p1398
sS'self.extend'
p1399
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1400
ssg72
I765
sg73
(dp1401
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1402
sI761
S'            self.child_super_nodes.remove(node)'
p1403
sI762
S''
sI763
S'        # If we need to extend a template.'
p1404
sI764
S'        if extend:'
p1405
sI765
S'            self.extend(extend)'
p1406
sI766
S''
sI767
S'# We need this for integration with gluon'
p1407
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1408
sg84
g188
sa(dp1409
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1410
sg62
(dp1411
S'super_nodes'
p1412
S'[]'
p1413
sS'_super_nodes'
p1414
g114
ssg72
I494
sg73
(dp1415
I489
S'                           name=filename,'
p1416
sI490
S'                           context=self.context,'
p1417
sI491
S'                           path=self.path,'
p1418
sI492
S'                           writer=self.writer,'
p1419
sI493
S'                           delimiters=self.delimiters,'
p1420
sI494
S'                           _super_nodes=super_nodes)'
p1421
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1422
sI497
S'        # template.'
p1423
sI498
S'        buf = BlockNode('
p1424
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1425
sg84
g206
sa(dp1426
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1427
sg62
(dp1428
S'text'
p1429
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1430
sS'self'
p1431
S'<gluon.template.TemplateParser object>'
p1432
sS'self.parse'
p1433
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1434
ssg72
I319
sg73
(dp1435
I320
S''
sI321
S'    def to_string(self):'
p1436
sI322
S'        """'
p1437
sI323
S'        Returns the parsed template with correct indentation.'
p1438
sI314
S'        # This variable will hold a reference to every block'
p1439
sI315
S'        # that we come across in this template'
p1440
sI316
S'        self.blocks = {}'
p1441
sI317
S''
sI318
S'        # Begin parsing.'
p1442
sI319
S'        self.parse(text)'
p1443
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1444
sg84
g48
sa(dp1445
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1446
sg62
(dp1447
S'self'
p1448
S'<gluon.template.TemplateParser object>'
p1449
sS'extend'
p1450
S'"\'default/index.html\'"'
p1451
sS'self.extend'
p1452
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1453
ssg72
I765
sg73
(dp1454
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1455
sI761
S'            self.child_super_nodes.remove(node)'
p1456
sI762
S''
sI763
S'        # If we need to extend a template.'
p1457
sI764
S'        if extend:'
p1458
sI765
S'            self.extend(extend)'
p1459
sI766
S''
sI767
S'# We need this for integration with gluon'
p1460
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1461
sg84
g188
sa(dp1462
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1463
sg62
(dp1464
S'super_nodes'
p1465
S'[]'
p1466
sS'_super_nodes'
p1467
g114
ssg72
I494
sg73
(dp1468
I489
S'                           name=filename,'
p1469
sI490
S'                           context=self.context,'
p1470
sI491
S'                           path=self.path,'
p1471
sI492
S'                           writer=self.writer,'
p1472
sI493
S'                           delimiters=self.delimiters,'
p1473
sI494
S'                           _super_nodes=super_nodes)'
p1474
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1475
sI497
S'        # template.'
p1476
sI498
S'        buf = BlockNode('
p1477
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1478
sg84
g206
sa(dp1479
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1480
sg62
(dp1481
S'text'
p1482
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1483
sS'self'
p1484
S'<gluon.template.TemplateParser object>'
p1485
sS'self.parse'
p1486
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1487
ssg72
I319
sg73
(dp1488
I320
S''
sI321
S'    def to_string(self):'
p1489
sI322
S'        """'
p1490
sI323
S'        Returns the parsed template with correct indentation.'
p1491
sI314
S'        # This variable will hold a reference to every block'
p1492
sI315
S'        # that we come across in this template'
p1493
sI316
S'        self.blocks = {}'
p1494
sI317
S''
sI318
S'        # Begin parsing.'
p1495
sI319
S'        self.parse(text)'
p1496
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1497
sg84
g48
sa(dp1498
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1499
sg62
(dp1500
S'self'
p1501
S'<gluon.template.TemplateParser object>'
p1502
sS'extend'
p1503
S'"\'default/index.html\'"'
p1504
sS'self.extend'
p1505
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1506
ssg72
I765
sg73
(dp1507
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1508
sI761
S'            self.child_super_nodes.remove(node)'
p1509
sI762
S''
sI763
S'        # If we need to extend a template.'
p1510
sI764
S'        if extend:'
p1511
sI765
S'            self.extend(extend)'
p1512
sI766
S''
sI767
S'# We need this for integration with gluon'
p1513
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1514
sg84
g188
sa(dp1515
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1516
sg62
(dp1517
S'super_nodes'
p1518
S'[]'
p1519
sS'_super_nodes'
p1520
g114
ssg72
I494
sg73
(dp1521
I489
S'                           name=filename,'
p1522
sI490
S'                           context=self.context,'
p1523
sI491
S'                           path=self.path,'
p1524
sI492
S'                           writer=self.writer,'
p1525
sI493
S'                           delimiters=self.delimiters,'
p1526
sI494
S'                           _super_nodes=super_nodes)'
p1527
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1528
sI497
S'        # template.'
p1529
sI498
S'        buf = BlockNode('
p1530
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1531
sg84
g206
sa(dp1532
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1533
sg62
(dp1534
S'text'
p1535
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1536
sS'self'
p1537
S'<gluon.template.TemplateParser object>'
p1538
sS'self.parse'
p1539
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1540
ssg72
I319
sg73
(dp1541
I320
S''
sI321
S'    def to_string(self):'
p1542
sI322
S'        """'
p1543
sI323
S'        Returns the parsed template with correct indentation.'
p1544
sI314
S'        # This variable will hold a reference to every block'
p1545
sI315
S'        # that we come across in this template'
p1546
sI316
S'        self.blocks = {}'
p1547
sI317
S''
sI318
S'        # Begin parsing.'
p1548
sI319
S'        self.parse(text)'
p1549
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1550
sg84
g48
sa(dp1551
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1552
sg62
(dp1553
S'self'
p1554
S'<gluon.template.TemplateParser object>'
p1555
sS'extend'
p1556
S'"\'default/index.html\'"'
p1557
sS'self.extend'
p1558
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1559
ssg72
I765
sg73
(dp1560
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1561
sI761
S'            self.child_super_nodes.remove(node)'
p1562
sI762
S''
sI763
S'        # If we need to extend a template.'
p1563
sI764
S'        if extend:'
p1564
sI765
S'            self.extend(extend)'
p1565
sI766
S''
sI767
S'# We need this for integration with gluon'
p1566
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1567
sg84
g188
sa(dp1568
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1569
sg62
(dp1570
S'super_nodes'
p1571
S'[]'
p1572
sS'_super_nodes'
p1573
g114
ssg72
I494
sg73
(dp1574
I489
S'                           name=filename,'
p1575
sI490
S'                           context=self.context,'
p1576
sI491
S'                           path=self.path,'
p1577
sI492
S'                           writer=self.writer,'
p1578
sI493
S'                           delimiters=self.delimiters,'
p1579
sI494
S'                           _super_nodes=super_nodes)'
p1580
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1581
sI497
S'        # template.'
p1582
sI498
S'        buf = BlockNode('
p1583
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1584
sg84
g206
sa(dp1585
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1586
sg62
(dp1587
S'text'
p1588
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1589
sS'self'
p1590
S'<gluon.template.TemplateParser object>'
p1591
sS'self.parse'
p1592
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1593
ssg72
I319
sg73
(dp1594
I320
S''
sI321
S'    def to_string(self):'
p1595
sI322
S'        """'
p1596
sI323
S'        Returns the parsed template with correct indentation.'
p1597
sI314
S'        # This variable will hold a reference to every block'
p1598
sI315
S'        # that we come across in this template'
p1599
sI316
S'        self.blocks = {}'
p1600
sI317
S''
sI318
S'        # Begin parsing.'
p1601
sI319
S'        self.parse(text)'
p1602
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1603
sg84
g48
sa(dp1604
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1605
sg62
(dp1606
S'self'
p1607
S'<gluon.template.TemplateParser object>'
p1608
sS'extend'
p1609
S'"\'default/index.html\'"'
p1610
sS'self.extend'
p1611
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1612
ssg72
I765
sg73
(dp1613
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1614
sI761
S'            self.child_super_nodes.remove(node)'
p1615
sI762
S''
sI763
S'        # If we need to extend a template.'
p1616
sI764
S'        if extend:'
p1617
sI765
S'            self.extend(extend)'
p1618
sI766
S''
sI767
S'# We need this for integration with gluon'
p1619
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1620
sg84
g188
sa(dp1621
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1622
sg62
(dp1623
S'super_nodes'
p1624
S'[]'
p1625
sS'_super_nodes'
p1626
g114
ssg72
I494
sg73
(dp1627
I489
S'                           name=filename,'
p1628
sI490
S'                           context=self.context,'
p1629
sI491
S'                           path=self.path,'
p1630
sI492
S'                           writer=self.writer,'
p1631
sI493
S'                           delimiters=self.delimiters,'
p1632
sI494
S'                           _super_nodes=super_nodes)'
p1633
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1634
sI497
S'        # template.'
p1635
sI498
S'        buf = BlockNode('
p1636
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1637
sg84
g206
sa(dp1638
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1639
sg62
(dp1640
S'text'
p1641
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1642
sS'self'
p1643
S'<gluon.template.TemplateParser object>'
p1644
sS'self.parse'
p1645
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1646
ssg72
I319
sg73
(dp1647
I320
S''
sI321
S'    def to_string(self):'
p1648
sI322
S'        """'
p1649
sI323
S'        Returns the parsed template with correct indentation.'
p1650
sI314
S'        # This variable will hold a reference to every block'
p1651
sI315
S'        # that we come across in this template'
p1652
sI316
S'        self.blocks = {}'
p1653
sI317
S''
sI318
S'        # Begin parsing.'
p1654
sI319
S'        self.parse(text)'
p1655
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1656
sg84
g48
sa(dp1657
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1658
sg62
(dp1659
S'self'
p1660
S'<gluon.template.TemplateParser object>'
p1661
sS'extend'
p1662
S'"\'default/index.html\'"'
p1663
sS'self.extend'
p1664
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1665
ssg72
I765
sg73
(dp1666
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1667
sI761
S'            self.child_super_nodes.remove(node)'
p1668
sI762
S''
sI763
S'        # If we need to extend a template.'
p1669
sI764
S'        if extend:'
p1670
sI765
S'            self.extend(extend)'
p1671
sI766
S''
sI767
S'# We need this for integration with gluon'
p1672
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1673
sg84
g188
sa(dp1674
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1675
sg62
(dp1676
S'super_nodes'
p1677
S'[]'
p1678
sS'_super_nodes'
p1679
g114
ssg72
I494
sg73
(dp1680
I489
S'                           name=filename,'
p1681
sI490
S'                           context=self.context,'
p1682
sI491
S'                           path=self.path,'
p1683
sI492
S'                           writer=self.writer,'
p1684
sI493
S'                           delimiters=self.delimiters,'
p1685
sI494
S'                           _super_nodes=super_nodes)'
p1686
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1687
sI497
S'        # template.'
p1688
sI498
S'        buf = BlockNode('
p1689
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1690
sg84
g206
sa(dp1691
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1692
sg62
(dp1693
S'text'
p1694
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1695
sS'self'
p1696
S'<gluon.template.TemplateParser object>'
p1697
sS'self.parse'
p1698
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1699
ssg72
I319
sg73
(dp1700
I320
S''
sI321
S'    def to_string(self):'
p1701
sI322
S'        """'
p1702
sI323
S'        Returns the parsed template with correct indentation.'
p1703
sI314
S'        # This variable will hold a reference to every block'
p1704
sI315
S'        # that we come across in this template'
p1705
sI316
S'        self.blocks = {}'
p1706
sI317
S''
sI318
S'        # Begin parsing.'
p1707
sI319
S'        self.parse(text)'
p1708
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1709
sg84
g48
sa(dp1710
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1711
sg62
(dp1712
S'self'
p1713
S'<gluon.template.TemplateParser object>'
p1714
sS'extend'
p1715
S'"\'default/index.html\'"'
p1716
sS'self.extend'
p1717
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1718
ssg72
I765
sg73
(dp1719
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1720
sI761
S'            self.child_super_nodes.remove(node)'
p1721
sI762
S''
sI763
S'        # If we need to extend a template.'
p1722
sI764
S'        if extend:'
p1723
sI765
S'            self.extend(extend)'
p1724
sI766
S''
sI767
S'# We need this for integration with gluon'
p1725
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1726
sg84
g188
sa(dp1727
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1728
sg62
(dp1729
S'super_nodes'
p1730
S'[]'
p1731
sS'_super_nodes'
p1732
g114
ssg72
I494
sg73
(dp1733
I489
S'                           name=filename,'
p1734
sI490
S'                           context=self.context,'
p1735
sI491
S'                           path=self.path,'
p1736
sI492
S'                           writer=self.writer,'
p1737
sI493
S'                           delimiters=self.delimiters,'
p1738
sI494
S'                           _super_nodes=super_nodes)'
p1739
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1740
sI497
S'        # template.'
p1741
sI498
S'        buf = BlockNode('
p1742
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1743
sg84
g206
sa(dp1744
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1745
sg62
(dp1746
S'text'
p1747
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1748
sS'self'
p1749
S'<gluon.template.TemplateParser object>'
p1750
sS'self.parse'
p1751
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1752
ssg72
I319
sg73
(dp1753
I320
S''
sI321
S'    def to_string(self):'
p1754
sI322
S'        """'
p1755
sI323
S'        Returns the parsed template with correct indentation.'
p1756
sI314
S'        # This variable will hold a reference to every block'
p1757
sI315
S'        # that we come across in this template'
p1758
sI316
S'        self.blocks = {}'
p1759
sI317
S''
sI318
S'        # Begin parsing.'
p1760
sI319
S'        self.parse(text)'
p1761
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1762
sg84
g48
sa(dp1763
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1764
sg62
(dp1765
S'self'
p1766
S'<gluon.template.TemplateParser object>'
p1767
sS'extend'
p1768
S'"\'default/index.html\'"'
p1769
sS'self.extend'
p1770
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1771
ssg72
I765
sg73
(dp1772
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1773
sI761
S'            self.child_super_nodes.remove(node)'
p1774
sI762
S''
sI763
S'        # If we need to extend a template.'
p1775
sI764
S'        if extend:'
p1776
sI765
S'            self.extend(extend)'
p1777
sI766
S''
sI767
S'# We need this for integration with gluon'
p1778
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1779
sg84
g188
sa(dp1780
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1781
sg62
(dp1782
S'super_nodes'
p1783
S'[]'
p1784
sS'_super_nodes'
p1785
g114
ssg72
I494
sg73
(dp1786
I489
S'                           name=filename,'
p1787
sI490
S'                           context=self.context,'
p1788
sI491
S'                           path=self.path,'
p1789
sI492
S'                           writer=self.writer,'
p1790
sI493
S'                           delimiters=self.delimiters,'
p1791
sI494
S'                           _super_nodes=super_nodes)'
p1792
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1793
sI497
S'        # template.'
p1794
sI498
S'        buf = BlockNode('
p1795
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1796
sg84
g206
sa(dp1797
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1798
sg62
(dp1799
S'text'
p1800
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1801
sS'self'
p1802
S'<gluon.template.TemplateParser object>'
p1803
sS'self.parse'
p1804
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1805
ssg72
I319
sg73
(dp1806
I320
S''
sI321
S'    def to_string(self):'
p1807
sI322
S'        """'
p1808
sI323
S'        Returns the parsed template with correct indentation.'
p1809
sI314
S'        # This variable will hold a reference to every block'
p1810
sI315
S'        # that we come across in this template'
p1811
sI316
S'        self.blocks = {}'
p1812
sI317
S''
sI318
S'        # Begin parsing.'
p1813
sI319
S'        self.parse(text)'
p1814
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1815
sg84
g48
sa(dp1816
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1817
sg62
(dp1818
S'self'
p1819
S'<gluon.template.TemplateParser object>'
p1820
sS'extend'
p1821
S'"\'default/index.html\'"'
p1822
sS'self.extend'
p1823
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1824
ssg72
I765
sg73
(dp1825
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1826
sI761
S'            self.child_super_nodes.remove(node)'
p1827
sI762
S''
sI763
S'        # If we need to extend a template.'
p1828
sI764
S'        if extend:'
p1829
sI765
S'            self.extend(extend)'
p1830
sI766
S''
sI767
S'# We need this for integration with gluon'
p1831
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1832
sg84
g188
sa(dp1833
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1834
sg62
(dp1835
S'super_nodes'
p1836
S'[]'
p1837
sS'_super_nodes'
p1838
g114
ssg72
I494
sg73
(dp1839
I489
S'                           name=filename,'
p1840
sI490
S'                           context=self.context,'
p1841
sI491
S'                           path=self.path,'
p1842
sI492
S'                           writer=self.writer,'
p1843
sI493
S'                           delimiters=self.delimiters,'
p1844
sI494
S'                           _super_nodes=super_nodes)'
p1845
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1846
sI497
S'        # template.'
p1847
sI498
S'        buf = BlockNode('
p1848
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1849
sg84
g206
sa(dp1850
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1851
sg62
(dp1852
S'text'
p1853
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1854
sS'self'
p1855
S'<gluon.template.TemplateParser object>'
p1856
sS'self.parse'
p1857
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1858
ssg72
I319
sg73
(dp1859
I320
S''
sI321
S'    def to_string(self):'
p1860
sI322
S'        """'
p1861
sI323
S'        Returns the parsed template with correct indentation.'
p1862
sI314
S'        # This variable will hold a reference to every block'
p1863
sI315
S'        # that we come across in this template'
p1864
sI316
S'        self.blocks = {}'
p1865
sI317
S''
sI318
S'        # Begin parsing.'
p1866
sI319
S'        self.parse(text)'
p1867
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1868
sg84
g48
sa(dp1869
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1870
sg62
(dp1871
S'self'
p1872
S'<gluon.template.TemplateParser object>'
p1873
sS'extend'
p1874
S'"\'default/index.html\'"'
p1875
sS'self.extend'
p1876
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1877
ssg72
I765
sg73
(dp1878
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1879
sI761
S'            self.child_super_nodes.remove(node)'
p1880
sI762
S''
sI763
S'        # If we need to extend a template.'
p1881
sI764
S'        if extend:'
p1882
sI765
S'            self.extend(extend)'
p1883
sI766
S''
sI767
S'# We need this for integration with gluon'
p1884
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1885
sg84
g188
sa(dp1886
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1887
sg62
(dp1888
S'super_nodes'
p1889
S'[]'
p1890
sS'_super_nodes'
p1891
g114
ssg72
I494
sg73
(dp1892
I489
S'                           name=filename,'
p1893
sI490
S'                           context=self.context,'
p1894
sI491
S'                           path=self.path,'
p1895
sI492
S'                           writer=self.writer,'
p1896
sI493
S'                           delimiters=self.delimiters,'
p1897
sI494
S'                           _super_nodes=super_nodes)'
p1898
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1899
sI497
S'        # template.'
p1900
sI498
S'        buf = BlockNode('
p1901
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1902
sg84
g206
sa(dp1903
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1904
sg62
(dp1905
S'text'
p1906
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1907
sS'self'
p1908
S'<gluon.template.TemplateParser object>'
p1909
sS'self.parse'
p1910
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1911
ssg72
I319
sg73
(dp1912
I320
S''
sI321
S'    def to_string(self):'
p1913
sI322
S'        """'
p1914
sI323
S'        Returns the parsed template with correct indentation.'
p1915
sI314
S'        # This variable will hold a reference to every block'
p1916
sI315
S'        # that we come across in this template'
p1917
sI316
S'        self.blocks = {}'
p1918
sI317
S''
sI318
S'        # Begin parsing.'
p1919
sI319
S'        self.parse(text)'
p1920
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1921
sg84
g48
sa(dp1922
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1923
sg62
(dp1924
S'self'
p1925
S'<gluon.template.TemplateParser object>'
p1926
sS'extend'
p1927
S'"\'default/index.html\'"'
p1928
sS'self.extend'
p1929
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1930
ssg72
I765
sg73
(dp1931
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1932
sI761
S'            self.child_super_nodes.remove(node)'
p1933
sI762
S''
sI763
S'        # If we need to extend a template.'
p1934
sI764
S'        if extend:'
p1935
sI765
S'            self.extend(extend)'
p1936
sI766
S''
sI767
S'# We need this for integration with gluon'
p1937
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1938
sg84
g188
sa(dp1939
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1940
sg62
(dp1941
S'super_nodes'
p1942
S'[]'
p1943
sS'_super_nodes'
p1944
g114
ssg72
I494
sg73
(dp1945
I489
S'                           name=filename,'
p1946
sI490
S'                           context=self.context,'
p1947
sI491
S'                           path=self.path,'
p1948
sI492
S'                           writer=self.writer,'
p1949
sI493
S'                           delimiters=self.delimiters,'
p1950
sI494
S'                           _super_nodes=super_nodes)'
p1951
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p1952
sI497
S'        # template.'
p1953
sI498
S'        buf = BlockNode('
p1954
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p1955
sg84
g206
sa(dp1956
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1957
sg62
(dp1958
S'text'
p1959
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p1960
sS'self'
p1961
S'<gluon.template.TemplateParser object>'
p1962
sS'self.parse'
p1963
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1964
ssg72
I319
sg73
(dp1965
I320
S''
sI321
S'    def to_string(self):'
p1966
sI322
S'        """'
p1967
sI323
S'        Returns the parsed template with correct indentation.'
p1968
sI314
S'        # This variable will hold a reference to every block'
p1969
sI315
S'        # that we come across in this template'
p1970
sI316
S'        self.blocks = {}'
p1971
sI317
S''
sI318
S'        # Begin parsing.'
p1972
sI319
S'        self.parse(text)'
p1973
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1974
sg84
g48
sa(dp1975
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1976
sg62
(dp1977
S'self'
p1978
S'<gluon.template.TemplateParser object>'
p1979
sS'extend'
p1980
S'"\'default/index.html\'"'
p1981
sS'self.extend'
p1982
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1983
ssg72
I765
sg73
(dp1984
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1985
sI761
S'            self.child_super_nodes.remove(node)'
p1986
sI762
S''
sI763
S'        # If we need to extend a template.'
p1987
sI764
S'        if extend:'
p1988
sI765
S'            self.extend(extend)'
p1989
sI766
S''
sI767
S'# We need this for integration with gluon'
p1990
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p1991
sg84
g188
sa(dp1992
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p1993
sg62
(dp1994
S'super_nodes'
p1995
S'[]'
p1996
sS'_super_nodes'
p1997
g114
ssg72
I494
sg73
(dp1998
I489
S'                           name=filename,'
p1999
sI490
S'                           context=self.context,'
p2000
sI491
S'                           path=self.path,'
p2001
sI492
S'                           writer=self.writer,'
p2002
sI493
S'                           delimiters=self.delimiters,'
p2003
sI494
S'                           _super_nodes=super_nodes)'
p2004
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2005
sI497
S'        # template.'
p2006
sI498
S'        buf = BlockNode('
p2007
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2008
sg84
g206
sa(dp2009
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2010
sg62
(dp2011
S'text'
p2012
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2013
sS'self'
p2014
S'<gluon.template.TemplateParser object>'
p2015
sS'self.parse'
p2016
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2017
ssg72
I319
sg73
(dp2018
I320
S''
sI321
S'    def to_string(self):'
p2019
sI322
S'        """'
p2020
sI323
S'        Returns the parsed template with correct indentation.'
p2021
sI314
S'        # This variable will hold a reference to every block'
p2022
sI315
S'        # that we come across in this template'
p2023
sI316
S'        self.blocks = {}'
p2024
sI317
S''
sI318
S'        # Begin parsing.'
p2025
sI319
S'        self.parse(text)'
p2026
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2027
sg84
g48
sa(dp2028
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2029
sg62
(dp2030
S'self'
p2031
S'<gluon.template.TemplateParser object>'
p2032
sS'extend'
p2033
S'"\'default/index.html\'"'
p2034
sS'self.extend'
p2035
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2036
ssg72
I765
sg73
(dp2037
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2038
sI761
S'            self.child_super_nodes.remove(node)'
p2039
sI762
S''
sI763
S'        # If we need to extend a template.'
p2040
sI764
S'        if extend:'
p2041
sI765
S'            self.extend(extend)'
p2042
sI766
S''
sI767
S'# We need this for integration with gluon'
p2043
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2044
sg84
g188
sa(dp2045
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2046
sg62
(dp2047
S'super_nodes'
p2048
S'[]'
p2049
sS'_super_nodes'
p2050
g114
ssg72
I494
sg73
(dp2051
I489
S'                           name=filename,'
p2052
sI490
S'                           context=self.context,'
p2053
sI491
S'                           path=self.path,'
p2054
sI492
S'                           writer=self.writer,'
p2055
sI493
S'                           delimiters=self.delimiters,'
p2056
sI494
S'                           _super_nodes=super_nodes)'
p2057
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2058
sI497
S'        # template.'
p2059
sI498
S'        buf = BlockNode('
p2060
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2061
sg84
g206
sa(dp2062
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2063
sg62
(dp2064
S'text'
p2065
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2066
sS'self'
p2067
S'<gluon.template.TemplateParser object>'
p2068
sS'self.parse'
p2069
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2070
ssg72
I319
sg73
(dp2071
I320
S''
sI321
S'    def to_string(self):'
p2072
sI322
S'        """'
p2073
sI323
S'        Returns the parsed template with correct indentation.'
p2074
sI314
S'        # This variable will hold a reference to every block'
p2075
sI315
S'        # that we come across in this template'
p2076
sI316
S'        self.blocks = {}'
p2077
sI317
S''
sI318
S'        # Begin parsing.'
p2078
sI319
S'        self.parse(text)'
p2079
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2080
sg84
g48
sa(dp2081
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2082
sg62
(dp2083
S'self'
p2084
S'<gluon.template.TemplateParser object>'
p2085
sS'extend'
p2086
S'"\'default/index.html\'"'
p2087
sS'self.extend'
p2088
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2089
ssg72
I765
sg73
(dp2090
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2091
sI761
S'            self.child_super_nodes.remove(node)'
p2092
sI762
S''
sI763
S'        # If we need to extend a template.'
p2093
sI764
S'        if extend:'
p2094
sI765
S'            self.extend(extend)'
p2095
sI766
S''
sI767
S'# We need this for integration with gluon'
p2096
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2097
sg84
g188
sa(dp2098
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2099
sg62
(dp2100
S'super_nodes'
p2101
S'[]'
p2102
sS'_super_nodes'
p2103
g114
ssg72
I494
sg73
(dp2104
I489
S'                           name=filename,'
p2105
sI490
S'                           context=self.context,'
p2106
sI491
S'                           path=self.path,'
p2107
sI492
S'                           writer=self.writer,'
p2108
sI493
S'                           delimiters=self.delimiters,'
p2109
sI494
S'                           _super_nodes=super_nodes)'
p2110
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2111
sI497
S'        # template.'
p2112
sI498
S'        buf = BlockNode('
p2113
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2114
sg84
g206
sa(dp2115
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2116
sg62
(dp2117
S'text'
p2118
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2119
sS'self'
p2120
S'<gluon.template.TemplateParser object>'
p2121
sS'self.parse'
p2122
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2123
ssg72
I319
sg73
(dp2124
I320
S''
sI321
S'    def to_string(self):'
p2125
sI322
S'        """'
p2126
sI323
S'        Returns the parsed template with correct indentation.'
p2127
sI314
S'        # This variable will hold a reference to every block'
p2128
sI315
S'        # that we come across in this template'
p2129
sI316
S'        self.blocks = {}'
p2130
sI317
S''
sI318
S'        # Begin parsing.'
p2131
sI319
S'        self.parse(text)'
p2132
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2133
sg84
g48
sa(dp2134
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2135
sg62
(dp2136
S'self'
p2137
S'<gluon.template.TemplateParser object>'
p2138
sS'extend'
p2139
S'"\'default/index.html\'"'
p2140
sS'self.extend'
p2141
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2142
ssg72
I765
sg73
(dp2143
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2144
sI761
S'            self.child_super_nodes.remove(node)'
p2145
sI762
S''
sI763
S'        # If we need to extend a template.'
p2146
sI764
S'        if extend:'
p2147
sI765
S'            self.extend(extend)'
p2148
sI766
S''
sI767
S'# We need this for integration with gluon'
p2149
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2150
sg84
g188
sa(dp2151
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2152
sg62
(dp2153
S'super_nodes'
p2154
S'[]'
p2155
sS'_super_nodes'
p2156
g114
ssg72
I494
sg73
(dp2157
I489
S'                           name=filename,'
p2158
sI490
S'                           context=self.context,'
p2159
sI491
S'                           path=self.path,'
p2160
sI492
S'                           writer=self.writer,'
p2161
sI493
S'                           delimiters=self.delimiters,'
p2162
sI494
S'                           _super_nodes=super_nodes)'
p2163
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2164
sI497
S'        # template.'
p2165
sI498
S'        buf = BlockNode('
p2166
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2167
sg84
g206
sa(dp2168
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2169
sg62
(dp2170
S'text'
p2171
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2172
sS'self'
p2173
S'<gluon.template.TemplateParser object>'
p2174
sS'self.parse'
p2175
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2176
ssg72
I319
sg73
(dp2177
I320
S''
sI321
S'    def to_string(self):'
p2178
sI322
S'        """'
p2179
sI323
S'        Returns the parsed template with correct indentation.'
p2180
sI314
S'        # This variable will hold a reference to every block'
p2181
sI315
S'        # that we come across in this template'
p2182
sI316
S'        self.blocks = {}'
p2183
sI317
S''
sI318
S'        # Begin parsing.'
p2184
sI319
S'        self.parse(text)'
p2185
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2186
sg84
g48
sa(dp2187
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2188
sg62
(dp2189
S'self'
p2190
S'<gluon.template.TemplateParser object>'
p2191
sS'extend'
p2192
S'"\'default/index.html\'"'
p2193
sS'self.extend'
p2194
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2195
ssg72
I765
sg73
(dp2196
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2197
sI761
S'            self.child_super_nodes.remove(node)'
p2198
sI762
S''
sI763
S'        # If we need to extend a template.'
p2199
sI764
S'        if extend:'
p2200
sI765
S'            self.extend(extend)'
p2201
sI766
S''
sI767
S'# We need this for integration with gluon'
p2202
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2203
sg84
g188
sa(dp2204
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2205
sg62
(dp2206
S'super_nodes'
p2207
S'[]'
p2208
sS'_super_nodes'
p2209
g114
ssg72
I494
sg73
(dp2210
I489
S'                           name=filename,'
p2211
sI490
S'                           context=self.context,'
p2212
sI491
S'                           path=self.path,'
p2213
sI492
S'                           writer=self.writer,'
p2214
sI493
S'                           delimiters=self.delimiters,'
p2215
sI494
S'                           _super_nodes=super_nodes)'
p2216
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2217
sI497
S'        # template.'
p2218
sI498
S'        buf = BlockNode('
p2219
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2220
sg84
g206
sa(dp2221
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2222
sg62
(dp2223
S'text'
p2224
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2225
sS'self'
p2226
S'<gluon.template.TemplateParser object>'
p2227
sS'self.parse'
p2228
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2229
ssg72
I319
sg73
(dp2230
I320
S''
sI321
S'    def to_string(self):'
p2231
sI322
S'        """'
p2232
sI323
S'        Returns the parsed template with correct indentation.'
p2233
sI314
S'        # This variable will hold a reference to every block'
p2234
sI315
S'        # that we come across in this template'
p2235
sI316
S'        self.blocks = {}'
p2236
sI317
S''
sI318
S'        # Begin parsing.'
p2237
sI319
S'        self.parse(text)'
p2238
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2239
sg84
g48
sa(dp2240
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2241
sg62
(dp2242
S'self'
p2243
S'<gluon.template.TemplateParser object>'
p2244
sS'extend'
p2245
S'"\'default/index.html\'"'
p2246
sS'self.extend'
p2247
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2248
ssg72
I765
sg73
(dp2249
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2250
sI761
S'            self.child_super_nodes.remove(node)'
p2251
sI762
S''
sI763
S'        # If we need to extend a template.'
p2252
sI764
S'        if extend:'
p2253
sI765
S'            self.extend(extend)'
p2254
sI766
S''
sI767
S'# We need this for integration with gluon'
p2255
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2256
sg84
g188
sa(dp2257
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2258
sg62
(dp2259
S'super_nodes'
p2260
S'[]'
p2261
sS'_super_nodes'
p2262
g114
ssg72
I494
sg73
(dp2263
I489
S'                           name=filename,'
p2264
sI490
S'                           context=self.context,'
p2265
sI491
S'                           path=self.path,'
p2266
sI492
S'                           writer=self.writer,'
p2267
sI493
S'                           delimiters=self.delimiters,'
p2268
sI494
S'                           _super_nodes=super_nodes)'
p2269
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2270
sI497
S'        # template.'
p2271
sI498
S'        buf = BlockNode('
p2272
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2273
sg84
g206
sa(dp2274
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2275
sg62
(dp2276
S'text'
p2277
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2278
sS'self'
p2279
S'<gluon.template.TemplateParser object>'
p2280
sS'self.parse'
p2281
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2282
ssg72
I319
sg73
(dp2283
I320
S''
sI321
S'    def to_string(self):'
p2284
sI322
S'        """'
p2285
sI323
S'        Returns the parsed template with correct indentation.'
p2286
sI314
S'        # This variable will hold a reference to every block'
p2287
sI315
S'        # that we come across in this template'
p2288
sI316
S'        self.blocks = {}'
p2289
sI317
S''
sI318
S'        # Begin parsing.'
p2290
sI319
S'        self.parse(text)'
p2291
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2292
sg84
g48
sa(dp2293
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2294
sg62
(dp2295
S'self'
p2296
S'<gluon.template.TemplateParser object>'
p2297
sS'extend'
p2298
S'"\'default/index.html\'"'
p2299
sS'self.extend'
p2300
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2301
ssg72
I765
sg73
(dp2302
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2303
sI761
S'            self.child_super_nodes.remove(node)'
p2304
sI762
S''
sI763
S'        # If we need to extend a template.'
p2305
sI764
S'        if extend:'
p2306
sI765
S'            self.extend(extend)'
p2307
sI766
S''
sI767
S'# We need this for integration with gluon'
p2308
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2309
sg84
g188
sa(dp2310
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2311
sg62
(dp2312
S'super_nodes'
p2313
S'[]'
p2314
sS'_super_nodes'
p2315
g114
ssg72
I494
sg73
(dp2316
I489
S'                           name=filename,'
p2317
sI490
S'                           context=self.context,'
p2318
sI491
S'                           path=self.path,'
p2319
sI492
S'                           writer=self.writer,'
p2320
sI493
S'                           delimiters=self.delimiters,'
p2321
sI494
S'                           _super_nodes=super_nodes)'
p2322
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2323
sI497
S'        # template.'
p2324
sI498
S'        buf = BlockNode('
p2325
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2326
sg84
g206
sa(dp2327
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2328
sg62
(dp2329
S'text'
p2330
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2331
sS'self'
p2332
S'<gluon.template.TemplateParser object>'
p2333
sS'self.parse'
p2334
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2335
ssg72
I319
sg73
(dp2336
I320
S''
sI321
S'    def to_string(self):'
p2337
sI322
S'        """'
p2338
sI323
S'        Returns the parsed template with correct indentation.'
p2339
sI314
S'        # This variable will hold a reference to every block'
p2340
sI315
S'        # that we come across in this template'
p2341
sI316
S'        self.blocks = {}'
p2342
sI317
S''
sI318
S'        # Begin parsing.'
p2343
sI319
S'        self.parse(text)'
p2344
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2345
sg84
g48
sa(dp2346
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2347
sg62
(dp2348
S'self'
p2349
S'<gluon.template.TemplateParser object>'
p2350
sS'extend'
p2351
S'"\'default/index.html\'"'
p2352
sS'self.extend'
p2353
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2354
ssg72
I765
sg73
(dp2355
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2356
sI761
S'            self.child_super_nodes.remove(node)'
p2357
sI762
S''
sI763
S'        # If we need to extend a template.'
p2358
sI764
S'        if extend:'
p2359
sI765
S'            self.extend(extend)'
p2360
sI766
S''
sI767
S'# We need this for integration with gluon'
p2361
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2362
sg84
g188
sa(dp2363
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2364
sg62
(dp2365
S'super_nodes'
p2366
S'[]'
p2367
sS'_super_nodes'
p2368
g114
ssg72
I494
sg73
(dp2369
I489
S'                           name=filename,'
p2370
sI490
S'                           context=self.context,'
p2371
sI491
S'                           path=self.path,'
p2372
sI492
S'                           writer=self.writer,'
p2373
sI493
S'                           delimiters=self.delimiters,'
p2374
sI494
S'                           _super_nodes=super_nodes)'
p2375
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2376
sI497
S'        # template.'
p2377
sI498
S'        buf = BlockNode('
p2378
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2379
sg84
g206
sa(dp2380
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2381
sg62
(dp2382
S'text'
p2383
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2384
sS'self'
p2385
S'<gluon.template.TemplateParser object>'
p2386
sS'self.parse'
p2387
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2388
ssg72
I319
sg73
(dp2389
I320
S''
sI321
S'    def to_string(self):'
p2390
sI322
S'        """'
p2391
sI323
S'        Returns the parsed template with correct indentation.'
p2392
sI314
S'        # This variable will hold a reference to every block'
p2393
sI315
S'        # that we come across in this template'
p2394
sI316
S'        self.blocks = {}'
p2395
sI317
S''
sI318
S'        # Begin parsing.'
p2396
sI319
S'        self.parse(text)'
p2397
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2398
sg84
g48
sa(dp2399
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2400
sg62
(dp2401
S'self'
p2402
S'<gluon.template.TemplateParser object>'
p2403
sS'extend'
p2404
S'"\'default/index.html\'"'
p2405
sS'self.extend'
p2406
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2407
ssg72
I765
sg73
(dp2408
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2409
sI761
S'            self.child_super_nodes.remove(node)'
p2410
sI762
S''
sI763
S'        # If we need to extend a template.'
p2411
sI764
S'        if extend:'
p2412
sI765
S'            self.extend(extend)'
p2413
sI766
S''
sI767
S'# We need this for integration with gluon'
p2414
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2415
sg84
g188
sa(dp2416
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2417
sg62
(dp2418
S'super_nodes'
p2419
S'[]'
p2420
sS'_super_nodes'
p2421
g114
ssg72
I494
sg73
(dp2422
I489
S'                           name=filename,'
p2423
sI490
S'                           context=self.context,'
p2424
sI491
S'                           path=self.path,'
p2425
sI492
S'                           writer=self.writer,'
p2426
sI493
S'                           delimiters=self.delimiters,'
p2427
sI494
S'                           _super_nodes=super_nodes)'
p2428
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2429
sI497
S'        # template.'
p2430
sI498
S'        buf = BlockNode('
p2431
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2432
sg84
g206
sa(dp2433
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2434
sg62
(dp2435
S'text'
p2436
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2437
sS'self'
p2438
S'<gluon.template.TemplateParser object>'
p2439
sS'self.parse'
p2440
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2441
ssg72
I319
sg73
(dp2442
I320
S''
sI321
S'    def to_string(self):'
p2443
sI322
S'        """'
p2444
sI323
S'        Returns the parsed template with correct indentation.'
p2445
sI314
S'        # This variable will hold a reference to every block'
p2446
sI315
S'        # that we come across in this template'
p2447
sI316
S'        self.blocks = {}'
p2448
sI317
S''
sI318
S'        # Begin parsing.'
p2449
sI319
S'        self.parse(text)'
p2450
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2451
sg84
g48
sa(dp2452
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2453
sg62
(dp2454
S'self'
p2455
S'<gluon.template.TemplateParser object>'
p2456
sS'extend'
p2457
S'"\'default/index.html\'"'
p2458
sS'self.extend'
p2459
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2460
ssg72
I765
sg73
(dp2461
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2462
sI761
S'            self.child_super_nodes.remove(node)'
p2463
sI762
S''
sI763
S'        # If we need to extend a template.'
p2464
sI764
S'        if extend:'
p2465
sI765
S'            self.extend(extend)'
p2466
sI766
S''
sI767
S'# We need this for integration with gluon'
p2467
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2468
sg84
g188
sa(dp2469
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2470
sg62
(dp2471
S'super_nodes'
p2472
S'[]'
p2473
sS'_super_nodes'
p2474
g114
ssg72
I494
sg73
(dp2475
I489
S'                           name=filename,'
p2476
sI490
S'                           context=self.context,'
p2477
sI491
S'                           path=self.path,'
p2478
sI492
S'                           writer=self.writer,'
p2479
sI493
S'                           delimiters=self.delimiters,'
p2480
sI494
S'                           _super_nodes=super_nodes)'
p2481
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2482
sI497
S'        # template.'
p2483
sI498
S'        buf = BlockNode('
p2484
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2485
sg84
g206
sa(dp2486
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2487
sg62
(dp2488
S'text'
p2489
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2490
sS'self'
p2491
S'<gluon.template.TemplateParser object>'
p2492
sS'self.parse'
p2493
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2494
ssg72
I319
sg73
(dp2495
I320
S''
sI321
S'    def to_string(self):'
p2496
sI322
S'        """'
p2497
sI323
S'        Returns the parsed template with correct indentation.'
p2498
sI314
S'        # This variable will hold a reference to every block'
p2499
sI315
S'        # that we come across in this template'
p2500
sI316
S'        self.blocks = {}'
p2501
sI317
S''
sI318
S'        # Begin parsing.'
p2502
sI319
S'        self.parse(text)'
p2503
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2504
sg84
g48
sa(dp2505
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2506
sg62
(dp2507
S'self'
p2508
S'<gluon.template.TemplateParser object>'
p2509
sS'extend'
p2510
S'"\'default/index.html\'"'
p2511
sS'self.extend'
p2512
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2513
ssg72
I765
sg73
(dp2514
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2515
sI761
S'            self.child_super_nodes.remove(node)'
p2516
sI762
S''
sI763
S'        # If we need to extend a template.'
p2517
sI764
S'        if extend:'
p2518
sI765
S'            self.extend(extend)'
p2519
sI766
S''
sI767
S'# We need this for integration with gluon'
p2520
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2521
sg84
g188
sa(dp2522
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2523
sg62
(dp2524
S'super_nodes'
p2525
S'[]'
p2526
sS'_super_nodes'
p2527
g114
ssg72
I494
sg73
(dp2528
I489
S'                           name=filename,'
p2529
sI490
S'                           context=self.context,'
p2530
sI491
S'                           path=self.path,'
p2531
sI492
S'                           writer=self.writer,'
p2532
sI493
S'                           delimiters=self.delimiters,'
p2533
sI494
S'                           _super_nodes=super_nodes)'
p2534
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2535
sI497
S'        # template.'
p2536
sI498
S'        buf = BlockNode('
p2537
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2538
sg84
g206
sa(dp2539
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2540
sg62
(dp2541
S'text'
p2542
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2543
sS'self'
p2544
S'<gluon.template.TemplateParser object>'
p2545
sS'self.parse'
p2546
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2547
ssg72
I319
sg73
(dp2548
I320
S''
sI321
S'    def to_string(self):'
p2549
sI322
S'        """'
p2550
sI323
S'        Returns the parsed template with correct indentation.'
p2551
sI314
S'        # This variable will hold a reference to every block'
p2552
sI315
S'        # that we come across in this template'
p2553
sI316
S'        self.blocks = {}'
p2554
sI317
S''
sI318
S'        # Begin parsing.'
p2555
sI319
S'        self.parse(text)'
p2556
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2557
sg84
g48
sa(dp2558
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2559
sg62
(dp2560
S'self'
p2561
S'<gluon.template.TemplateParser object>'
p2562
sS'extend'
p2563
S'"\'default/index.html\'"'
p2564
sS'self.extend'
p2565
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2566
ssg72
I765
sg73
(dp2567
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2568
sI761
S'            self.child_super_nodes.remove(node)'
p2569
sI762
S''
sI763
S'        # If we need to extend a template.'
p2570
sI764
S'        if extend:'
p2571
sI765
S'            self.extend(extend)'
p2572
sI766
S''
sI767
S'# We need this for integration with gluon'
p2573
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2574
sg84
g188
sa(dp2575
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2576
sg62
(dp2577
S'super_nodes'
p2578
S'[]'
p2579
sS'_super_nodes'
p2580
g114
ssg72
I494
sg73
(dp2581
I489
S'                           name=filename,'
p2582
sI490
S'                           context=self.context,'
p2583
sI491
S'                           path=self.path,'
p2584
sI492
S'                           writer=self.writer,'
p2585
sI493
S'                           delimiters=self.delimiters,'
p2586
sI494
S'                           _super_nodes=super_nodes)'
p2587
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2588
sI497
S'        # template.'
p2589
sI498
S'        buf = BlockNode('
p2590
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2591
sg84
g206
sa(dp2592
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2593
sg62
(dp2594
S'text'
p2595
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2596
sS'self'
p2597
S'<gluon.template.TemplateParser object>'
p2598
sS'self.parse'
p2599
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2600
ssg72
I319
sg73
(dp2601
I320
S''
sI321
S'    def to_string(self):'
p2602
sI322
S'        """'
p2603
sI323
S'        Returns the parsed template with correct indentation.'
p2604
sI314
S'        # This variable will hold a reference to every block'
p2605
sI315
S'        # that we come across in this template'
p2606
sI316
S'        self.blocks = {}'
p2607
sI317
S''
sI318
S'        # Begin parsing.'
p2608
sI319
S'        self.parse(text)'
p2609
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2610
sg84
g48
sa(dp2611
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2612
sg62
(dp2613
S'self'
p2614
S'<gluon.template.TemplateParser object>'
p2615
sS'extend'
p2616
S'"\'default/index.html\'"'
p2617
sS'self.extend'
p2618
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2619
ssg72
I765
sg73
(dp2620
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2621
sI761
S'            self.child_super_nodes.remove(node)'
p2622
sI762
S''
sI763
S'        # If we need to extend a template.'
p2623
sI764
S'        if extend:'
p2624
sI765
S'            self.extend(extend)'
p2625
sI766
S''
sI767
S'# We need this for integration with gluon'
p2626
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2627
sg84
g188
sa(dp2628
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2629
sg62
(dp2630
S'super_nodes'
p2631
S'[]'
p2632
sS'_super_nodes'
p2633
g114
ssg72
I494
sg73
(dp2634
I489
S'                           name=filename,'
p2635
sI490
S'                           context=self.context,'
p2636
sI491
S'                           path=self.path,'
p2637
sI492
S'                           writer=self.writer,'
p2638
sI493
S'                           delimiters=self.delimiters,'
p2639
sI494
S'                           _super_nodes=super_nodes)'
p2640
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2641
sI497
S'        # template.'
p2642
sI498
S'        buf = BlockNode('
p2643
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2644
sg84
g206
sa(dp2645
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2646
sg62
(dp2647
S'text'
p2648
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2649
sS'self'
p2650
S'<gluon.template.TemplateParser object>'
p2651
sS'self.parse'
p2652
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2653
ssg72
I319
sg73
(dp2654
I320
S''
sI321
S'    def to_string(self):'
p2655
sI322
S'        """'
p2656
sI323
S'        Returns the parsed template with correct indentation.'
p2657
sI314
S'        # This variable will hold a reference to every block'
p2658
sI315
S'        # that we come across in this template'
p2659
sI316
S'        self.blocks = {}'
p2660
sI317
S''
sI318
S'        # Begin parsing.'
p2661
sI319
S'        self.parse(text)'
p2662
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2663
sg84
g48
sa(dp2664
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2665
sg62
(dp2666
S'self'
p2667
S'<gluon.template.TemplateParser object>'
p2668
sS'extend'
p2669
S'"\'default/index.html\'"'
p2670
sS'self.extend'
p2671
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2672
ssg72
I765
sg73
(dp2673
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2674
sI761
S'            self.child_super_nodes.remove(node)'
p2675
sI762
S''
sI763
S'        # If we need to extend a template.'
p2676
sI764
S'        if extend:'
p2677
sI765
S'            self.extend(extend)'
p2678
sI766
S''
sI767
S'# We need this for integration with gluon'
p2679
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2680
sg84
g188
sa(dp2681
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2682
sg62
(dp2683
S'super_nodes'
p2684
S'[]'
p2685
sS'_super_nodes'
p2686
g114
ssg72
I494
sg73
(dp2687
I489
S'                           name=filename,'
p2688
sI490
S'                           context=self.context,'
p2689
sI491
S'                           path=self.path,'
p2690
sI492
S'                           writer=self.writer,'
p2691
sI493
S'                           delimiters=self.delimiters,'
p2692
sI494
S'                           _super_nodes=super_nodes)'
p2693
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2694
sI497
S'        # template.'
p2695
sI498
S'        buf = BlockNode('
p2696
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2697
sg84
g206
sa(dp2698
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2699
sg62
(dp2700
S'text'
p2701
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2702
sS'self'
p2703
S'<gluon.template.TemplateParser object>'
p2704
sS'self.parse'
p2705
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2706
ssg72
I319
sg73
(dp2707
I320
S''
sI321
S'    def to_string(self):'
p2708
sI322
S'        """'
p2709
sI323
S'        Returns the parsed template with correct indentation.'
p2710
sI314
S'        # This variable will hold a reference to every block'
p2711
sI315
S'        # that we come across in this template'
p2712
sI316
S'        self.blocks = {}'
p2713
sI317
S''
sI318
S'        # Begin parsing.'
p2714
sI319
S'        self.parse(text)'
p2715
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2716
sg84
g48
sa(dp2717
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2718
sg62
(dp2719
S'self'
p2720
S'<gluon.template.TemplateParser object>'
p2721
sS'extend'
p2722
S'"\'default/index.html\'"'
p2723
sS'self.extend'
p2724
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2725
ssg72
I765
sg73
(dp2726
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2727
sI761
S'            self.child_super_nodes.remove(node)'
p2728
sI762
S''
sI763
S'        # If we need to extend a template.'
p2729
sI764
S'        if extend:'
p2730
sI765
S'            self.extend(extend)'
p2731
sI766
S''
sI767
S'# We need this for integration with gluon'
p2732
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2733
sg84
g188
sa(dp2734
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2735
sg62
(dp2736
S'super_nodes'
p2737
S'[]'
p2738
sS'_super_nodes'
p2739
g114
ssg72
I494
sg73
(dp2740
I489
S'                           name=filename,'
p2741
sI490
S'                           context=self.context,'
p2742
sI491
S'                           path=self.path,'
p2743
sI492
S'                           writer=self.writer,'
p2744
sI493
S'                           delimiters=self.delimiters,'
p2745
sI494
S'                           _super_nodes=super_nodes)'
p2746
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2747
sI497
S'        # template.'
p2748
sI498
S'        buf = BlockNode('
p2749
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2750
sg84
g206
sa(dp2751
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2752
sg62
(dp2753
S'text'
p2754
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2755
sS'self'
p2756
S'<gluon.template.TemplateParser object>'
p2757
sS'self.parse'
p2758
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2759
ssg72
I319
sg73
(dp2760
I320
S''
sI321
S'    def to_string(self):'
p2761
sI322
S'        """'
p2762
sI323
S'        Returns the parsed template with correct indentation.'
p2763
sI314
S'        # This variable will hold a reference to every block'
p2764
sI315
S'        # that we come across in this template'
p2765
sI316
S'        self.blocks = {}'
p2766
sI317
S''
sI318
S'        # Begin parsing.'
p2767
sI319
S'        self.parse(text)'
p2768
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2769
sg84
g48
sa(dp2770
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2771
sg62
(dp2772
S'self'
p2773
S'<gluon.template.TemplateParser object>'
p2774
sS'extend'
p2775
S'"\'default/index.html\'"'
p2776
sS'self.extend'
p2777
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2778
ssg72
I765
sg73
(dp2779
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2780
sI761
S'            self.child_super_nodes.remove(node)'
p2781
sI762
S''
sI763
S'        # If we need to extend a template.'
p2782
sI764
S'        if extend:'
p2783
sI765
S'            self.extend(extend)'
p2784
sI766
S''
sI767
S'# We need this for integration with gluon'
p2785
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2786
sg84
g188
sa(dp2787
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2788
sg62
(dp2789
S'super_nodes'
p2790
S'[]'
p2791
sS'_super_nodes'
p2792
g114
ssg72
I494
sg73
(dp2793
I489
S'                           name=filename,'
p2794
sI490
S'                           context=self.context,'
p2795
sI491
S'                           path=self.path,'
p2796
sI492
S'                           writer=self.writer,'
p2797
sI493
S'                           delimiters=self.delimiters,'
p2798
sI494
S'                           _super_nodes=super_nodes)'
p2799
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2800
sI497
S'        # template.'
p2801
sI498
S'        buf = BlockNode('
p2802
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2803
sg84
g206
sa(dp2804
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2805
sg62
(dp2806
S'text'
p2807
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2808
sS'self'
p2809
S'<gluon.template.TemplateParser object>'
p2810
sS'self.parse'
p2811
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2812
ssg72
I319
sg73
(dp2813
I320
S''
sI321
S'    def to_string(self):'
p2814
sI322
S'        """'
p2815
sI323
S'        Returns the parsed template with correct indentation.'
p2816
sI314
S'        # This variable will hold a reference to every block'
p2817
sI315
S'        # that we come across in this template'
p2818
sI316
S'        self.blocks = {}'
p2819
sI317
S''
sI318
S'        # Begin parsing.'
p2820
sI319
S'        self.parse(text)'
p2821
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2822
sg84
g48
sa(dp2823
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2824
sg62
(dp2825
S'self'
p2826
S'<gluon.template.TemplateParser object>'
p2827
sS'extend'
p2828
S'"\'default/index.html\'"'
p2829
sS'self.extend'
p2830
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2831
ssg72
I765
sg73
(dp2832
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2833
sI761
S'            self.child_super_nodes.remove(node)'
p2834
sI762
S''
sI763
S'        # If we need to extend a template.'
p2835
sI764
S'        if extend:'
p2836
sI765
S'            self.extend(extend)'
p2837
sI766
S''
sI767
S'# We need this for integration with gluon'
p2838
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2839
sg84
g188
sa(dp2840
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2841
sg62
(dp2842
S'super_nodes'
p2843
S'[]'
p2844
sS'_super_nodes'
p2845
g114
ssg72
I494
sg73
(dp2846
I489
S'                           name=filename,'
p2847
sI490
S'                           context=self.context,'
p2848
sI491
S'                           path=self.path,'
p2849
sI492
S'                           writer=self.writer,'
p2850
sI493
S'                           delimiters=self.delimiters,'
p2851
sI494
S'                           _super_nodes=super_nodes)'
p2852
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2853
sI497
S'        # template.'
p2854
sI498
S'        buf = BlockNode('
p2855
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2856
sg84
g206
sa(dp2857
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2858
sg62
(dp2859
S'text'
p2860
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2861
sS'self'
p2862
S'<gluon.template.TemplateParser object>'
p2863
sS'self.parse'
p2864
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2865
ssg72
I319
sg73
(dp2866
I320
S''
sI321
S'    def to_string(self):'
p2867
sI322
S'        """'
p2868
sI323
S'        Returns the parsed template with correct indentation.'
p2869
sI314
S'        # This variable will hold a reference to every block'
p2870
sI315
S'        # that we come across in this template'
p2871
sI316
S'        self.blocks = {}'
p2872
sI317
S''
sI318
S'        # Begin parsing.'
p2873
sI319
S'        self.parse(text)'
p2874
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2875
sg84
g48
sa(dp2876
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2877
sg62
(dp2878
S'self'
p2879
S'<gluon.template.TemplateParser object>'
p2880
sS'extend'
p2881
S'"\'default/index.html\'"'
p2882
sS'self.extend'
p2883
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2884
ssg72
I765
sg73
(dp2885
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2886
sI761
S'            self.child_super_nodes.remove(node)'
p2887
sI762
S''
sI763
S'        # If we need to extend a template.'
p2888
sI764
S'        if extend:'
p2889
sI765
S'            self.extend(extend)'
p2890
sI766
S''
sI767
S'# We need this for integration with gluon'
p2891
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2892
sg84
g188
sa(dp2893
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2894
sg62
(dp2895
S'super_nodes'
p2896
S'[]'
p2897
sS'_super_nodes'
p2898
g114
ssg72
I494
sg73
(dp2899
I489
S'                           name=filename,'
p2900
sI490
S'                           context=self.context,'
p2901
sI491
S'                           path=self.path,'
p2902
sI492
S'                           writer=self.writer,'
p2903
sI493
S'                           delimiters=self.delimiters,'
p2904
sI494
S'                           _super_nodes=super_nodes)'
p2905
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2906
sI497
S'        # template.'
p2907
sI498
S'        buf = BlockNode('
p2908
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2909
sg84
g206
sa(dp2910
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2911
sg62
(dp2912
S'text'
p2913
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2914
sS'self'
p2915
S'<gluon.template.TemplateParser object>'
p2916
sS'self.parse'
p2917
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2918
ssg72
I319
sg73
(dp2919
I320
S''
sI321
S'    def to_string(self):'
p2920
sI322
S'        """'
p2921
sI323
S'        Returns the parsed template with correct indentation.'
p2922
sI314
S'        # This variable will hold a reference to every block'
p2923
sI315
S'        # that we come across in this template'
p2924
sI316
S'        self.blocks = {}'
p2925
sI317
S''
sI318
S'        # Begin parsing.'
p2926
sI319
S'        self.parse(text)'
p2927
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2928
sg84
g48
sa(dp2929
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2930
sg62
(dp2931
S'self'
p2932
S'<gluon.template.TemplateParser object>'
p2933
sS'extend'
p2934
S'"\'default/index.html\'"'
p2935
sS'self.extend'
p2936
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2937
ssg72
I765
sg73
(dp2938
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2939
sI761
S'            self.child_super_nodes.remove(node)'
p2940
sI762
S''
sI763
S'        # If we need to extend a template.'
p2941
sI764
S'        if extend:'
p2942
sI765
S'            self.extend(extend)'
p2943
sI766
S''
sI767
S'# We need this for integration with gluon'
p2944
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2945
sg84
g188
sa(dp2946
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2947
sg62
(dp2948
S'super_nodes'
p2949
S'[]'
p2950
sS'_super_nodes'
p2951
g114
ssg72
I494
sg73
(dp2952
I489
S'                           name=filename,'
p2953
sI490
S'                           context=self.context,'
p2954
sI491
S'                           path=self.path,'
p2955
sI492
S'                           writer=self.writer,'
p2956
sI493
S'                           delimiters=self.delimiters,'
p2957
sI494
S'                           _super_nodes=super_nodes)'
p2958
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p2959
sI497
S'        # template.'
p2960
sI498
S'        buf = BlockNode('
p2961
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p2962
sg84
g206
sa(dp2963
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2964
sg62
(dp2965
S'text'
p2966
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p2967
sS'self'
p2968
S'<gluon.template.TemplateParser object>'
p2969
sS'self.parse'
p2970
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2971
ssg72
I319
sg73
(dp2972
I320
S''
sI321
S'    def to_string(self):'
p2973
sI322
S'        """'
p2974
sI323
S'        Returns the parsed template with correct indentation.'
p2975
sI314
S'        # This variable will hold a reference to every block'
p2976
sI315
S'        # that we come across in this template'
p2977
sI316
S'        self.blocks = {}'
p2978
sI317
S''
sI318
S'        # Begin parsing.'
p2979
sI319
S'        self.parse(text)'
p2980
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2981
sg84
g48
sa(dp2982
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p2983
sg62
(dp2984
S'self'
p2985
S'<gluon.template.TemplateParser object>'
p2986
sS'extend'
p2987
S'"\'default/index.html\'"'
p2988
sS'self.extend'
p2989
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2990
ssg72
I765
sg73
(dp2991
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2992
sI761
S'            self.child_super_nodes.remove(node)'
p2993
sI762
S''
sI763
S'        # If we need to extend a template.'
p2994
sI764
S'        if extend:'
p2995
sI765
S'            self.extend(extend)'
p2996
sI766
S''
sI767
S'# We need this for integration with gluon'
p2997
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p2998
sg84
g188
sa(dp2999
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3000
sg62
(dp3001
S'super_nodes'
p3002
S'[]'
p3003
sS'_super_nodes'
p3004
g114
ssg72
I494
sg73
(dp3005
I489
S'                           name=filename,'
p3006
sI490
S'                           context=self.context,'
p3007
sI491
S'                           path=self.path,'
p3008
sI492
S'                           writer=self.writer,'
p3009
sI493
S'                           delimiters=self.delimiters,'
p3010
sI494
S'                           _super_nodes=super_nodes)'
p3011
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3012
sI497
S'        # template.'
p3013
sI498
S'        buf = BlockNode('
p3014
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3015
sg84
g206
sa(dp3016
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3017
sg62
(dp3018
S'text'
p3019
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3020
sS'self'
p3021
S'<gluon.template.TemplateParser object>'
p3022
sS'self.parse'
p3023
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3024
ssg72
I319
sg73
(dp3025
I320
S''
sI321
S'    def to_string(self):'
p3026
sI322
S'        """'
p3027
sI323
S'        Returns the parsed template with correct indentation.'
p3028
sI314
S'        # This variable will hold a reference to every block'
p3029
sI315
S'        # that we come across in this template'
p3030
sI316
S'        self.blocks = {}'
p3031
sI317
S''
sI318
S'        # Begin parsing.'
p3032
sI319
S'        self.parse(text)'
p3033
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3034
sg84
g48
sa(dp3035
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3036
sg62
(dp3037
S'self'
p3038
S'<gluon.template.TemplateParser object>'
p3039
sS'extend'
p3040
S'"\'default/index.html\'"'
p3041
sS'self.extend'
p3042
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3043
ssg72
I765
sg73
(dp3044
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3045
sI761
S'            self.child_super_nodes.remove(node)'
p3046
sI762
S''
sI763
S'        # If we need to extend a template.'
p3047
sI764
S'        if extend:'
p3048
sI765
S'            self.extend(extend)'
p3049
sI766
S''
sI767
S'# We need this for integration with gluon'
p3050
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3051
sg84
g188
sa(dp3052
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3053
sg62
(dp3054
S'super_nodes'
p3055
S'[]'
p3056
sS'_super_nodes'
p3057
g114
ssg72
I494
sg73
(dp3058
I489
S'                           name=filename,'
p3059
sI490
S'                           context=self.context,'
p3060
sI491
S'                           path=self.path,'
p3061
sI492
S'                           writer=self.writer,'
p3062
sI493
S'                           delimiters=self.delimiters,'
p3063
sI494
S'                           _super_nodes=super_nodes)'
p3064
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3065
sI497
S'        # template.'
p3066
sI498
S'        buf = BlockNode('
p3067
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3068
sg84
g206
sa(dp3069
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3070
sg62
(dp3071
S'text'
p3072
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3073
sS'self'
p3074
S'<gluon.template.TemplateParser object>'
p3075
sS'self.parse'
p3076
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3077
ssg72
I319
sg73
(dp3078
I320
S''
sI321
S'    def to_string(self):'
p3079
sI322
S'        """'
p3080
sI323
S'        Returns the parsed template with correct indentation.'
p3081
sI314
S'        # This variable will hold a reference to every block'
p3082
sI315
S'        # that we come across in this template'
p3083
sI316
S'        self.blocks = {}'
p3084
sI317
S''
sI318
S'        # Begin parsing.'
p3085
sI319
S'        self.parse(text)'
p3086
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3087
sg84
g48
sa(dp3088
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3089
sg62
(dp3090
S'self'
p3091
S'<gluon.template.TemplateParser object>'
p3092
sS'extend'
p3093
S'"\'default/index.html\'"'
p3094
sS'self.extend'
p3095
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3096
ssg72
I765
sg73
(dp3097
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3098
sI761
S'            self.child_super_nodes.remove(node)'
p3099
sI762
S''
sI763
S'        # If we need to extend a template.'
p3100
sI764
S'        if extend:'
p3101
sI765
S'            self.extend(extend)'
p3102
sI766
S''
sI767
S'# We need this for integration with gluon'
p3103
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3104
sg84
g188
sa(dp3105
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3106
sg62
(dp3107
S'super_nodes'
p3108
S'[]'
p3109
sS'_super_nodes'
p3110
g114
ssg72
I494
sg73
(dp3111
I489
S'                           name=filename,'
p3112
sI490
S'                           context=self.context,'
p3113
sI491
S'                           path=self.path,'
p3114
sI492
S'                           writer=self.writer,'
p3115
sI493
S'                           delimiters=self.delimiters,'
p3116
sI494
S'                           _super_nodes=super_nodes)'
p3117
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3118
sI497
S'        # template.'
p3119
sI498
S'        buf = BlockNode('
p3120
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3121
sg84
g206
sa(dp3122
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3123
sg62
(dp3124
S'text'
p3125
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3126
sS'self'
p3127
S'<gluon.template.TemplateParser object>'
p3128
sS'self.parse'
p3129
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3130
ssg72
I319
sg73
(dp3131
I320
S''
sI321
S'    def to_string(self):'
p3132
sI322
S'        """'
p3133
sI323
S'        Returns the parsed template with correct indentation.'
p3134
sI314
S'        # This variable will hold a reference to every block'
p3135
sI315
S'        # that we come across in this template'
p3136
sI316
S'        self.blocks = {}'
p3137
sI317
S''
sI318
S'        # Begin parsing.'
p3138
sI319
S'        self.parse(text)'
p3139
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3140
sg84
g48
sa(dp3141
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3142
sg62
(dp3143
S'self'
p3144
S'<gluon.template.TemplateParser object>'
p3145
sS'extend'
p3146
S'"\'default/index.html\'"'
p3147
sS'self.extend'
p3148
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3149
ssg72
I765
sg73
(dp3150
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3151
sI761
S'            self.child_super_nodes.remove(node)'
p3152
sI762
S''
sI763
S'        # If we need to extend a template.'
p3153
sI764
S'        if extend:'
p3154
sI765
S'            self.extend(extend)'
p3155
sI766
S''
sI767
S'# We need this for integration with gluon'
p3156
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3157
sg84
g188
sa(dp3158
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3159
sg62
(dp3160
S'super_nodes'
p3161
S'[]'
p3162
sS'_super_nodes'
p3163
g114
ssg72
I494
sg73
(dp3164
I489
S'                           name=filename,'
p3165
sI490
S'                           context=self.context,'
p3166
sI491
S'                           path=self.path,'
p3167
sI492
S'                           writer=self.writer,'
p3168
sI493
S'                           delimiters=self.delimiters,'
p3169
sI494
S'                           _super_nodes=super_nodes)'
p3170
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3171
sI497
S'        # template.'
p3172
sI498
S'        buf = BlockNode('
p3173
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3174
sg84
g206
sa(dp3175
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3176
sg62
(dp3177
S'text'
p3178
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3179
sS'self'
p3180
S'<gluon.template.TemplateParser object>'
p3181
sS'self.parse'
p3182
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3183
ssg72
I319
sg73
(dp3184
I320
S''
sI321
S'    def to_string(self):'
p3185
sI322
S'        """'
p3186
sI323
S'        Returns the parsed template with correct indentation.'
p3187
sI314
S'        # This variable will hold a reference to every block'
p3188
sI315
S'        # that we come across in this template'
p3189
sI316
S'        self.blocks = {}'
p3190
sI317
S''
sI318
S'        # Begin parsing.'
p3191
sI319
S'        self.parse(text)'
p3192
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3193
sg84
g48
sa(dp3194
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3195
sg62
(dp3196
S'self'
p3197
S'<gluon.template.TemplateParser object>'
p3198
sS'extend'
p3199
S'"\'default/index.html\'"'
p3200
sS'self.extend'
p3201
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3202
ssg72
I765
sg73
(dp3203
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3204
sI761
S'            self.child_super_nodes.remove(node)'
p3205
sI762
S''
sI763
S'        # If we need to extend a template.'
p3206
sI764
S'        if extend:'
p3207
sI765
S'            self.extend(extend)'
p3208
sI766
S''
sI767
S'# We need this for integration with gluon'
p3209
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3210
sg84
g188
sa(dp3211
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3212
sg62
(dp3213
S'super_nodes'
p3214
S'[]'
p3215
sS'_super_nodes'
p3216
g114
ssg72
I494
sg73
(dp3217
I489
S'                           name=filename,'
p3218
sI490
S'                           context=self.context,'
p3219
sI491
S'                           path=self.path,'
p3220
sI492
S'                           writer=self.writer,'
p3221
sI493
S'                           delimiters=self.delimiters,'
p3222
sI494
S'                           _super_nodes=super_nodes)'
p3223
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3224
sI497
S'        # template.'
p3225
sI498
S'        buf = BlockNode('
p3226
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3227
sg84
g206
sa(dp3228
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3229
sg62
(dp3230
S'text'
p3231
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3232
sS'self'
p3233
S'<gluon.template.TemplateParser object>'
p3234
sS'self.parse'
p3235
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3236
ssg72
I319
sg73
(dp3237
I320
S''
sI321
S'    def to_string(self):'
p3238
sI322
S'        """'
p3239
sI323
S'        Returns the parsed template with correct indentation.'
p3240
sI314
S'        # This variable will hold a reference to every block'
p3241
sI315
S'        # that we come across in this template'
p3242
sI316
S'        self.blocks = {}'
p3243
sI317
S''
sI318
S'        # Begin parsing.'
p3244
sI319
S'        self.parse(text)'
p3245
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3246
sg84
g48
sa(dp3247
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3248
sg62
(dp3249
S'self'
p3250
S'<gluon.template.TemplateParser object>'
p3251
sS'extend'
p3252
S'"\'default/index.html\'"'
p3253
sS'self.extend'
p3254
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3255
ssg72
I765
sg73
(dp3256
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3257
sI761
S'            self.child_super_nodes.remove(node)'
p3258
sI762
S''
sI763
S'        # If we need to extend a template.'
p3259
sI764
S'        if extend:'
p3260
sI765
S'            self.extend(extend)'
p3261
sI766
S''
sI767
S'# We need this for integration with gluon'
p3262
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3263
sg84
g188
sa(dp3264
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3265
sg62
(dp3266
S'super_nodes'
p3267
S'[]'
p3268
sS'_super_nodes'
p3269
g114
ssg72
I494
sg73
(dp3270
I489
S'                           name=filename,'
p3271
sI490
S'                           context=self.context,'
p3272
sI491
S'                           path=self.path,'
p3273
sI492
S'                           writer=self.writer,'
p3274
sI493
S'                           delimiters=self.delimiters,'
p3275
sI494
S'                           _super_nodes=super_nodes)'
p3276
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3277
sI497
S'        # template.'
p3278
sI498
S'        buf = BlockNode('
p3279
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3280
sg84
g206
sa(dp3281
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3282
sg62
(dp3283
S'text'
p3284
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3285
sS'self'
p3286
S'<gluon.template.TemplateParser object>'
p3287
sS'self.parse'
p3288
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3289
ssg72
I319
sg73
(dp3290
I320
S''
sI321
S'    def to_string(self):'
p3291
sI322
S'        """'
p3292
sI323
S'        Returns the parsed template with correct indentation.'
p3293
sI314
S'        # This variable will hold a reference to every block'
p3294
sI315
S'        # that we come across in this template'
p3295
sI316
S'        self.blocks = {}'
p3296
sI317
S''
sI318
S'        # Begin parsing.'
p3297
sI319
S'        self.parse(text)'
p3298
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3299
sg84
g48
sa(dp3300
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3301
sg62
(dp3302
S'self'
p3303
S'<gluon.template.TemplateParser object>'
p3304
sS'extend'
p3305
S'"\'default/index.html\'"'
p3306
sS'self.extend'
p3307
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3308
ssg72
I765
sg73
(dp3309
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3310
sI761
S'            self.child_super_nodes.remove(node)'
p3311
sI762
S''
sI763
S'        # If we need to extend a template.'
p3312
sI764
S'        if extend:'
p3313
sI765
S'            self.extend(extend)'
p3314
sI766
S''
sI767
S'# We need this for integration with gluon'
p3315
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3316
sg84
g188
sa(dp3317
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3318
sg62
(dp3319
S'super_nodes'
p3320
S'[]'
p3321
sS'_super_nodes'
p3322
g114
ssg72
I494
sg73
(dp3323
I489
S'                           name=filename,'
p3324
sI490
S'                           context=self.context,'
p3325
sI491
S'                           path=self.path,'
p3326
sI492
S'                           writer=self.writer,'
p3327
sI493
S'                           delimiters=self.delimiters,'
p3328
sI494
S'                           _super_nodes=super_nodes)'
p3329
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3330
sI497
S'        # template.'
p3331
sI498
S'        buf = BlockNode('
p3332
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3333
sg84
g206
sa(dp3334
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3335
sg62
(dp3336
S'text'
p3337
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3338
sS'self'
p3339
S'<gluon.template.TemplateParser object>'
p3340
sS'self.parse'
p3341
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3342
ssg72
I319
sg73
(dp3343
I320
S''
sI321
S'    def to_string(self):'
p3344
sI322
S'        """'
p3345
sI323
S'        Returns the parsed template with correct indentation.'
p3346
sI314
S'        # This variable will hold a reference to every block'
p3347
sI315
S'        # that we come across in this template'
p3348
sI316
S'        self.blocks = {}'
p3349
sI317
S''
sI318
S'        # Begin parsing.'
p3350
sI319
S'        self.parse(text)'
p3351
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3352
sg84
g48
sa(dp3353
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3354
sg62
(dp3355
S'self'
p3356
S'<gluon.template.TemplateParser object>'
p3357
sS'extend'
p3358
S'"\'default/index.html\'"'
p3359
sS'self.extend'
p3360
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3361
ssg72
I765
sg73
(dp3362
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3363
sI761
S'            self.child_super_nodes.remove(node)'
p3364
sI762
S''
sI763
S'        # If we need to extend a template.'
p3365
sI764
S'        if extend:'
p3366
sI765
S'            self.extend(extend)'
p3367
sI766
S''
sI767
S'# We need this for integration with gluon'
p3368
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3369
sg84
g188
sa(dp3370
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3371
sg62
(dp3372
S'super_nodes'
p3373
S'[]'
p3374
sS'_super_nodes'
p3375
g114
ssg72
I494
sg73
(dp3376
I489
S'                           name=filename,'
p3377
sI490
S'                           context=self.context,'
p3378
sI491
S'                           path=self.path,'
p3379
sI492
S'                           writer=self.writer,'
p3380
sI493
S'                           delimiters=self.delimiters,'
p3381
sI494
S'                           _super_nodes=super_nodes)'
p3382
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3383
sI497
S'        # template.'
p3384
sI498
S'        buf = BlockNode('
p3385
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3386
sg84
g206
sa(dp3387
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3388
sg62
(dp3389
S'text'
p3390
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3391
sS'self'
p3392
S'<gluon.template.TemplateParser object>'
p3393
sS'self.parse'
p3394
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3395
ssg72
I319
sg73
(dp3396
I320
S''
sI321
S'    def to_string(self):'
p3397
sI322
S'        """'
p3398
sI323
S'        Returns the parsed template with correct indentation.'
p3399
sI314
S'        # This variable will hold a reference to every block'
p3400
sI315
S'        # that we come across in this template'
p3401
sI316
S'        self.blocks = {}'
p3402
sI317
S''
sI318
S'        # Begin parsing.'
p3403
sI319
S'        self.parse(text)'
p3404
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3405
sg84
g48
sa(dp3406
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3407
sg62
(dp3408
S'self'
p3409
S'<gluon.template.TemplateParser object>'
p3410
sS'extend'
p3411
S'"\'default/index.html\'"'
p3412
sS'self.extend'
p3413
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3414
ssg72
I765
sg73
(dp3415
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3416
sI761
S'            self.child_super_nodes.remove(node)'
p3417
sI762
S''
sI763
S'        # If we need to extend a template.'
p3418
sI764
S'        if extend:'
p3419
sI765
S'            self.extend(extend)'
p3420
sI766
S''
sI767
S'# We need this for integration with gluon'
p3421
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3422
sg84
g188
sa(dp3423
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3424
sg62
(dp3425
S'super_nodes'
p3426
S'[]'
p3427
sS'_super_nodes'
p3428
g114
ssg72
I494
sg73
(dp3429
I489
S'                           name=filename,'
p3430
sI490
S'                           context=self.context,'
p3431
sI491
S'                           path=self.path,'
p3432
sI492
S'                           writer=self.writer,'
p3433
sI493
S'                           delimiters=self.delimiters,'
p3434
sI494
S'                           _super_nodes=super_nodes)'
p3435
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3436
sI497
S'        # template.'
p3437
sI498
S'        buf = BlockNode('
p3438
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3439
sg84
g206
sa(dp3440
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3441
sg62
(dp3442
S'text'
p3443
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3444
sS'self'
p3445
S'<gluon.template.TemplateParser object>'
p3446
sS'self.parse'
p3447
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3448
ssg72
I319
sg73
(dp3449
I320
S''
sI321
S'    def to_string(self):'
p3450
sI322
S'        """'
p3451
sI323
S'        Returns the parsed template with correct indentation.'
p3452
sI314
S'        # This variable will hold a reference to every block'
p3453
sI315
S'        # that we come across in this template'
p3454
sI316
S'        self.blocks = {}'
p3455
sI317
S''
sI318
S'        # Begin parsing.'
p3456
sI319
S'        self.parse(text)'
p3457
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3458
sg84
g48
sa(dp3459
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3460
sg62
(dp3461
S'self'
p3462
S'<gluon.template.TemplateParser object>'
p3463
sS'extend'
p3464
S'"\'default/index.html\'"'
p3465
sS'self.extend'
p3466
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3467
ssg72
I765
sg73
(dp3468
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3469
sI761
S'            self.child_super_nodes.remove(node)'
p3470
sI762
S''
sI763
S'        # If we need to extend a template.'
p3471
sI764
S'        if extend:'
p3472
sI765
S'            self.extend(extend)'
p3473
sI766
S''
sI767
S'# We need this for integration with gluon'
p3474
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3475
sg84
g188
sa(dp3476
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3477
sg62
(dp3478
S'super_nodes'
p3479
S'[]'
p3480
sS'_super_nodes'
p3481
g114
ssg72
I494
sg73
(dp3482
I489
S'                           name=filename,'
p3483
sI490
S'                           context=self.context,'
p3484
sI491
S'                           path=self.path,'
p3485
sI492
S'                           writer=self.writer,'
p3486
sI493
S'                           delimiters=self.delimiters,'
p3487
sI494
S'                           _super_nodes=super_nodes)'
p3488
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3489
sI497
S'        # template.'
p3490
sI498
S'        buf = BlockNode('
p3491
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3492
sg84
g206
sa(dp3493
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3494
sg62
(dp3495
S'text'
p3496
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3497
sS'self'
p3498
S'<gluon.template.TemplateParser object>'
p3499
sS'self.parse'
p3500
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3501
ssg72
I319
sg73
(dp3502
I320
S''
sI321
S'    def to_string(self):'
p3503
sI322
S'        """'
p3504
sI323
S'        Returns the parsed template with correct indentation.'
p3505
sI314
S'        # This variable will hold a reference to every block'
p3506
sI315
S'        # that we come across in this template'
p3507
sI316
S'        self.blocks = {}'
p3508
sI317
S''
sI318
S'        # Begin parsing.'
p3509
sI319
S'        self.parse(text)'
p3510
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3511
sg84
g48
sa(dp3512
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3513
sg62
(dp3514
S'self'
p3515
S'<gluon.template.TemplateParser object>'
p3516
sS'extend'
p3517
S'"\'default/index.html\'"'
p3518
sS'self.extend'
p3519
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3520
ssg72
I765
sg73
(dp3521
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3522
sI761
S'            self.child_super_nodes.remove(node)'
p3523
sI762
S''
sI763
S'        # If we need to extend a template.'
p3524
sI764
S'        if extend:'
p3525
sI765
S'            self.extend(extend)'
p3526
sI766
S''
sI767
S'# We need this for integration with gluon'
p3527
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3528
sg84
g188
sa(dp3529
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3530
sg62
(dp3531
S'super_nodes'
p3532
S'[]'
p3533
sS'_super_nodes'
p3534
g114
ssg72
I494
sg73
(dp3535
I489
S'                           name=filename,'
p3536
sI490
S'                           context=self.context,'
p3537
sI491
S'                           path=self.path,'
p3538
sI492
S'                           writer=self.writer,'
p3539
sI493
S'                           delimiters=self.delimiters,'
p3540
sI494
S'                           _super_nodes=super_nodes)'
p3541
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3542
sI497
S'        # template.'
p3543
sI498
S'        buf = BlockNode('
p3544
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3545
sg84
g206
sa(dp3546
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3547
sg62
(dp3548
S'text'
p3549
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3550
sS'self'
p3551
S'<gluon.template.TemplateParser object>'
p3552
sS'self.parse'
p3553
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3554
ssg72
I319
sg73
(dp3555
I320
S''
sI321
S'    def to_string(self):'
p3556
sI322
S'        """'
p3557
sI323
S'        Returns the parsed template with correct indentation.'
p3558
sI314
S'        # This variable will hold a reference to every block'
p3559
sI315
S'        # that we come across in this template'
p3560
sI316
S'        self.blocks = {}'
p3561
sI317
S''
sI318
S'        # Begin parsing.'
p3562
sI319
S'        self.parse(text)'
p3563
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3564
sg84
g48
sa(dp3565
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3566
sg62
(dp3567
S'self'
p3568
S'<gluon.template.TemplateParser object>'
p3569
sS'extend'
p3570
S'"\'default/index.html\'"'
p3571
sS'self.extend'
p3572
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3573
ssg72
I765
sg73
(dp3574
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3575
sI761
S'            self.child_super_nodes.remove(node)'
p3576
sI762
S''
sI763
S'        # If we need to extend a template.'
p3577
sI764
S'        if extend:'
p3578
sI765
S'            self.extend(extend)'
p3579
sI766
S''
sI767
S'# We need this for integration with gluon'
p3580
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3581
sg84
g188
sa(dp3582
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3583
sg62
(dp3584
S'super_nodes'
p3585
S'[]'
p3586
sS'_super_nodes'
p3587
g114
ssg72
I494
sg73
(dp3588
I489
S'                           name=filename,'
p3589
sI490
S'                           context=self.context,'
p3590
sI491
S'                           path=self.path,'
p3591
sI492
S'                           writer=self.writer,'
p3592
sI493
S'                           delimiters=self.delimiters,'
p3593
sI494
S'                           _super_nodes=super_nodes)'
p3594
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3595
sI497
S'        # template.'
p3596
sI498
S'        buf = BlockNode('
p3597
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3598
sg84
g206
sa(dp3599
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3600
sg62
(dp3601
S'text'
p3602
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3603
sS'self'
p3604
S'<gluon.template.TemplateParser object>'
p3605
sS'self.parse'
p3606
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3607
ssg72
I319
sg73
(dp3608
I320
S''
sI321
S'    def to_string(self):'
p3609
sI322
S'        """'
p3610
sI323
S'        Returns the parsed template with correct indentation.'
p3611
sI314
S'        # This variable will hold a reference to every block'
p3612
sI315
S'        # that we come across in this template'
p3613
sI316
S'        self.blocks = {}'
p3614
sI317
S''
sI318
S'        # Begin parsing.'
p3615
sI319
S'        self.parse(text)'
p3616
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3617
sg84
g48
sa(dp3618
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3619
sg62
(dp3620
S'self'
p3621
S'<gluon.template.TemplateParser object>'
p3622
sS'extend'
p3623
S'"\'default/index.html\'"'
p3624
sS'self.extend'
p3625
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3626
ssg72
I765
sg73
(dp3627
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3628
sI761
S'            self.child_super_nodes.remove(node)'
p3629
sI762
S''
sI763
S'        # If we need to extend a template.'
p3630
sI764
S'        if extend:'
p3631
sI765
S'            self.extend(extend)'
p3632
sI766
S''
sI767
S'# We need this for integration with gluon'
p3633
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3634
sg84
g188
sa(dp3635
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3636
sg62
(dp3637
S'super_nodes'
p3638
S'[]'
p3639
sS'_super_nodes'
p3640
g114
ssg72
I494
sg73
(dp3641
I489
S'                           name=filename,'
p3642
sI490
S'                           context=self.context,'
p3643
sI491
S'                           path=self.path,'
p3644
sI492
S'                           writer=self.writer,'
p3645
sI493
S'                           delimiters=self.delimiters,'
p3646
sI494
S'                           _super_nodes=super_nodes)'
p3647
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3648
sI497
S'        # template.'
p3649
sI498
S'        buf = BlockNode('
p3650
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3651
sg84
g206
sa(dp3652
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3653
sg62
(dp3654
S'text'
p3655
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3656
sS'self'
p3657
S'<gluon.template.TemplateParser object>'
p3658
sS'self.parse'
p3659
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3660
ssg72
I319
sg73
(dp3661
I320
S''
sI321
S'    def to_string(self):'
p3662
sI322
S'        """'
p3663
sI323
S'        Returns the parsed template with correct indentation.'
p3664
sI314
S'        # This variable will hold a reference to every block'
p3665
sI315
S'        # that we come across in this template'
p3666
sI316
S'        self.blocks = {}'
p3667
sI317
S''
sI318
S'        # Begin parsing.'
p3668
sI319
S'        self.parse(text)'
p3669
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3670
sg84
g48
sa(dp3671
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3672
sg62
(dp3673
S'self'
p3674
S'<gluon.template.TemplateParser object>'
p3675
sS'extend'
p3676
S'"\'default/index.html\'"'
p3677
sS'self.extend'
p3678
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3679
ssg72
I765
sg73
(dp3680
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3681
sI761
S'            self.child_super_nodes.remove(node)'
p3682
sI762
S''
sI763
S'        # If we need to extend a template.'
p3683
sI764
S'        if extend:'
p3684
sI765
S'            self.extend(extend)'
p3685
sI766
S''
sI767
S'# We need this for integration with gluon'
p3686
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3687
sg84
g188
sa(dp3688
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3689
sg62
(dp3690
S'super_nodes'
p3691
S'[]'
p3692
sS'_super_nodes'
p3693
g114
ssg72
I494
sg73
(dp3694
I489
S'                           name=filename,'
p3695
sI490
S'                           context=self.context,'
p3696
sI491
S'                           path=self.path,'
p3697
sI492
S'                           writer=self.writer,'
p3698
sI493
S'                           delimiters=self.delimiters,'
p3699
sI494
S'                           _super_nodes=super_nodes)'
p3700
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3701
sI497
S'        # template.'
p3702
sI498
S'        buf = BlockNode('
p3703
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3704
sg84
g206
sa(dp3705
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3706
sg62
(dp3707
S'text'
p3708
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3709
sS'self'
p3710
S'<gluon.template.TemplateParser object>'
p3711
sS'self.parse'
p3712
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3713
ssg72
I319
sg73
(dp3714
I320
S''
sI321
S'    def to_string(self):'
p3715
sI322
S'        """'
p3716
sI323
S'        Returns the parsed template with correct indentation.'
p3717
sI314
S'        # This variable will hold a reference to every block'
p3718
sI315
S'        # that we come across in this template'
p3719
sI316
S'        self.blocks = {}'
p3720
sI317
S''
sI318
S'        # Begin parsing.'
p3721
sI319
S'        self.parse(text)'
p3722
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3723
sg84
g48
sa(dp3724
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3725
sg62
(dp3726
S'self'
p3727
S'<gluon.template.TemplateParser object>'
p3728
sS'extend'
p3729
S'"\'default/index.html\'"'
p3730
sS'self.extend'
p3731
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3732
ssg72
I765
sg73
(dp3733
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3734
sI761
S'            self.child_super_nodes.remove(node)'
p3735
sI762
S''
sI763
S'        # If we need to extend a template.'
p3736
sI764
S'        if extend:'
p3737
sI765
S'            self.extend(extend)'
p3738
sI766
S''
sI767
S'# We need this for integration with gluon'
p3739
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3740
sg84
g188
sa(dp3741
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3742
sg62
(dp3743
S'super_nodes'
p3744
S'[]'
p3745
sS'_super_nodes'
p3746
g114
ssg72
I494
sg73
(dp3747
I489
S'                           name=filename,'
p3748
sI490
S'                           context=self.context,'
p3749
sI491
S'                           path=self.path,'
p3750
sI492
S'                           writer=self.writer,'
p3751
sI493
S'                           delimiters=self.delimiters,'
p3752
sI494
S'                           _super_nodes=super_nodes)'
p3753
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3754
sI497
S'        # template.'
p3755
sI498
S'        buf = BlockNode('
p3756
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3757
sg84
g206
sa(dp3758
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3759
sg62
(dp3760
S'text'
p3761
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3762
sS'self'
p3763
S'<gluon.template.TemplateParser object>'
p3764
sS'self.parse'
p3765
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3766
ssg72
I319
sg73
(dp3767
I320
S''
sI321
S'    def to_string(self):'
p3768
sI322
S'        """'
p3769
sI323
S'        Returns the parsed template with correct indentation.'
p3770
sI314
S'        # This variable will hold a reference to every block'
p3771
sI315
S'        # that we come across in this template'
p3772
sI316
S'        self.blocks = {}'
p3773
sI317
S''
sI318
S'        # Begin parsing.'
p3774
sI319
S'        self.parse(text)'
p3775
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3776
sg84
g48
sa(dp3777
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3778
sg62
(dp3779
S'self'
p3780
S'<gluon.template.TemplateParser object>'
p3781
sS'extend'
p3782
S'"\'default/index.html\'"'
p3783
sS'self.extend'
p3784
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3785
ssg72
I765
sg73
(dp3786
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3787
sI761
S'            self.child_super_nodes.remove(node)'
p3788
sI762
S''
sI763
S'        # If we need to extend a template.'
p3789
sI764
S'        if extend:'
p3790
sI765
S'            self.extend(extend)'
p3791
sI766
S''
sI767
S'# We need this for integration with gluon'
p3792
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3793
sg84
g188
sa(dp3794
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3795
sg62
(dp3796
S'super_nodes'
p3797
S'[]'
p3798
sS'_super_nodes'
p3799
g114
ssg72
I494
sg73
(dp3800
I489
S'                           name=filename,'
p3801
sI490
S'                           context=self.context,'
p3802
sI491
S'                           path=self.path,'
p3803
sI492
S'                           writer=self.writer,'
p3804
sI493
S'                           delimiters=self.delimiters,'
p3805
sI494
S'                           _super_nodes=super_nodes)'
p3806
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3807
sI497
S'        # template.'
p3808
sI498
S'        buf = BlockNode('
p3809
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3810
sg84
g206
sa(dp3811
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3812
sg62
(dp3813
S'text'
p3814
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3815
sS'self'
p3816
S'<gluon.template.TemplateParser object>'
p3817
sS'self.parse'
p3818
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3819
ssg72
I319
sg73
(dp3820
I320
S''
sI321
S'    def to_string(self):'
p3821
sI322
S'        """'
p3822
sI323
S'        Returns the parsed template with correct indentation.'
p3823
sI314
S'        # This variable will hold a reference to every block'
p3824
sI315
S'        # that we come across in this template'
p3825
sI316
S'        self.blocks = {}'
p3826
sI317
S''
sI318
S'        # Begin parsing.'
p3827
sI319
S'        self.parse(text)'
p3828
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3829
sg84
g48
sa(dp3830
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3831
sg62
(dp3832
S'self'
p3833
S'<gluon.template.TemplateParser object>'
p3834
sS'extend'
p3835
S'"\'default/index.html\'"'
p3836
sS'self.extend'
p3837
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3838
ssg72
I765
sg73
(dp3839
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3840
sI761
S'            self.child_super_nodes.remove(node)'
p3841
sI762
S''
sI763
S'        # If we need to extend a template.'
p3842
sI764
S'        if extend:'
p3843
sI765
S'            self.extend(extend)'
p3844
sI766
S''
sI767
S'# We need this for integration with gluon'
p3845
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3846
sg84
g188
sa(dp3847
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3848
sg62
(dp3849
S'super_nodes'
p3850
S'[]'
p3851
sS'_super_nodes'
p3852
g114
ssg72
I494
sg73
(dp3853
I489
S'                           name=filename,'
p3854
sI490
S'                           context=self.context,'
p3855
sI491
S'                           path=self.path,'
p3856
sI492
S'                           writer=self.writer,'
p3857
sI493
S'                           delimiters=self.delimiters,'
p3858
sI494
S'                           _super_nodes=super_nodes)'
p3859
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3860
sI497
S'        # template.'
p3861
sI498
S'        buf = BlockNode('
p3862
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3863
sg84
g206
sa(dp3864
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3865
sg62
(dp3866
S'text'
p3867
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3868
sS'self'
p3869
S'<gluon.template.TemplateParser object>'
p3870
sS'self.parse'
p3871
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3872
ssg72
I319
sg73
(dp3873
I320
S''
sI321
S'    def to_string(self):'
p3874
sI322
S'        """'
p3875
sI323
S'        Returns the parsed template with correct indentation.'
p3876
sI314
S'        # This variable will hold a reference to every block'
p3877
sI315
S'        # that we come across in this template'
p3878
sI316
S'        self.blocks = {}'
p3879
sI317
S''
sI318
S'        # Begin parsing.'
p3880
sI319
S'        self.parse(text)'
p3881
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3882
sg84
g48
sa(dp3883
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3884
sg62
(dp3885
S'self'
p3886
S'<gluon.template.TemplateParser object>'
p3887
sS'extend'
p3888
S'"\'default/index.html\'"'
p3889
sS'self.extend'
p3890
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3891
ssg72
I765
sg73
(dp3892
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3893
sI761
S'            self.child_super_nodes.remove(node)'
p3894
sI762
S''
sI763
S'        # If we need to extend a template.'
p3895
sI764
S'        if extend:'
p3896
sI765
S'            self.extend(extend)'
p3897
sI766
S''
sI767
S'# We need this for integration with gluon'
p3898
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3899
sg84
g188
sa(dp3900
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3901
sg62
(dp3902
S'super_nodes'
p3903
S'[]'
p3904
sS'_super_nodes'
p3905
g114
ssg72
I494
sg73
(dp3906
I489
S'                           name=filename,'
p3907
sI490
S'                           context=self.context,'
p3908
sI491
S'                           path=self.path,'
p3909
sI492
S'                           writer=self.writer,'
p3910
sI493
S'                           delimiters=self.delimiters,'
p3911
sI494
S'                           _super_nodes=super_nodes)'
p3912
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3913
sI497
S'        # template.'
p3914
sI498
S'        buf = BlockNode('
p3915
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3916
sg84
g206
sa(dp3917
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3918
sg62
(dp3919
S'text'
p3920
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3921
sS'self'
p3922
S'<gluon.template.TemplateParser object>'
p3923
sS'self.parse'
p3924
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3925
ssg72
I319
sg73
(dp3926
I320
S''
sI321
S'    def to_string(self):'
p3927
sI322
S'        """'
p3928
sI323
S'        Returns the parsed template with correct indentation.'
p3929
sI314
S'        # This variable will hold a reference to every block'
p3930
sI315
S'        # that we come across in this template'
p3931
sI316
S'        self.blocks = {}'
p3932
sI317
S''
sI318
S'        # Begin parsing.'
p3933
sI319
S'        self.parse(text)'
p3934
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3935
sg84
g48
sa(dp3936
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3937
sg62
(dp3938
S'self'
p3939
S'<gluon.template.TemplateParser object>'
p3940
sS'extend'
p3941
S'"\'default/index.html\'"'
p3942
sS'self.extend'
p3943
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3944
ssg72
I765
sg73
(dp3945
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3946
sI761
S'            self.child_super_nodes.remove(node)'
p3947
sI762
S''
sI763
S'        # If we need to extend a template.'
p3948
sI764
S'        if extend:'
p3949
sI765
S'            self.extend(extend)'
p3950
sI766
S''
sI767
S'# We need this for integration with gluon'
p3951
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p3952
sg84
g188
sa(dp3953
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3954
sg62
(dp3955
S'super_nodes'
p3956
S'[]'
p3957
sS'_super_nodes'
p3958
g114
ssg72
I494
sg73
(dp3959
I489
S'                           name=filename,'
p3960
sI490
S'                           context=self.context,'
p3961
sI491
S'                           path=self.path,'
p3962
sI492
S'                           writer=self.writer,'
p3963
sI493
S'                           delimiters=self.delimiters,'
p3964
sI494
S'                           _super_nodes=super_nodes)'
p3965
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p3966
sI497
S'        # template.'
p3967
sI498
S'        buf = BlockNode('
p3968
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p3969
sg84
g206
sa(dp3970
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3971
sg62
(dp3972
S'text'
p3973
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p3974
sS'self'
p3975
S'<gluon.template.TemplateParser object>'
p3976
sS'self.parse'
p3977
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3978
ssg72
I319
sg73
(dp3979
I320
S''
sI321
S'    def to_string(self):'
p3980
sI322
S'        """'
p3981
sI323
S'        Returns the parsed template with correct indentation.'
p3982
sI314
S'        # This variable will hold a reference to every block'
p3983
sI315
S'        # that we come across in this template'
p3984
sI316
S'        self.blocks = {}'
p3985
sI317
S''
sI318
S'        # Begin parsing.'
p3986
sI319
S'        self.parse(text)'
p3987
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3988
sg84
g48
sa(dp3989
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p3990
sg62
(dp3991
S'self'
p3992
S'<gluon.template.TemplateParser object>'
p3993
sS'extend'
p3994
S'"\'default/index.html\'"'
p3995
sS'self.extend'
p3996
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3997
ssg72
I765
sg73
(dp3998
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3999
sI761
S'            self.child_super_nodes.remove(node)'
p4000
sI762
S''
sI763
S'        # If we need to extend a template.'
p4001
sI764
S'        if extend:'
p4002
sI765
S'            self.extend(extend)'
p4003
sI766
S''
sI767
S'# We need this for integration with gluon'
p4004
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4005
sg84
g188
sa(dp4006
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4007
sg62
(dp4008
S'super_nodes'
p4009
S'[]'
p4010
sS'_super_nodes'
p4011
g114
ssg72
I494
sg73
(dp4012
I489
S'                           name=filename,'
p4013
sI490
S'                           context=self.context,'
p4014
sI491
S'                           path=self.path,'
p4015
sI492
S'                           writer=self.writer,'
p4016
sI493
S'                           delimiters=self.delimiters,'
p4017
sI494
S'                           _super_nodes=super_nodes)'
p4018
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4019
sI497
S'        # template.'
p4020
sI498
S'        buf = BlockNode('
p4021
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4022
sg84
g206
sa(dp4023
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4024
sg62
(dp4025
S'text'
p4026
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4027
sS'self'
p4028
S'<gluon.template.TemplateParser object>'
p4029
sS'self.parse'
p4030
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4031
ssg72
I319
sg73
(dp4032
I320
S''
sI321
S'    def to_string(self):'
p4033
sI322
S'        """'
p4034
sI323
S'        Returns the parsed template with correct indentation.'
p4035
sI314
S'        # This variable will hold a reference to every block'
p4036
sI315
S'        # that we come across in this template'
p4037
sI316
S'        self.blocks = {}'
p4038
sI317
S''
sI318
S'        # Begin parsing.'
p4039
sI319
S'        self.parse(text)'
p4040
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4041
sg84
g48
sa(dp4042
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4043
sg62
(dp4044
S'self'
p4045
S'<gluon.template.TemplateParser object>'
p4046
sS'extend'
p4047
S'"\'default/index.html\'"'
p4048
sS'self.extend'
p4049
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4050
ssg72
I765
sg73
(dp4051
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4052
sI761
S'            self.child_super_nodes.remove(node)'
p4053
sI762
S''
sI763
S'        # If we need to extend a template.'
p4054
sI764
S'        if extend:'
p4055
sI765
S'            self.extend(extend)'
p4056
sI766
S''
sI767
S'# We need this for integration with gluon'
p4057
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4058
sg84
g188
sa(dp4059
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4060
sg62
(dp4061
S'super_nodes'
p4062
S'[]'
p4063
sS'_super_nodes'
p4064
g114
ssg72
I494
sg73
(dp4065
I489
S'                           name=filename,'
p4066
sI490
S'                           context=self.context,'
p4067
sI491
S'                           path=self.path,'
p4068
sI492
S'                           writer=self.writer,'
p4069
sI493
S'                           delimiters=self.delimiters,'
p4070
sI494
S'                           _super_nodes=super_nodes)'
p4071
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4072
sI497
S'        # template.'
p4073
sI498
S'        buf = BlockNode('
p4074
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4075
sg84
g206
sa(dp4076
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4077
sg62
(dp4078
S'text'
p4079
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4080
sS'self'
p4081
S'<gluon.template.TemplateParser object>'
p4082
sS'self.parse'
p4083
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4084
ssg72
I319
sg73
(dp4085
I320
S''
sI321
S'    def to_string(self):'
p4086
sI322
S'        """'
p4087
sI323
S'        Returns the parsed template with correct indentation.'
p4088
sI314
S'        # This variable will hold a reference to every block'
p4089
sI315
S'        # that we come across in this template'
p4090
sI316
S'        self.blocks = {}'
p4091
sI317
S''
sI318
S'        # Begin parsing.'
p4092
sI319
S'        self.parse(text)'
p4093
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4094
sg84
g48
sa(dp4095
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4096
sg62
(dp4097
S'self'
p4098
S'<gluon.template.TemplateParser object>'
p4099
sS'extend'
p4100
S'"\'default/index.html\'"'
p4101
sS'self.extend'
p4102
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4103
ssg72
I765
sg73
(dp4104
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4105
sI761
S'            self.child_super_nodes.remove(node)'
p4106
sI762
S''
sI763
S'        # If we need to extend a template.'
p4107
sI764
S'        if extend:'
p4108
sI765
S'            self.extend(extend)'
p4109
sI766
S''
sI767
S'# We need this for integration with gluon'
p4110
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4111
sg84
g188
sa(dp4112
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4113
sg62
(dp4114
S'super_nodes'
p4115
S'[]'
p4116
sS'_super_nodes'
p4117
g114
ssg72
I494
sg73
(dp4118
I489
S'                           name=filename,'
p4119
sI490
S'                           context=self.context,'
p4120
sI491
S'                           path=self.path,'
p4121
sI492
S'                           writer=self.writer,'
p4122
sI493
S'                           delimiters=self.delimiters,'
p4123
sI494
S'                           _super_nodes=super_nodes)'
p4124
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4125
sI497
S'        # template.'
p4126
sI498
S'        buf = BlockNode('
p4127
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4128
sg84
g206
sa(dp4129
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4130
sg62
(dp4131
S'text'
p4132
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4133
sS'self'
p4134
S'<gluon.template.TemplateParser object>'
p4135
sS'self.parse'
p4136
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4137
ssg72
I319
sg73
(dp4138
I320
S''
sI321
S'    def to_string(self):'
p4139
sI322
S'        """'
p4140
sI323
S'        Returns the parsed template with correct indentation.'
p4141
sI314
S'        # This variable will hold a reference to every block'
p4142
sI315
S'        # that we come across in this template'
p4143
sI316
S'        self.blocks = {}'
p4144
sI317
S''
sI318
S'        # Begin parsing.'
p4145
sI319
S'        self.parse(text)'
p4146
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4147
sg84
g48
sa(dp4148
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4149
sg62
(dp4150
S'self'
p4151
S'<gluon.template.TemplateParser object>'
p4152
sS'extend'
p4153
S'"\'default/index.html\'"'
p4154
sS'self.extend'
p4155
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4156
ssg72
I765
sg73
(dp4157
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4158
sI761
S'            self.child_super_nodes.remove(node)'
p4159
sI762
S''
sI763
S'        # If we need to extend a template.'
p4160
sI764
S'        if extend:'
p4161
sI765
S'            self.extend(extend)'
p4162
sI766
S''
sI767
S'# We need this for integration with gluon'
p4163
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4164
sg84
g188
sa(dp4165
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4166
sg62
(dp4167
S'super_nodes'
p4168
S'[]'
p4169
sS'_super_nodes'
p4170
g114
ssg72
I494
sg73
(dp4171
I489
S'                           name=filename,'
p4172
sI490
S'                           context=self.context,'
p4173
sI491
S'                           path=self.path,'
p4174
sI492
S'                           writer=self.writer,'
p4175
sI493
S'                           delimiters=self.delimiters,'
p4176
sI494
S'                           _super_nodes=super_nodes)'
p4177
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4178
sI497
S'        # template.'
p4179
sI498
S'        buf = BlockNode('
p4180
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4181
sg84
g206
sa(dp4182
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4183
sg62
(dp4184
S'text'
p4185
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4186
sS'self'
p4187
S'<gluon.template.TemplateParser object>'
p4188
sS'self.parse'
p4189
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4190
ssg72
I319
sg73
(dp4191
I320
S''
sI321
S'    def to_string(self):'
p4192
sI322
S'        """'
p4193
sI323
S'        Returns the parsed template with correct indentation.'
p4194
sI314
S'        # This variable will hold a reference to every block'
p4195
sI315
S'        # that we come across in this template'
p4196
sI316
S'        self.blocks = {}'
p4197
sI317
S''
sI318
S'        # Begin parsing.'
p4198
sI319
S'        self.parse(text)'
p4199
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4200
sg84
g48
sa(dp4201
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4202
sg62
(dp4203
S'self'
p4204
S'<gluon.template.TemplateParser object>'
p4205
sS'extend'
p4206
S'"\'default/index.html\'"'
p4207
sS'self.extend'
p4208
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4209
ssg72
I765
sg73
(dp4210
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4211
sI761
S'            self.child_super_nodes.remove(node)'
p4212
sI762
S''
sI763
S'        # If we need to extend a template.'
p4213
sI764
S'        if extend:'
p4214
sI765
S'            self.extend(extend)'
p4215
sI766
S''
sI767
S'# We need this for integration with gluon'
p4216
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4217
sg84
g188
sa(dp4218
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4219
sg62
(dp4220
S'super_nodes'
p4221
S'[]'
p4222
sS'_super_nodes'
p4223
g114
ssg72
I494
sg73
(dp4224
I489
S'                           name=filename,'
p4225
sI490
S'                           context=self.context,'
p4226
sI491
S'                           path=self.path,'
p4227
sI492
S'                           writer=self.writer,'
p4228
sI493
S'                           delimiters=self.delimiters,'
p4229
sI494
S'                           _super_nodes=super_nodes)'
p4230
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4231
sI497
S'        # template.'
p4232
sI498
S'        buf = BlockNode('
p4233
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4234
sg84
g206
sa(dp4235
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4236
sg62
(dp4237
S'text'
p4238
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4239
sS'self'
p4240
S'<gluon.template.TemplateParser object>'
p4241
sS'self.parse'
p4242
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4243
ssg72
I319
sg73
(dp4244
I320
S''
sI321
S'    def to_string(self):'
p4245
sI322
S'        """'
p4246
sI323
S'        Returns the parsed template with correct indentation.'
p4247
sI314
S'        # This variable will hold a reference to every block'
p4248
sI315
S'        # that we come across in this template'
p4249
sI316
S'        self.blocks = {}'
p4250
sI317
S''
sI318
S'        # Begin parsing.'
p4251
sI319
S'        self.parse(text)'
p4252
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4253
sg84
g48
sa(dp4254
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4255
sg62
(dp4256
S'self'
p4257
S'<gluon.template.TemplateParser object>'
p4258
sS'extend'
p4259
S'"\'default/index.html\'"'
p4260
sS'self.extend'
p4261
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4262
ssg72
I765
sg73
(dp4263
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4264
sI761
S'            self.child_super_nodes.remove(node)'
p4265
sI762
S''
sI763
S'        # If we need to extend a template.'
p4266
sI764
S'        if extend:'
p4267
sI765
S'            self.extend(extend)'
p4268
sI766
S''
sI767
S'# We need this for integration with gluon'
p4269
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4270
sg84
g188
sa(dp4271
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4272
sg62
(dp4273
S'super_nodes'
p4274
S'[]'
p4275
sS'_super_nodes'
p4276
g114
ssg72
I494
sg73
(dp4277
I489
S'                           name=filename,'
p4278
sI490
S'                           context=self.context,'
p4279
sI491
S'                           path=self.path,'
p4280
sI492
S'                           writer=self.writer,'
p4281
sI493
S'                           delimiters=self.delimiters,'
p4282
sI494
S'                           _super_nodes=super_nodes)'
p4283
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4284
sI497
S'        # template.'
p4285
sI498
S'        buf = BlockNode('
p4286
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4287
sg84
g206
sa(dp4288
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4289
sg62
(dp4290
S'text'
p4291
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4292
sS'self'
p4293
S'<gluon.template.TemplateParser object>'
p4294
sS'self.parse'
p4295
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4296
ssg72
I319
sg73
(dp4297
I320
S''
sI321
S'    def to_string(self):'
p4298
sI322
S'        """'
p4299
sI323
S'        Returns the parsed template with correct indentation.'
p4300
sI314
S'        # This variable will hold a reference to every block'
p4301
sI315
S'        # that we come across in this template'
p4302
sI316
S'        self.blocks = {}'
p4303
sI317
S''
sI318
S'        # Begin parsing.'
p4304
sI319
S'        self.parse(text)'
p4305
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4306
sg84
g48
sa(dp4307
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4308
sg62
(dp4309
S'self'
p4310
S'<gluon.template.TemplateParser object>'
p4311
sS'extend'
p4312
S'"\'default/index.html\'"'
p4313
sS'self.extend'
p4314
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4315
ssg72
I765
sg73
(dp4316
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4317
sI761
S'            self.child_super_nodes.remove(node)'
p4318
sI762
S''
sI763
S'        # If we need to extend a template.'
p4319
sI764
S'        if extend:'
p4320
sI765
S'            self.extend(extend)'
p4321
sI766
S''
sI767
S'# We need this for integration with gluon'
p4322
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4323
sg84
g188
sa(dp4324
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4325
sg62
(dp4326
S'super_nodes'
p4327
S'[]'
p4328
sS'_super_nodes'
p4329
g114
ssg72
I494
sg73
(dp4330
I489
S'                           name=filename,'
p4331
sI490
S'                           context=self.context,'
p4332
sI491
S'                           path=self.path,'
p4333
sI492
S'                           writer=self.writer,'
p4334
sI493
S'                           delimiters=self.delimiters,'
p4335
sI494
S'                           _super_nodes=super_nodes)'
p4336
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4337
sI497
S'        # template.'
p4338
sI498
S'        buf = BlockNode('
p4339
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4340
sg84
g206
sa(dp4341
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4342
sg62
(dp4343
S'text'
p4344
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4345
sS'self'
p4346
S'<gluon.template.TemplateParser object>'
p4347
sS'self.parse'
p4348
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4349
ssg72
I319
sg73
(dp4350
I320
S''
sI321
S'    def to_string(self):'
p4351
sI322
S'        """'
p4352
sI323
S'        Returns the parsed template with correct indentation.'
p4353
sI314
S'        # This variable will hold a reference to every block'
p4354
sI315
S'        # that we come across in this template'
p4355
sI316
S'        self.blocks = {}'
p4356
sI317
S''
sI318
S'        # Begin parsing.'
p4357
sI319
S'        self.parse(text)'
p4358
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4359
sg84
g48
sa(dp4360
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4361
sg62
(dp4362
S'self'
p4363
S'<gluon.template.TemplateParser object>'
p4364
sS'extend'
p4365
S'"\'default/index.html\'"'
p4366
sS'self.extend'
p4367
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4368
ssg72
I765
sg73
(dp4369
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4370
sI761
S'            self.child_super_nodes.remove(node)'
p4371
sI762
S''
sI763
S'        # If we need to extend a template.'
p4372
sI764
S'        if extend:'
p4373
sI765
S'            self.extend(extend)'
p4374
sI766
S''
sI767
S'# We need this for integration with gluon'
p4375
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4376
sg84
g188
sa(dp4377
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4378
sg62
(dp4379
S'super_nodes'
p4380
S'[]'
p4381
sS'_super_nodes'
p4382
g114
ssg72
I494
sg73
(dp4383
I489
S'                           name=filename,'
p4384
sI490
S'                           context=self.context,'
p4385
sI491
S'                           path=self.path,'
p4386
sI492
S'                           writer=self.writer,'
p4387
sI493
S'                           delimiters=self.delimiters,'
p4388
sI494
S'                           _super_nodes=super_nodes)'
p4389
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4390
sI497
S'        # template.'
p4391
sI498
S'        buf = BlockNode('
p4392
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4393
sg84
g206
sa(dp4394
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4395
sg62
(dp4396
S'text'
p4397
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4398
sS'self'
p4399
S'<gluon.template.TemplateParser object>'
p4400
sS'self.parse'
p4401
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4402
ssg72
I319
sg73
(dp4403
I320
S''
sI321
S'    def to_string(self):'
p4404
sI322
S'        """'
p4405
sI323
S'        Returns the parsed template with correct indentation.'
p4406
sI314
S'        # This variable will hold a reference to every block'
p4407
sI315
S'        # that we come across in this template'
p4408
sI316
S'        self.blocks = {}'
p4409
sI317
S''
sI318
S'        # Begin parsing.'
p4410
sI319
S'        self.parse(text)'
p4411
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4412
sg84
g48
sa(dp4413
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4414
sg62
(dp4415
S'self'
p4416
S'<gluon.template.TemplateParser object>'
p4417
sS'extend'
p4418
S'"\'default/index.html\'"'
p4419
sS'self.extend'
p4420
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4421
ssg72
I765
sg73
(dp4422
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4423
sI761
S'            self.child_super_nodes.remove(node)'
p4424
sI762
S''
sI763
S'        # If we need to extend a template.'
p4425
sI764
S'        if extend:'
p4426
sI765
S'            self.extend(extend)'
p4427
sI766
S''
sI767
S'# We need this for integration with gluon'
p4428
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4429
sg84
g188
sa(dp4430
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4431
sg62
(dp4432
S'super_nodes'
p4433
S'[]'
p4434
sS'_super_nodes'
p4435
g114
ssg72
I494
sg73
(dp4436
I489
S'                           name=filename,'
p4437
sI490
S'                           context=self.context,'
p4438
sI491
S'                           path=self.path,'
p4439
sI492
S'                           writer=self.writer,'
p4440
sI493
S'                           delimiters=self.delimiters,'
p4441
sI494
S'                           _super_nodes=super_nodes)'
p4442
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4443
sI497
S'        # template.'
p4444
sI498
S'        buf = BlockNode('
p4445
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4446
sg84
g206
sa(dp4447
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4448
sg62
(dp4449
S'text'
p4450
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4451
sS'self'
p4452
S'<gluon.template.TemplateParser object>'
p4453
sS'self.parse'
p4454
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4455
ssg72
I319
sg73
(dp4456
I320
S''
sI321
S'    def to_string(self):'
p4457
sI322
S'        """'
p4458
sI323
S'        Returns the parsed template with correct indentation.'
p4459
sI314
S'        # This variable will hold a reference to every block'
p4460
sI315
S'        # that we come across in this template'
p4461
sI316
S'        self.blocks = {}'
p4462
sI317
S''
sI318
S'        # Begin parsing.'
p4463
sI319
S'        self.parse(text)'
p4464
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4465
sg84
g48
sa(dp4466
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4467
sg62
(dp4468
S'self'
p4469
S'<gluon.template.TemplateParser object>'
p4470
sS'extend'
p4471
S'"\'default/index.html\'"'
p4472
sS'self.extend'
p4473
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4474
ssg72
I765
sg73
(dp4475
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4476
sI761
S'            self.child_super_nodes.remove(node)'
p4477
sI762
S''
sI763
S'        # If we need to extend a template.'
p4478
sI764
S'        if extend:'
p4479
sI765
S'            self.extend(extend)'
p4480
sI766
S''
sI767
S'# We need this for integration with gluon'
p4481
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4482
sg84
g188
sa(dp4483
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4484
sg62
(dp4485
S'super_nodes'
p4486
S'[]'
p4487
sS'_super_nodes'
p4488
g114
ssg72
I494
sg73
(dp4489
I489
S'                           name=filename,'
p4490
sI490
S'                           context=self.context,'
p4491
sI491
S'                           path=self.path,'
p4492
sI492
S'                           writer=self.writer,'
p4493
sI493
S'                           delimiters=self.delimiters,'
p4494
sI494
S'                           _super_nodes=super_nodes)'
p4495
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4496
sI497
S'        # template.'
p4497
sI498
S'        buf = BlockNode('
p4498
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4499
sg84
g206
sa(dp4500
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4501
sg62
(dp4502
S'text'
p4503
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4504
sS'self'
p4505
S'<gluon.template.TemplateParser object>'
p4506
sS'self.parse'
p4507
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4508
ssg72
I319
sg73
(dp4509
I320
S''
sI321
S'    def to_string(self):'
p4510
sI322
S'        """'
p4511
sI323
S'        Returns the parsed template with correct indentation.'
p4512
sI314
S'        # This variable will hold a reference to every block'
p4513
sI315
S'        # that we come across in this template'
p4514
sI316
S'        self.blocks = {}'
p4515
sI317
S''
sI318
S'        # Begin parsing.'
p4516
sI319
S'        self.parse(text)'
p4517
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4518
sg84
g48
sa(dp4519
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4520
sg62
(dp4521
S'self'
p4522
S'<gluon.template.TemplateParser object>'
p4523
sS'extend'
p4524
S'"\'default/index.html\'"'
p4525
sS'self.extend'
p4526
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4527
ssg72
I765
sg73
(dp4528
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4529
sI761
S'            self.child_super_nodes.remove(node)'
p4530
sI762
S''
sI763
S'        # If we need to extend a template.'
p4531
sI764
S'        if extend:'
p4532
sI765
S'            self.extend(extend)'
p4533
sI766
S''
sI767
S'# We need this for integration with gluon'
p4534
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4535
sg84
g188
sa(dp4536
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4537
sg62
(dp4538
S'super_nodes'
p4539
S'[]'
p4540
sS'_super_nodes'
p4541
g114
ssg72
I494
sg73
(dp4542
I489
S'                           name=filename,'
p4543
sI490
S'                           context=self.context,'
p4544
sI491
S'                           path=self.path,'
p4545
sI492
S'                           writer=self.writer,'
p4546
sI493
S'                           delimiters=self.delimiters,'
p4547
sI494
S'                           _super_nodes=super_nodes)'
p4548
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4549
sI497
S'        # template.'
p4550
sI498
S'        buf = BlockNode('
p4551
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4552
sg84
g206
sa(dp4553
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4554
sg62
(dp4555
S'text'
p4556
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4557
sS'self'
p4558
S'<gluon.template.TemplateParser object>'
p4559
sS'self.parse'
p4560
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4561
ssg72
I319
sg73
(dp4562
I320
S''
sI321
S'    def to_string(self):'
p4563
sI322
S'        """'
p4564
sI323
S'        Returns the parsed template with correct indentation.'
p4565
sI314
S'        # This variable will hold a reference to every block'
p4566
sI315
S'        # that we come across in this template'
p4567
sI316
S'        self.blocks = {}'
p4568
sI317
S''
sI318
S'        # Begin parsing.'
p4569
sI319
S'        self.parse(text)'
p4570
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4571
sg84
g48
sa(dp4572
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4573
sg62
(dp4574
S'self'
p4575
S'<gluon.template.TemplateParser object>'
p4576
sS'extend'
p4577
S'"\'default/index.html\'"'
p4578
sS'self.extend'
p4579
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4580
ssg72
I765
sg73
(dp4581
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4582
sI761
S'            self.child_super_nodes.remove(node)'
p4583
sI762
S''
sI763
S'        # If we need to extend a template.'
p4584
sI764
S'        if extend:'
p4585
sI765
S'            self.extend(extend)'
p4586
sI766
S''
sI767
S'# We need this for integration with gluon'
p4587
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4588
sg84
g188
sa(dp4589
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4590
sg62
(dp4591
S'super_nodes'
p4592
S'[]'
p4593
sS'_super_nodes'
p4594
g114
ssg72
I494
sg73
(dp4595
I489
S'                           name=filename,'
p4596
sI490
S'                           context=self.context,'
p4597
sI491
S'                           path=self.path,'
p4598
sI492
S'                           writer=self.writer,'
p4599
sI493
S'                           delimiters=self.delimiters,'
p4600
sI494
S'                           _super_nodes=super_nodes)'
p4601
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4602
sI497
S'        # template.'
p4603
sI498
S'        buf = BlockNode('
p4604
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4605
sg84
g206
sa(dp4606
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4607
sg62
(dp4608
S'text'
p4609
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4610
sS'self'
p4611
S'<gluon.template.TemplateParser object>'
p4612
sS'self.parse'
p4613
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4614
ssg72
I319
sg73
(dp4615
I320
S''
sI321
S'    def to_string(self):'
p4616
sI322
S'        """'
p4617
sI323
S'        Returns the parsed template with correct indentation.'
p4618
sI314
S'        # This variable will hold a reference to every block'
p4619
sI315
S'        # that we come across in this template'
p4620
sI316
S'        self.blocks = {}'
p4621
sI317
S''
sI318
S'        # Begin parsing.'
p4622
sI319
S'        self.parse(text)'
p4623
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4624
sg84
g48
sa(dp4625
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4626
sg62
(dp4627
S'self'
p4628
S'<gluon.template.TemplateParser object>'
p4629
sS'extend'
p4630
S'"\'default/index.html\'"'
p4631
sS'self.extend'
p4632
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4633
ssg72
I765
sg73
(dp4634
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4635
sI761
S'            self.child_super_nodes.remove(node)'
p4636
sI762
S''
sI763
S'        # If we need to extend a template.'
p4637
sI764
S'        if extend:'
p4638
sI765
S'            self.extend(extend)'
p4639
sI766
S''
sI767
S'# We need this for integration with gluon'
p4640
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4641
sg84
g188
sa(dp4642
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4643
sg62
(dp4644
S'super_nodes'
p4645
S'[]'
p4646
sS'_super_nodes'
p4647
g114
ssg72
I494
sg73
(dp4648
I489
S'                           name=filename,'
p4649
sI490
S'                           context=self.context,'
p4650
sI491
S'                           path=self.path,'
p4651
sI492
S'                           writer=self.writer,'
p4652
sI493
S'                           delimiters=self.delimiters,'
p4653
sI494
S'                           _super_nodes=super_nodes)'
p4654
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4655
sI497
S'        # template.'
p4656
sI498
S'        buf = BlockNode('
p4657
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4658
sg84
g206
sa(dp4659
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4660
sg62
(dp4661
S'text'
p4662
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4663
sS'self'
p4664
S'<gluon.template.TemplateParser object>'
p4665
sS'self.parse'
p4666
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4667
ssg72
I319
sg73
(dp4668
I320
S''
sI321
S'    def to_string(self):'
p4669
sI322
S'        """'
p4670
sI323
S'        Returns the parsed template with correct indentation.'
p4671
sI314
S'        # This variable will hold a reference to every block'
p4672
sI315
S'        # that we come across in this template'
p4673
sI316
S'        self.blocks = {}'
p4674
sI317
S''
sI318
S'        # Begin parsing.'
p4675
sI319
S'        self.parse(text)'
p4676
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4677
sg84
g48
sa(dp4678
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4679
sg62
(dp4680
S'self'
p4681
S'<gluon.template.TemplateParser object>'
p4682
sS'extend'
p4683
S'"\'default/index.html\'"'
p4684
sS'self.extend'
p4685
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4686
ssg72
I765
sg73
(dp4687
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4688
sI761
S'            self.child_super_nodes.remove(node)'
p4689
sI762
S''
sI763
S'        # If we need to extend a template.'
p4690
sI764
S'        if extend:'
p4691
sI765
S'            self.extend(extend)'
p4692
sI766
S''
sI767
S'# We need this for integration with gluon'
p4693
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4694
sg84
g188
sa(dp4695
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4696
sg62
(dp4697
S'super_nodes'
p4698
S'[]'
p4699
sS'_super_nodes'
p4700
g114
ssg72
I494
sg73
(dp4701
I489
S'                           name=filename,'
p4702
sI490
S'                           context=self.context,'
p4703
sI491
S'                           path=self.path,'
p4704
sI492
S'                           writer=self.writer,'
p4705
sI493
S'                           delimiters=self.delimiters,'
p4706
sI494
S'                           _super_nodes=super_nodes)'
p4707
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4708
sI497
S'        # template.'
p4709
sI498
S'        buf = BlockNode('
p4710
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4711
sg84
g206
sa(dp4712
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4713
sg62
(dp4714
S'text'
p4715
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4716
sS'self'
p4717
S'<gluon.template.TemplateParser object>'
p4718
sS'self.parse'
p4719
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4720
ssg72
I319
sg73
(dp4721
I320
S''
sI321
S'    def to_string(self):'
p4722
sI322
S'        """'
p4723
sI323
S'        Returns the parsed template with correct indentation.'
p4724
sI314
S'        # This variable will hold a reference to every block'
p4725
sI315
S'        # that we come across in this template'
p4726
sI316
S'        self.blocks = {}'
p4727
sI317
S''
sI318
S'        # Begin parsing.'
p4728
sI319
S'        self.parse(text)'
p4729
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4730
sg84
g48
sa(dp4731
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4732
sg62
(dp4733
S'self'
p4734
S'<gluon.template.TemplateParser object>'
p4735
sS'extend'
p4736
S'"\'default/index.html\'"'
p4737
sS'self.extend'
p4738
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4739
ssg72
I765
sg73
(dp4740
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4741
sI761
S'            self.child_super_nodes.remove(node)'
p4742
sI762
S''
sI763
S'        # If we need to extend a template.'
p4743
sI764
S'        if extend:'
p4744
sI765
S'            self.extend(extend)'
p4745
sI766
S''
sI767
S'# We need this for integration with gluon'
p4746
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4747
sg84
g188
sa(dp4748
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4749
sg62
(dp4750
S'super_nodes'
p4751
S'[]'
p4752
sS'_super_nodes'
p4753
g114
ssg72
I494
sg73
(dp4754
I489
S'                           name=filename,'
p4755
sI490
S'                           context=self.context,'
p4756
sI491
S'                           path=self.path,'
p4757
sI492
S'                           writer=self.writer,'
p4758
sI493
S'                           delimiters=self.delimiters,'
p4759
sI494
S'                           _super_nodes=super_nodes)'
p4760
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4761
sI497
S'        # template.'
p4762
sI498
S'        buf = BlockNode('
p4763
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4764
sg84
g206
sa(dp4765
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4766
sg62
(dp4767
S'text'
p4768
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4769
sS'self'
p4770
S'<gluon.template.TemplateParser object>'
p4771
sS'self.parse'
p4772
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4773
ssg72
I319
sg73
(dp4774
I320
S''
sI321
S'    def to_string(self):'
p4775
sI322
S'        """'
p4776
sI323
S'        Returns the parsed template with correct indentation.'
p4777
sI314
S'        # This variable will hold a reference to every block'
p4778
sI315
S'        # that we come across in this template'
p4779
sI316
S'        self.blocks = {}'
p4780
sI317
S''
sI318
S'        # Begin parsing.'
p4781
sI319
S'        self.parse(text)'
p4782
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4783
sg84
g48
sa(dp4784
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4785
sg62
(dp4786
S'self'
p4787
S'<gluon.template.TemplateParser object>'
p4788
sS'extend'
p4789
S'"\'default/index.html\'"'
p4790
sS'self.extend'
p4791
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4792
ssg72
I765
sg73
(dp4793
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4794
sI761
S'            self.child_super_nodes.remove(node)'
p4795
sI762
S''
sI763
S'        # If we need to extend a template.'
p4796
sI764
S'        if extend:'
p4797
sI765
S'            self.extend(extend)'
p4798
sI766
S''
sI767
S'# We need this for integration with gluon'
p4799
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4800
sg84
g188
sa(dp4801
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4802
sg62
(dp4803
S'super_nodes'
p4804
S'[]'
p4805
sS'_super_nodes'
p4806
g114
ssg72
I494
sg73
(dp4807
I489
S'                           name=filename,'
p4808
sI490
S'                           context=self.context,'
p4809
sI491
S'                           path=self.path,'
p4810
sI492
S'                           writer=self.writer,'
p4811
sI493
S'                           delimiters=self.delimiters,'
p4812
sI494
S'                           _super_nodes=super_nodes)'
p4813
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4814
sI497
S'        # template.'
p4815
sI498
S'        buf = BlockNode('
p4816
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4817
sg84
g206
sa(dp4818
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4819
sg62
(dp4820
S'text'
p4821
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4822
sS'self'
p4823
S'<gluon.template.TemplateParser object>'
p4824
sS'self.parse'
p4825
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4826
ssg72
I319
sg73
(dp4827
I320
S''
sI321
S'    def to_string(self):'
p4828
sI322
S'        """'
p4829
sI323
S'        Returns the parsed template with correct indentation.'
p4830
sI314
S'        # This variable will hold a reference to every block'
p4831
sI315
S'        # that we come across in this template'
p4832
sI316
S'        self.blocks = {}'
p4833
sI317
S''
sI318
S'        # Begin parsing.'
p4834
sI319
S'        self.parse(text)'
p4835
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4836
sg84
g48
sa(dp4837
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4838
sg62
(dp4839
S'self'
p4840
S'<gluon.template.TemplateParser object>'
p4841
sS'extend'
p4842
S'"\'default/index.html\'"'
p4843
sS'self.extend'
p4844
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4845
ssg72
I765
sg73
(dp4846
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4847
sI761
S'            self.child_super_nodes.remove(node)'
p4848
sI762
S''
sI763
S'        # If we need to extend a template.'
p4849
sI764
S'        if extend:'
p4850
sI765
S'            self.extend(extend)'
p4851
sI766
S''
sI767
S'# We need this for integration with gluon'
p4852
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4853
sg84
g188
sa(dp4854
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4855
sg62
(dp4856
S'super_nodes'
p4857
S'[]'
p4858
sS'_super_nodes'
p4859
g114
ssg72
I494
sg73
(dp4860
I489
S'                           name=filename,'
p4861
sI490
S'                           context=self.context,'
p4862
sI491
S'                           path=self.path,'
p4863
sI492
S'                           writer=self.writer,'
p4864
sI493
S'                           delimiters=self.delimiters,'
p4865
sI494
S'                           _super_nodes=super_nodes)'
p4866
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4867
sI497
S'        # template.'
p4868
sI498
S'        buf = BlockNode('
p4869
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4870
sg84
g206
sa(dp4871
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4872
sg62
(dp4873
S'text'
p4874
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4875
sS'self'
p4876
S'<gluon.template.TemplateParser object>'
p4877
sS'self.parse'
p4878
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4879
ssg72
I319
sg73
(dp4880
I320
S''
sI321
S'    def to_string(self):'
p4881
sI322
S'        """'
p4882
sI323
S'        Returns the parsed template with correct indentation.'
p4883
sI314
S'        # This variable will hold a reference to every block'
p4884
sI315
S'        # that we come across in this template'
p4885
sI316
S'        self.blocks = {}'
p4886
sI317
S''
sI318
S'        # Begin parsing.'
p4887
sI319
S'        self.parse(text)'
p4888
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4889
sg84
g48
sa(dp4890
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4891
sg62
(dp4892
S'self'
p4893
S'<gluon.template.TemplateParser object>'
p4894
sS'extend'
p4895
S'"\'default/index.html\'"'
p4896
sS'self.extend'
p4897
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4898
ssg72
I765
sg73
(dp4899
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4900
sI761
S'            self.child_super_nodes.remove(node)'
p4901
sI762
S''
sI763
S'        # If we need to extend a template.'
p4902
sI764
S'        if extend:'
p4903
sI765
S'            self.extend(extend)'
p4904
sI766
S''
sI767
S'# We need this for integration with gluon'
p4905
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4906
sg84
g188
sa(dp4907
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4908
sg62
(dp4909
S'super_nodes'
p4910
S'[]'
p4911
sS'_super_nodes'
p4912
g114
ssg72
I494
sg73
(dp4913
I489
S'                           name=filename,'
p4914
sI490
S'                           context=self.context,'
p4915
sI491
S'                           path=self.path,'
p4916
sI492
S'                           writer=self.writer,'
p4917
sI493
S'                           delimiters=self.delimiters,'
p4918
sI494
S'                           _super_nodes=super_nodes)'
p4919
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4920
sI497
S'        # template.'
p4921
sI498
S'        buf = BlockNode('
p4922
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4923
sg84
g206
sa(dp4924
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4925
sg62
(dp4926
S'text'
p4927
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4928
sS'self'
p4929
S'<gluon.template.TemplateParser object>'
p4930
sS'self.parse'
p4931
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4932
ssg72
I319
sg73
(dp4933
I320
S''
sI321
S'    def to_string(self):'
p4934
sI322
S'        """'
p4935
sI323
S'        Returns the parsed template with correct indentation.'
p4936
sI314
S'        # This variable will hold a reference to every block'
p4937
sI315
S'        # that we come across in this template'
p4938
sI316
S'        self.blocks = {}'
p4939
sI317
S''
sI318
S'        # Begin parsing.'
p4940
sI319
S'        self.parse(text)'
p4941
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4942
sg84
g48
sa(dp4943
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4944
sg62
(dp4945
S'self'
p4946
S'<gluon.template.TemplateParser object>'
p4947
sS'extend'
p4948
S'"\'default/index.html\'"'
p4949
sS'self.extend'
p4950
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4951
ssg72
I765
sg73
(dp4952
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4953
sI761
S'            self.child_super_nodes.remove(node)'
p4954
sI762
S''
sI763
S'        # If we need to extend a template.'
p4955
sI764
S'        if extend:'
p4956
sI765
S'            self.extend(extend)'
p4957
sI766
S''
sI767
S'# We need this for integration with gluon'
p4958
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p4959
sg84
g188
sa(dp4960
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4961
sg62
(dp4962
S'super_nodes'
p4963
S'[]'
p4964
sS'_super_nodes'
p4965
g114
ssg72
I494
sg73
(dp4966
I489
S'                           name=filename,'
p4967
sI490
S'                           context=self.context,'
p4968
sI491
S'                           path=self.path,'
p4969
sI492
S'                           writer=self.writer,'
p4970
sI493
S'                           delimiters=self.delimiters,'
p4971
sI494
S'                           _super_nodes=super_nodes)'
p4972
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p4973
sI497
S'        # template.'
p4974
sI498
S'        buf = BlockNode('
p4975
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p4976
sg84
g206
sa(dp4977
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4978
sg62
(dp4979
S'text'
p4980
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p4981
sS'self'
p4982
S'<gluon.template.TemplateParser object>'
p4983
sS'self.parse'
p4984
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4985
ssg72
I319
sg73
(dp4986
I320
S''
sI321
S'    def to_string(self):'
p4987
sI322
S'        """'
p4988
sI323
S'        Returns the parsed template with correct indentation.'
p4989
sI314
S'        # This variable will hold a reference to every block'
p4990
sI315
S'        # that we come across in this template'
p4991
sI316
S'        self.blocks = {}'
p4992
sI317
S''
sI318
S'        # Begin parsing.'
p4993
sI319
S'        self.parse(text)'
p4994
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4995
sg84
g48
sa(dp4996
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p4997
sg62
(dp4998
S'self'
p4999
S'<gluon.template.TemplateParser object>'
p5000
sS'extend'
p5001
S'"\'default/index.html\'"'
p5002
sS'self.extend'
p5003
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5004
ssg72
I765
sg73
(dp5005
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5006
sI761
S'            self.child_super_nodes.remove(node)'
p5007
sI762
S''
sI763
S'        # If we need to extend a template.'
p5008
sI764
S'        if extend:'
p5009
sI765
S'            self.extend(extend)'
p5010
sI766
S''
sI767
S'# We need this for integration with gluon'
p5011
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5012
sg84
g188
sa(dp5013
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5014
sg62
(dp5015
S'super_nodes'
p5016
S'[]'
p5017
sS'_super_nodes'
p5018
g114
ssg72
I494
sg73
(dp5019
I489
S'                           name=filename,'
p5020
sI490
S'                           context=self.context,'
p5021
sI491
S'                           path=self.path,'
p5022
sI492
S'                           writer=self.writer,'
p5023
sI493
S'                           delimiters=self.delimiters,'
p5024
sI494
S'                           _super_nodes=super_nodes)'
p5025
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5026
sI497
S'        # template.'
p5027
sI498
S'        buf = BlockNode('
p5028
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5029
sg84
g206
sa(dp5030
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5031
sg62
(dp5032
S'text'
p5033
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5034
sS'self'
p5035
S'<gluon.template.TemplateParser object>'
p5036
sS'self.parse'
p5037
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5038
ssg72
I319
sg73
(dp5039
I320
S''
sI321
S'    def to_string(self):'
p5040
sI322
S'        """'
p5041
sI323
S'        Returns the parsed template with correct indentation.'
p5042
sI314
S'        # This variable will hold a reference to every block'
p5043
sI315
S'        # that we come across in this template'
p5044
sI316
S'        self.blocks = {}'
p5045
sI317
S''
sI318
S'        # Begin parsing.'
p5046
sI319
S'        self.parse(text)'
p5047
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5048
sg84
g48
sa(dp5049
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5050
sg62
(dp5051
S'self'
p5052
S'<gluon.template.TemplateParser object>'
p5053
sS'extend'
p5054
S'"\'default/index.html\'"'
p5055
sS'self.extend'
p5056
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5057
ssg72
I765
sg73
(dp5058
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5059
sI761
S'            self.child_super_nodes.remove(node)'
p5060
sI762
S''
sI763
S'        # If we need to extend a template.'
p5061
sI764
S'        if extend:'
p5062
sI765
S'            self.extend(extend)'
p5063
sI766
S''
sI767
S'# We need this for integration with gluon'
p5064
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5065
sg84
g188
sa(dp5066
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5067
sg62
(dp5068
S'super_nodes'
p5069
S'[]'
p5070
sS'_super_nodes'
p5071
g114
ssg72
I494
sg73
(dp5072
I489
S'                           name=filename,'
p5073
sI490
S'                           context=self.context,'
p5074
sI491
S'                           path=self.path,'
p5075
sI492
S'                           writer=self.writer,'
p5076
sI493
S'                           delimiters=self.delimiters,'
p5077
sI494
S'                           _super_nodes=super_nodes)'
p5078
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5079
sI497
S'        # template.'
p5080
sI498
S'        buf = BlockNode('
p5081
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5082
sg84
g206
sa(dp5083
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5084
sg62
(dp5085
S'text'
p5086
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5087
sS'self'
p5088
S'<gluon.template.TemplateParser object>'
p5089
sS'self.parse'
p5090
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5091
ssg72
I319
sg73
(dp5092
I320
S''
sI321
S'    def to_string(self):'
p5093
sI322
S'        """'
p5094
sI323
S'        Returns the parsed template with correct indentation.'
p5095
sI314
S'        # This variable will hold a reference to every block'
p5096
sI315
S'        # that we come across in this template'
p5097
sI316
S'        self.blocks = {}'
p5098
sI317
S''
sI318
S'        # Begin parsing.'
p5099
sI319
S'        self.parse(text)'
p5100
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5101
sg84
g48
sa(dp5102
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5103
sg62
(dp5104
S'self'
p5105
S'<gluon.template.TemplateParser object>'
p5106
sS'extend'
p5107
S'"\'default/index.html\'"'
p5108
sS'self.extend'
p5109
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5110
ssg72
I765
sg73
(dp5111
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5112
sI761
S'            self.child_super_nodes.remove(node)'
p5113
sI762
S''
sI763
S'        # If we need to extend a template.'
p5114
sI764
S'        if extend:'
p5115
sI765
S'            self.extend(extend)'
p5116
sI766
S''
sI767
S'# We need this for integration with gluon'
p5117
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5118
sg84
g188
sa(dp5119
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5120
sg62
(dp5121
S'super_nodes'
p5122
S'[]'
p5123
sS'_super_nodes'
p5124
g114
ssg72
I494
sg73
(dp5125
I489
S'                           name=filename,'
p5126
sI490
S'                           context=self.context,'
p5127
sI491
S'                           path=self.path,'
p5128
sI492
S'                           writer=self.writer,'
p5129
sI493
S'                           delimiters=self.delimiters,'
p5130
sI494
S'                           _super_nodes=super_nodes)'
p5131
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5132
sI497
S'        # template.'
p5133
sI498
S'        buf = BlockNode('
p5134
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5135
sg84
g206
sa(dp5136
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5137
sg62
(dp5138
S'text'
p5139
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5140
sS'self'
p5141
S'<gluon.template.TemplateParser object>'
p5142
sS'self.parse'
p5143
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5144
ssg72
I319
sg73
(dp5145
I320
S''
sI321
S'    def to_string(self):'
p5146
sI322
S'        """'
p5147
sI323
S'        Returns the parsed template with correct indentation.'
p5148
sI314
S'        # This variable will hold a reference to every block'
p5149
sI315
S'        # that we come across in this template'
p5150
sI316
S'        self.blocks = {}'
p5151
sI317
S''
sI318
S'        # Begin parsing.'
p5152
sI319
S'        self.parse(text)'
p5153
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5154
sg84
g48
sa(dp5155
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5156
sg62
(dp5157
S'self'
p5158
S'<gluon.template.TemplateParser object>'
p5159
sS'extend'
p5160
S'"\'default/index.html\'"'
p5161
sS'self.extend'
p5162
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5163
ssg72
I765
sg73
(dp5164
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5165
sI761
S'            self.child_super_nodes.remove(node)'
p5166
sI762
S''
sI763
S'        # If we need to extend a template.'
p5167
sI764
S'        if extend:'
p5168
sI765
S'            self.extend(extend)'
p5169
sI766
S''
sI767
S'# We need this for integration with gluon'
p5170
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5171
sg84
g188
sa(dp5172
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5173
sg62
(dp5174
S'super_nodes'
p5175
S'[]'
p5176
sS'_super_nodes'
p5177
g114
ssg72
I494
sg73
(dp5178
I489
S'                           name=filename,'
p5179
sI490
S'                           context=self.context,'
p5180
sI491
S'                           path=self.path,'
p5181
sI492
S'                           writer=self.writer,'
p5182
sI493
S'                           delimiters=self.delimiters,'
p5183
sI494
S'                           _super_nodes=super_nodes)'
p5184
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5185
sI497
S'        # template.'
p5186
sI498
S'        buf = BlockNode('
p5187
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5188
sg84
g206
sa(dp5189
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5190
sg62
(dp5191
S'text'
p5192
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5193
sS'self'
p5194
S'<gluon.template.TemplateParser object>'
p5195
sS'self.parse'
p5196
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5197
ssg72
I319
sg73
(dp5198
I320
S''
sI321
S'    def to_string(self):'
p5199
sI322
S'        """'
p5200
sI323
S'        Returns the parsed template with correct indentation.'
p5201
sI314
S'        # This variable will hold a reference to every block'
p5202
sI315
S'        # that we come across in this template'
p5203
sI316
S'        self.blocks = {}'
p5204
sI317
S''
sI318
S'        # Begin parsing.'
p5205
sI319
S'        self.parse(text)'
p5206
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5207
sg84
g48
sa(dp5208
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5209
sg62
(dp5210
S'self'
p5211
S'<gluon.template.TemplateParser object>'
p5212
sS'extend'
p5213
S'"\'default/index.html\'"'
p5214
sS'self.extend'
p5215
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5216
ssg72
I765
sg73
(dp5217
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5218
sI761
S'            self.child_super_nodes.remove(node)'
p5219
sI762
S''
sI763
S'        # If we need to extend a template.'
p5220
sI764
S'        if extend:'
p5221
sI765
S'            self.extend(extend)'
p5222
sI766
S''
sI767
S'# We need this for integration with gluon'
p5223
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5224
sg84
g188
sa(dp5225
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5226
sg62
(dp5227
S'super_nodes'
p5228
S'[]'
p5229
sS'_super_nodes'
p5230
g114
ssg72
I494
sg73
(dp5231
I489
S'                           name=filename,'
p5232
sI490
S'                           context=self.context,'
p5233
sI491
S'                           path=self.path,'
p5234
sI492
S'                           writer=self.writer,'
p5235
sI493
S'                           delimiters=self.delimiters,'
p5236
sI494
S'                           _super_nodes=super_nodes)'
p5237
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5238
sI497
S'        # template.'
p5239
sI498
S'        buf = BlockNode('
p5240
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5241
sg84
g206
sa(dp5242
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5243
sg62
(dp5244
S'text'
p5245
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5246
sS'self'
p5247
S'<gluon.template.TemplateParser object>'
p5248
sS'self.parse'
p5249
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5250
ssg72
I319
sg73
(dp5251
I320
S''
sI321
S'    def to_string(self):'
p5252
sI322
S'        """'
p5253
sI323
S'        Returns the parsed template with correct indentation.'
p5254
sI314
S'        # This variable will hold a reference to every block'
p5255
sI315
S'        # that we come across in this template'
p5256
sI316
S'        self.blocks = {}'
p5257
sI317
S''
sI318
S'        # Begin parsing.'
p5258
sI319
S'        self.parse(text)'
p5259
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5260
sg84
g48
sa(dp5261
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5262
sg62
(dp5263
S'self'
p5264
S'<gluon.template.TemplateParser object>'
p5265
sS'extend'
p5266
S'"\'default/index.html\'"'
p5267
sS'self.extend'
p5268
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5269
ssg72
I765
sg73
(dp5270
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5271
sI761
S'            self.child_super_nodes.remove(node)'
p5272
sI762
S''
sI763
S'        # If we need to extend a template.'
p5273
sI764
S'        if extend:'
p5274
sI765
S'            self.extend(extend)'
p5275
sI766
S''
sI767
S'# We need this for integration with gluon'
p5276
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5277
sg84
g188
sa(dp5278
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5279
sg62
(dp5280
S'super_nodes'
p5281
S'[]'
p5282
sS'_super_nodes'
p5283
g114
ssg72
I494
sg73
(dp5284
I489
S'                           name=filename,'
p5285
sI490
S'                           context=self.context,'
p5286
sI491
S'                           path=self.path,'
p5287
sI492
S'                           writer=self.writer,'
p5288
sI493
S'                           delimiters=self.delimiters,'
p5289
sI494
S'                           _super_nodes=super_nodes)'
p5290
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5291
sI497
S'        # template.'
p5292
sI498
S'        buf = BlockNode('
p5293
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5294
sg84
g206
sa(dp5295
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5296
sg62
(dp5297
S'text'
p5298
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5299
sS'self'
p5300
S'<gluon.template.TemplateParser object>'
p5301
sS'self.parse'
p5302
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5303
ssg72
I319
sg73
(dp5304
I320
S''
sI321
S'    def to_string(self):'
p5305
sI322
S'        """'
p5306
sI323
S'        Returns the parsed template with correct indentation.'
p5307
sI314
S'        # This variable will hold a reference to every block'
p5308
sI315
S'        # that we come across in this template'
p5309
sI316
S'        self.blocks = {}'
p5310
sI317
S''
sI318
S'        # Begin parsing.'
p5311
sI319
S'        self.parse(text)'
p5312
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5313
sg84
g48
sa(dp5314
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5315
sg62
(dp5316
S'self'
p5317
S'<gluon.template.TemplateParser object>'
p5318
sS'extend'
p5319
S'"\'default/index.html\'"'
p5320
sS'self.extend'
p5321
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5322
ssg72
I765
sg73
(dp5323
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5324
sI761
S'            self.child_super_nodes.remove(node)'
p5325
sI762
S''
sI763
S'        # If we need to extend a template.'
p5326
sI764
S'        if extend:'
p5327
sI765
S'            self.extend(extend)'
p5328
sI766
S''
sI767
S'# We need this for integration with gluon'
p5329
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5330
sg84
g188
sa(dp5331
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5332
sg62
(dp5333
S'super_nodes'
p5334
S'[]'
p5335
sS'_super_nodes'
p5336
g114
ssg72
I494
sg73
(dp5337
I489
S'                           name=filename,'
p5338
sI490
S'                           context=self.context,'
p5339
sI491
S'                           path=self.path,'
p5340
sI492
S'                           writer=self.writer,'
p5341
sI493
S'                           delimiters=self.delimiters,'
p5342
sI494
S'                           _super_nodes=super_nodes)'
p5343
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5344
sI497
S'        # template.'
p5345
sI498
S'        buf = BlockNode('
p5346
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5347
sg84
g206
sa(dp5348
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5349
sg62
(dp5350
S'text'
p5351
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5352
sS'self'
p5353
S'<gluon.template.TemplateParser object>'
p5354
sS'self.parse'
p5355
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5356
ssg72
I319
sg73
(dp5357
I320
S''
sI321
S'    def to_string(self):'
p5358
sI322
S'        """'
p5359
sI323
S'        Returns the parsed template with correct indentation.'
p5360
sI314
S'        # This variable will hold a reference to every block'
p5361
sI315
S'        # that we come across in this template'
p5362
sI316
S'        self.blocks = {}'
p5363
sI317
S''
sI318
S'        # Begin parsing.'
p5364
sI319
S'        self.parse(text)'
p5365
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5366
sg84
g48
sa(dp5367
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5368
sg62
(dp5369
S'self'
p5370
S'<gluon.template.TemplateParser object>'
p5371
sS'extend'
p5372
S'"\'default/index.html\'"'
p5373
sS'self.extend'
p5374
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5375
ssg72
I765
sg73
(dp5376
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5377
sI761
S'            self.child_super_nodes.remove(node)'
p5378
sI762
S''
sI763
S'        # If we need to extend a template.'
p5379
sI764
S'        if extend:'
p5380
sI765
S'            self.extend(extend)'
p5381
sI766
S''
sI767
S'# We need this for integration with gluon'
p5382
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5383
sg84
g188
sa(dp5384
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5385
sg62
(dp5386
S'super_nodes'
p5387
S'[]'
p5388
sS'_super_nodes'
p5389
g114
ssg72
I494
sg73
(dp5390
I489
S'                           name=filename,'
p5391
sI490
S'                           context=self.context,'
p5392
sI491
S'                           path=self.path,'
p5393
sI492
S'                           writer=self.writer,'
p5394
sI493
S'                           delimiters=self.delimiters,'
p5395
sI494
S'                           _super_nodes=super_nodes)'
p5396
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5397
sI497
S'        # template.'
p5398
sI498
S'        buf = BlockNode('
p5399
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5400
sg84
g206
sa(dp5401
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5402
sg62
(dp5403
S'text'
p5404
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5405
sS'self'
p5406
S'<gluon.template.TemplateParser object>'
p5407
sS'self.parse'
p5408
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5409
ssg72
I319
sg73
(dp5410
I320
S''
sI321
S'    def to_string(self):'
p5411
sI322
S'        """'
p5412
sI323
S'        Returns the parsed template with correct indentation.'
p5413
sI314
S'        # This variable will hold a reference to every block'
p5414
sI315
S'        # that we come across in this template'
p5415
sI316
S'        self.blocks = {}'
p5416
sI317
S''
sI318
S'        # Begin parsing.'
p5417
sI319
S'        self.parse(text)'
p5418
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5419
sg84
g48
sa(dp5420
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5421
sg62
(dp5422
S'self'
p5423
S'<gluon.template.TemplateParser object>'
p5424
sS'extend'
p5425
S'"\'default/index.html\'"'
p5426
sS'self.extend'
p5427
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5428
ssg72
I765
sg73
(dp5429
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5430
sI761
S'            self.child_super_nodes.remove(node)'
p5431
sI762
S''
sI763
S'        # If we need to extend a template.'
p5432
sI764
S'        if extend:'
p5433
sI765
S'            self.extend(extend)'
p5434
sI766
S''
sI767
S'# We need this for integration with gluon'
p5435
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5436
sg84
g188
sa(dp5437
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5438
sg62
(dp5439
S'super_nodes'
p5440
S'[]'
p5441
sS'_super_nodes'
p5442
g114
ssg72
I494
sg73
(dp5443
I489
S'                           name=filename,'
p5444
sI490
S'                           context=self.context,'
p5445
sI491
S'                           path=self.path,'
p5446
sI492
S'                           writer=self.writer,'
p5447
sI493
S'                           delimiters=self.delimiters,'
p5448
sI494
S'                           _super_nodes=super_nodes)'
p5449
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5450
sI497
S'        # template.'
p5451
sI498
S'        buf = BlockNode('
p5452
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5453
sg84
g206
sa(dp5454
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5455
sg62
(dp5456
S'text'
p5457
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5458
sS'self'
p5459
S'<gluon.template.TemplateParser object>'
p5460
sS'self.parse'
p5461
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5462
ssg72
I319
sg73
(dp5463
I320
S''
sI321
S'    def to_string(self):'
p5464
sI322
S'        """'
p5465
sI323
S'        Returns the parsed template with correct indentation.'
p5466
sI314
S'        # This variable will hold a reference to every block'
p5467
sI315
S'        # that we come across in this template'
p5468
sI316
S'        self.blocks = {}'
p5469
sI317
S''
sI318
S'        # Begin parsing.'
p5470
sI319
S'        self.parse(text)'
p5471
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5472
sg84
g48
sa(dp5473
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5474
sg62
(dp5475
S'self'
p5476
S'<gluon.template.TemplateParser object>'
p5477
sS'extend'
p5478
S'"\'default/index.html\'"'
p5479
sS'self.extend'
p5480
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5481
ssg72
I765
sg73
(dp5482
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5483
sI761
S'            self.child_super_nodes.remove(node)'
p5484
sI762
S''
sI763
S'        # If we need to extend a template.'
p5485
sI764
S'        if extend:'
p5486
sI765
S'            self.extend(extend)'
p5487
sI766
S''
sI767
S'# We need this for integration with gluon'
p5488
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5489
sg84
g188
sa(dp5490
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5491
sg62
(dp5492
S'super_nodes'
p5493
S'[]'
p5494
sS'_super_nodes'
p5495
g114
ssg72
I494
sg73
(dp5496
I489
S'                           name=filename,'
p5497
sI490
S'                           context=self.context,'
p5498
sI491
S'                           path=self.path,'
p5499
sI492
S'                           writer=self.writer,'
p5500
sI493
S'                           delimiters=self.delimiters,'
p5501
sI494
S'                           _super_nodes=super_nodes)'
p5502
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5503
sI497
S'        # template.'
p5504
sI498
S'        buf = BlockNode('
p5505
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5506
sg84
g206
sa(dp5507
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5508
sg62
(dp5509
S'text'
p5510
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5511
sS'self'
p5512
S'<gluon.template.TemplateParser object>'
p5513
sS'self.parse'
p5514
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5515
ssg72
I319
sg73
(dp5516
I320
S''
sI321
S'    def to_string(self):'
p5517
sI322
S'        """'
p5518
sI323
S'        Returns the parsed template with correct indentation.'
p5519
sI314
S'        # This variable will hold a reference to every block'
p5520
sI315
S'        # that we come across in this template'
p5521
sI316
S'        self.blocks = {}'
p5522
sI317
S''
sI318
S'        # Begin parsing.'
p5523
sI319
S'        self.parse(text)'
p5524
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5525
sg84
g48
sa(dp5526
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5527
sg62
(dp5528
S'self'
p5529
S'<gluon.template.TemplateParser object>'
p5530
sS'extend'
p5531
S'"\'default/index.html\'"'
p5532
sS'self.extend'
p5533
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5534
ssg72
I765
sg73
(dp5535
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5536
sI761
S'            self.child_super_nodes.remove(node)'
p5537
sI762
S''
sI763
S'        # If we need to extend a template.'
p5538
sI764
S'        if extend:'
p5539
sI765
S'            self.extend(extend)'
p5540
sI766
S''
sI767
S'# We need this for integration with gluon'
p5541
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5542
sg84
g188
sa(dp5543
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5544
sg62
(dp5545
S'super_nodes'
p5546
S'[]'
p5547
sS'_super_nodes'
p5548
g114
ssg72
I494
sg73
(dp5549
I489
S'                           name=filename,'
p5550
sI490
S'                           context=self.context,'
p5551
sI491
S'                           path=self.path,'
p5552
sI492
S'                           writer=self.writer,'
p5553
sI493
S'                           delimiters=self.delimiters,'
p5554
sI494
S'                           _super_nodes=super_nodes)'
p5555
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5556
sI497
S'        # template.'
p5557
sI498
S'        buf = BlockNode('
p5558
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5559
sg84
g206
sa(dp5560
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5561
sg62
(dp5562
S'text'
p5563
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5564
sS'self'
p5565
S'<gluon.template.TemplateParser object>'
p5566
sS'self.parse'
p5567
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5568
ssg72
I319
sg73
(dp5569
I320
S''
sI321
S'    def to_string(self):'
p5570
sI322
S'        """'
p5571
sI323
S'        Returns the parsed template with correct indentation.'
p5572
sI314
S'        # This variable will hold a reference to every block'
p5573
sI315
S'        # that we come across in this template'
p5574
sI316
S'        self.blocks = {}'
p5575
sI317
S''
sI318
S'        # Begin parsing.'
p5576
sI319
S'        self.parse(text)'
p5577
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5578
sg84
g48
sa(dp5579
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5580
sg62
(dp5581
S'self'
p5582
S'<gluon.template.TemplateParser object>'
p5583
sS'extend'
p5584
S'"\'default/index.html\'"'
p5585
sS'self.extend'
p5586
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5587
ssg72
I765
sg73
(dp5588
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5589
sI761
S'            self.child_super_nodes.remove(node)'
p5590
sI762
S''
sI763
S'        # If we need to extend a template.'
p5591
sI764
S'        if extend:'
p5592
sI765
S'            self.extend(extend)'
p5593
sI766
S''
sI767
S'# We need this for integration with gluon'
p5594
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5595
sg84
g188
sa(dp5596
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5597
sg62
(dp5598
S'super_nodes'
p5599
S'[]'
p5600
sS'_super_nodes'
p5601
g114
ssg72
I494
sg73
(dp5602
I489
S'                           name=filename,'
p5603
sI490
S'                           context=self.context,'
p5604
sI491
S'                           path=self.path,'
p5605
sI492
S'                           writer=self.writer,'
p5606
sI493
S'                           delimiters=self.delimiters,'
p5607
sI494
S'                           _super_nodes=super_nodes)'
p5608
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5609
sI497
S'        # template.'
p5610
sI498
S'        buf = BlockNode('
p5611
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5612
sg84
g206
sa(dp5613
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5614
sg62
(dp5615
S'text'
p5616
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5617
sS'self'
p5618
S'<gluon.template.TemplateParser object>'
p5619
sS'self.parse'
p5620
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5621
ssg72
I319
sg73
(dp5622
I320
S''
sI321
S'    def to_string(self):'
p5623
sI322
S'        """'
p5624
sI323
S'        Returns the parsed template with correct indentation.'
p5625
sI314
S'        # This variable will hold a reference to every block'
p5626
sI315
S'        # that we come across in this template'
p5627
sI316
S'        self.blocks = {}'
p5628
sI317
S''
sI318
S'        # Begin parsing.'
p5629
sI319
S'        self.parse(text)'
p5630
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5631
sg84
g48
sa(dp5632
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5633
sg62
(dp5634
S'self'
p5635
S'<gluon.template.TemplateParser object>'
p5636
sS'extend'
p5637
S'"\'default/index.html\'"'
p5638
sS'self.extend'
p5639
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5640
ssg72
I765
sg73
(dp5641
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5642
sI761
S'            self.child_super_nodes.remove(node)'
p5643
sI762
S''
sI763
S'        # If we need to extend a template.'
p5644
sI764
S'        if extend:'
p5645
sI765
S'            self.extend(extend)'
p5646
sI766
S''
sI767
S'# We need this for integration with gluon'
p5647
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5648
sg84
g188
sa(dp5649
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5650
sg62
(dp5651
S'super_nodes'
p5652
S'[]'
p5653
sS'_super_nodes'
p5654
g114
ssg72
I494
sg73
(dp5655
I489
S'                           name=filename,'
p5656
sI490
S'                           context=self.context,'
p5657
sI491
S'                           path=self.path,'
p5658
sI492
S'                           writer=self.writer,'
p5659
sI493
S'                           delimiters=self.delimiters,'
p5660
sI494
S'                           _super_nodes=super_nodes)'
p5661
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5662
sI497
S'        # template.'
p5663
sI498
S'        buf = BlockNode('
p5664
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5665
sg84
g206
sa(dp5666
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5667
sg62
(dp5668
S'text'
p5669
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5670
sS'self'
p5671
S'<gluon.template.TemplateParser object>'
p5672
sS'self.parse'
p5673
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5674
ssg72
I319
sg73
(dp5675
I320
S''
sI321
S'    def to_string(self):'
p5676
sI322
S'        """'
p5677
sI323
S'        Returns the parsed template with correct indentation.'
p5678
sI314
S'        # This variable will hold a reference to every block'
p5679
sI315
S'        # that we come across in this template'
p5680
sI316
S'        self.blocks = {}'
p5681
sI317
S''
sI318
S'        # Begin parsing.'
p5682
sI319
S'        self.parse(text)'
p5683
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5684
sg84
g48
sa(dp5685
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5686
sg62
(dp5687
S'self'
p5688
S'<gluon.template.TemplateParser object>'
p5689
sS'extend'
p5690
S'"\'default/index.html\'"'
p5691
sS'self.extend'
p5692
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5693
ssg72
I765
sg73
(dp5694
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5695
sI761
S'            self.child_super_nodes.remove(node)'
p5696
sI762
S''
sI763
S'        # If we need to extend a template.'
p5697
sI764
S'        if extend:'
p5698
sI765
S'            self.extend(extend)'
p5699
sI766
S''
sI767
S'# We need this for integration with gluon'
p5700
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5701
sg84
g188
sa(dp5702
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5703
sg62
(dp5704
S'super_nodes'
p5705
S'[]'
p5706
sS'_super_nodes'
p5707
g114
ssg72
I494
sg73
(dp5708
I489
S'                           name=filename,'
p5709
sI490
S'                           context=self.context,'
p5710
sI491
S'                           path=self.path,'
p5711
sI492
S'                           writer=self.writer,'
p5712
sI493
S'                           delimiters=self.delimiters,'
p5713
sI494
S'                           _super_nodes=super_nodes)'
p5714
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5715
sI497
S'        # template.'
p5716
sI498
S'        buf = BlockNode('
p5717
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5718
sg84
g206
sa(dp5719
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5720
sg62
(dp5721
S'text'
p5722
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5723
sS'self'
p5724
S'<gluon.template.TemplateParser object>'
p5725
sS'self.parse'
p5726
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5727
ssg72
I319
sg73
(dp5728
I320
S''
sI321
S'    def to_string(self):'
p5729
sI322
S'        """'
p5730
sI323
S'        Returns the parsed template with correct indentation.'
p5731
sI314
S'        # This variable will hold a reference to every block'
p5732
sI315
S'        # that we come across in this template'
p5733
sI316
S'        self.blocks = {}'
p5734
sI317
S''
sI318
S'        # Begin parsing.'
p5735
sI319
S'        self.parse(text)'
p5736
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5737
sg84
g48
sa(dp5738
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5739
sg62
(dp5740
S'self'
p5741
S'<gluon.template.TemplateParser object>'
p5742
sS'extend'
p5743
S'"\'default/index.html\'"'
p5744
sS'self.extend'
p5745
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5746
ssg72
I765
sg73
(dp5747
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5748
sI761
S'            self.child_super_nodes.remove(node)'
p5749
sI762
S''
sI763
S'        # If we need to extend a template.'
p5750
sI764
S'        if extend:'
p5751
sI765
S'            self.extend(extend)'
p5752
sI766
S''
sI767
S'# We need this for integration with gluon'
p5753
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5754
sg84
g188
sa(dp5755
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5756
sg62
(dp5757
S'super_nodes'
p5758
S'[]'
p5759
sS'_super_nodes'
p5760
g114
ssg72
I494
sg73
(dp5761
I489
S'                           name=filename,'
p5762
sI490
S'                           context=self.context,'
p5763
sI491
S'                           path=self.path,'
p5764
sI492
S'                           writer=self.writer,'
p5765
sI493
S'                           delimiters=self.delimiters,'
p5766
sI494
S'                           _super_nodes=super_nodes)'
p5767
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5768
sI497
S'        # template.'
p5769
sI498
S'        buf = BlockNode('
p5770
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5771
sg84
g206
sa(dp5772
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5773
sg62
(dp5774
S'text'
p5775
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5776
sS'self'
p5777
S'<gluon.template.TemplateParser object>'
p5778
sS'self.parse'
p5779
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5780
ssg72
I319
sg73
(dp5781
I320
S''
sI321
S'    def to_string(self):'
p5782
sI322
S'        """'
p5783
sI323
S'        Returns the parsed template with correct indentation.'
p5784
sI314
S'        # This variable will hold a reference to every block'
p5785
sI315
S'        # that we come across in this template'
p5786
sI316
S'        self.blocks = {}'
p5787
sI317
S''
sI318
S'        # Begin parsing.'
p5788
sI319
S'        self.parse(text)'
p5789
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5790
sg84
g48
sa(dp5791
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5792
sg62
(dp5793
S'self'
p5794
S'<gluon.template.TemplateParser object>'
p5795
sS'extend'
p5796
S'"\'default/index.html\'"'
p5797
sS'self.extend'
p5798
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5799
ssg72
I765
sg73
(dp5800
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5801
sI761
S'            self.child_super_nodes.remove(node)'
p5802
sI762
S''
sI763
S'        # If we need to extend a template.'
p5803
sI764
S'        if extend:'
p5804
sI765
S'            self.extend(extend)'
p5805
sI766
S''
sI767
S'# We need this for integration with gluon'
p5806
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5807
sg84
g188
sa(dp5808
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5809
sg62
(dp5810
S'super_nodes'
p5811
S'[]'
p5812
sS'_super_nodes'
p5813
g114
ssg72
I494
sg73
(dp5814
I489
S'                           name=filename,'
p5815
sI490
S'                           context=self.context,'
p5816
sI491
S'                           path=self.path,'
p5817
sI492
S'                           writer=self.writer,'
p5818
sI493
S'                           delimiters=self.delimiters,'
p5819
sI494
S'                           _super_nodes=super_nodes)'
p5820
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5821
sI497
S'        # template.'
p5822
sI498
S'        buf = BlockNode('
p5823
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5824
sg84
g206
sa(dp5825
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5826
sg62
(dp5827
S'text'
p5828
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5829
sS'self'
p5830
S'<gluon.template.TemplateParser object>'
p5831
sS'self.parse'
p5832
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5833
ssg72
I319
sg73
(dp5834
I320
S''
sI321
S'    def to_string(self):'
p5835
sI322
S'        """'
p5836
sI323
S'        Returns the parsed template with correct indentation.'
p5837
sI314
S'        # This variable will hold a reference to every block'
p5838
sI315
S'        # that we come across in this template'
p5839
sI316
S'        self.blocks = {}'
p5840
sI317
S''
sI318
S'        # Begin parsing.'
p5841
sI319
S'        self.parse(text)'
p5842
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5843
sg84
g48
sa(dp5844
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5845
sg62
(dp5846
S'self'
p5847
S'<gluon.template.TemplateParser object>'
p5848
sS'extend'
p5849
S'"\'default/index.html\'"'
p5850
sS'self.extend'
p5851
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5852
ssg72
I765
sg73
(dp5853
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5854
sI761
S'            self.child_super_nodes.remove(node)'
p5855
sI762
S''
sI763
S'        # If we need to extend a template.'
p5856
sI764
S'        if extend:'
p5857
sI765
S'            self.extend(extend)'
p5858
sI766
S''
sI767
S'# We need this for integration with gluon'
p5859
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5860
sg84
g188
sa(dp5861
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5862
sg62
(dp5863
S'super_nodes'
p5864
S'[]'
p5865
sS'_super_nodes'
p5866
g114
ssg72
I494
sg73
(dp5867
I489
S'                           name=filename,'
p5868
sI490
S'                           context=self.context,'
p5869
sI491
S'                           path=self.path,'
p5870
sI492
S'                           writer=self.writer,'
p5871
sI493
S'                           delimiters=self.delimiters,'
p5872
sI494
S'                           _super_nodes=super_nodes)'
p5873
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5874
sI497
S'        # template.'
p5875
sI498
S'        buf = BlockNode('
p5876
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5877
sg84
g206
sa(dp5878
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5879
sg62
(dp5880
S'text'
p5881
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5882
sS'self'
p5883
S'<gluon.template.TemplateParser object>'
p5884
sS'self.parse'
p5885
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5886
ssg72
I319
sg73
(dp5887
I320
S''
sI321
S'    def to_string(self):'
p5888
sI322
S'        """'
p5889
sI323
S'        Returns the parsed template with correct indentation.'
p5890
sI314
S'        # This variable will hold a reference to every block'
p5891
sI315
S'        # that we come across in this template'
p5892
sI316
S'        self.blocks = {}'
p5893
sI317
S''
sI318
S'        # Begin parsing.'
p5894
sI319
S'        self.parse(text)'
p5895
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5896
sg84
g48
sa(dp5897
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5898
sg62
(dp5899
S'self'
p5900
S'<gluon.template.TemplateParser object>'
p5901
sS'extend'
p5902
S'"\'default/index.html\'"'
p5903
sS'self.extend'
p5904
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5905
ssg72
I765
sg73
(dp5906
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5907
sI761
S'            self.child_super_nodes.remove(node)'
p5908
sI762
S''
sI763
S'        # If we need to extend a template.'
p5909
sI764
S'        if extend:'
p5910
sI765
S'            self.extend(extend)'
p5911
sI766
S''
sI767
S'# We need this for integration with gluon'
p5912
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5913
sg84
g188
sa(dp5914
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5915
sg62
(dp5916
S'super_nodes'
p5917
S'[]'
p5918
sS'_super_nodes'
p5919
g114
ssg72
I494
sg73
(dp5920
I489
S'                           name=filename,'
p5921
sI490
S'                           context=self.context,'
p5922
sI491
S'                           path=self.path,'
p5923
sI492
S'                           writer=self.writer,'
p5924
sI493
S'                           delimiters=self.delimiters,'
p5925
sI494
S'                           _super_nodes=super_nodes)'
p5926
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5927
sI497
S'        # template.'
p5928
sI498
S'        buf = BlockNode('
p5929
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5930
sg84
g206
sa(dp5931
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5932
sg62
(dp5933
S'text'
p5934
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5935
sS'self'
p5936
S'<gluon.template.TemplateParser object>'
p5937
sS'self.parse'
p5938
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5939
ssg72
I319
sg73
(dp5940
I320
S''
sI321
S'    def to_string(self):'
p5941
sI322
S'        """'
p5942
sI323
S'        Returns the parsed template with correct indentation.'
p5943
sI314
S'        # This variable will hold a reference to every block'
p5944
sI315
S'        # that we come across in this template'
p5945
sI316
S'        self.blocks = {}'
p5946
sI317
S''
sI318
S'        # Begin parsing.'
p5947
sI319
S'        self.parse(text)'
p5948
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5949
sg84
g48
sa(dp5950
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5951
sg62
(dp5952
S'self'
p5953
S'<gluon.template.TemplateParser object>'
p5954
sS'extend'
p5955
S'"\'default/index.html\'"'
p5956
sS'self.extend'
p5957
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5958
ssg72
I765
sg73
(dp5959
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5960
sI761
S'            self.child_super_nodes.remove(node)'
p5961
sI762
S''
sI763
S'        # If we need to extend a template.'
p5962
sI764
S'        if extend:'
p5963
sI765
S'            self.extend(extend)'
p5964
sI766
S''
sI767
S'# We need this for integration with gluon'
p5965
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p5966
sg84
g188
sa(dp5967
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5968
sg62
(dp5969
S'super_nodes'
p5970
S'[]'
p5971
sS'_super_nodes'
p5972
g114
ssg72
I494
sg73
(dp5973
I489
S'                           name=filename,'
p5974
sI490
S'                           context=self.context,'
p5975
sI491
S'                           path=self.path,'
p5976
sI492
S'                           writer=self.writer,'
p5977
sI493
S'                           delimiters=self.delimiters,'
p5978
sI494
S'                           _super_nodes=super_nodes)'
p5979
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p5980
sI497
S'        # template.'
p5981
sI498
S'        buf = BlockNode('
p5982
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p5983
sg84
g206
sa(dp5984
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p5985
sg62
(dp5986
S'text'
p5987
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p5988
sS'self'
p5989
S'<gluon.template.TemplateParser object>'
p5990
sS'self.parse'
p5991
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5992
ssg72
I319
sg73
(dp5993
I320
S''
sI321
S'    def to_string(self):'
p5994
sI322
S'        """'
p5995
sI323
S'        Returns the parsed template with correct indentation.'
p5996
sI314
S'        # This variable will hold a reference to every block'
p5997
sI315
S'        # that we come across in this template'
p5998
sI316
S'        self.blocks = {}'
p5999
sI317
S''
sI318
S'        # Begin parsing.'
p6000
sI319
S'        self.parse(text)'
p6001
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6002
sg84
g48
sa(dp6003
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6004
sg62
(dp6005
S'self'
p6006
S'<gluon.template.TemplateParser object>'
p6007
sS'extend'
p6008
S'"\'default/index.html\'"'
p6009
sS'self.extend'
p6010
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6011
ssg72
I765
sg73
(dp6012
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6013
sI761
S'            self.child_super_nodes.remove(node)'
p6014
sI762
S''
sI763
S'        # If we need to extend a template.'
p6015
sI764
S'        if extend:'
p6016
sI765
S'            self.extend(extend)'
p6017
sI766
S''
sI767
S'# We need this for integration with gluon'
p6018
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6019
sg84
g188
sa(dp6020
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6021
sg62
(dp6022
S'super_nodes'
p6023
S'[]'
p6024
sS'_super_nodes'
p6025
g114
ssg72
I494
sg73
(dp6026
I489
S'                           name=filename,'
p6027
sI490
S'                           context=self.context,'
p6028
sI491
S'                           path=self.path,'
p6029
sI492
S'                           writer=self.writer,'
p6030
sI493
S'                           delimiters=self.delimiters,'
p6031
sI494
S'                           _super_nodes=super_nodes)'
p6032
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6033
sI497
S'        # template.'
p6034
sI498
S'        buf = BlockNode('
p6035
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6036
sg84
g206
sa(dp6037
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6038
sg62
(dp6039
S'text'
p6040
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6041
sS'self'
p6042
S'<gluon.template.TemplateParser object>'
p6043
sS'self.parse'
p6044
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6045
ssg72
I319
sg73
(dp6046
I320
S''
sI321
S'    def to_string(self):'
p6047
sI322
S'        """'
p6048
sI323
S'        Returns the parsed template with correct indentation.'
p6049
sI314
S'        # This variable will hold a reference to every block'
p6050
sI315
S'        # that we come across in this template'
p6051
sI316
S'        self.blocks = {}'
p6052
sI317
S''
sI318
S'        # Begin parsing.'
p6053
sI319
S'        self.parse(text)'
p6054
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6055
sg84
g48
sa(dp6056
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6057
sg62
(dp6058
S'self'
p6059
S'<gluon.template.TemplateParser object>'
p6060
sS'extend'
p6061
S'"\'default/index.html\'"'
p6062
sS'self.extend'
p6063
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6064
ssg72
I765
sg73
(dp6065
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6066
sI761
S'            self.child_super_nodes.remove(node)'
p6067
sI762
S''
sI763
S'        # If we need to extend a template.'
p6068
sI764
S'        if extend:'
p6069
sI765
S'            self.extend(extend)'
p6070
sI766
S''
sI767
S'# We need this for integration with gluon'
p6071
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6072
sg84
g188
sa(dp6073
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6074
sg62
(dp6075
S'super_nodes'
p6076
S'[]'
p6077
sS'_super_nodes'
p6078
g114
ssg72
I494
sg73
(dp6079
I489
S'                           name=filename,'
p6080
sI490
S'                           context=self.context,'
p6081
sI491
S'                           path=self.path,'
p6082
sI492
S'                           writer=self.writer,'
p6083
sI493
S'                           delimiters=self.delimiters,'
p6084
sI494
S'                           _super_nodes=super_nodes)'
p6085
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6086
sI497
S'        # template.'
p6087
sI498
S'        buf = BlockNode('
p6088
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6089
sg84
g206
sa(dp6090
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6091
sg62
(dp6092
S'text'
p6093
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6094
sS'self'
p6095
S'<gluon.template.TemplateParser object>'
p6096
sS'self.parse'
p6097
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6098
ssg72
I319
sg73
(dp6099
I320
S''
sI321
S'    def to_string(self):'
p6100
sI322
S'        """'
p6101
sI323
S'        Returns the parsed template with correct indentation.'
p6102
sI314
S'        # This variable will hold a reference to every block'
p6103
sI315
S'        # that we come across in this template'
p6104
sI316
S'        self.blocks = {}'
p6105
sI317
S''
sI318
S'        # Begin parsing.'
p6106
sI319
S'        self.parse(text)'
p6107
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6108
sg84
g48
sa(dp6109
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6110
sg62
(dp6111
S'self'
p6112
S'<gluon.template.TemplateParser object>'
p6113
sS'extend'
p6114
S'"\'default/index.html\'"'
p6115
sS'self.extend'
p6116
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6117
ssg72
I765
sg73
(dp6118
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6119
sI761
S'            self.child_super_nodes.remove(node)'
p6120
sI762
S''
sI763
S'        # If we need to extend a template.'
p6121
sI764
S'        if extend:'
p6122
sI765
S'            self.extend(extend)'
p6123
sI766
S''
sI767
S'# We need this for integration with gluon'
p6124
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6125
sg84
g188
sa(dp6126
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6127
sg62
(dp6128
S'super_nodes'
p6129
S'[]'
p6130
sS'_super_nodes'
p6131
g114
ssg72
I494
sg73
(dp6132
I489
S'                           name=filename,'
p6133
sI490
S'                           context=self.context,'
p6134
sI491
S'                           path=self.path,'
p6135
sI492
S'                           writer=self.writer,'
p6136
sI493
S'                           delimiters=self.delimiters,'
p6137
sI494
S'                           _super_nodes=super_nodes)'
p6138
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6139
sI497
S'        # template.'
p6140
sI498
S'        buf = BlockNode('
p6141
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6142
sg84
g206
sa(dp6143
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6144
sg62
(dp6145
S'text'
p6146
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6147
sS'self'
p6148
S'<gluon.template.TemplateParser object>'
p6149
sS'self.parse'
p6150
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6151
ssg72
I319
sg73
(dp6152
I320
S''
sI321
S'    def to_string(self):'
p6153
sI322
S'        """'
p6154
sI323
S'        Returns the parsed template with correct indentation.'
p6155
sI314
S'        # This variable will hold a reference to every block'
p6156
sI315
S'        # that we come across in this template'
p6157
sI316
S'        self.blocks = {}'
p6158
sI317
S''
sI318
S'        # Begin parsing.'
p6159
sI319
S'        self.parse(text)'
p6160
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6161
sg84
g48
sa(dp6162
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6163
sg62
(dp6164
S'self'
p6165
S'<gluon.template.TemplateParser object>'
p6166
sS'extend'
p6167
S'"\'default/index.html\'"'
p6168
sS'self.extend'
p6169
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6170
ssg72
I765
sg73
(dp6171
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6172
sI761
S'            self.child_super_nodes.remove(node)'
p6173
sI762
S''
sI763
S'        # If we need to extend a template.'
p6174
sI764
S'        if extend:'
p6175
sI765
S'            self.extend(extend)'
p6176
sI766
S''
sI767
S'# We need this for integration with gluon'
p6177
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6178
sg84
g188
sa(dp6179
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6180
sg62
(dp6181
S'super_nodes'
p6182
S'[]'
p6183
sS'_super_nodes'
p6184
g114
ssg72
I494
sg73
(dp6185
I489
S'                           name=filename,'
p6186
sI490
S'                           context=self.context,'
p6187
sI491
S'                           path=self.path,'
p6188
sI492
S'                           writer=self.writer,'
p6189
sI493
S'                           delimiters=self.delimiters,'
p6190
sI494
S'                           _super_nodes=super_nodes)'
p6191
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6192
sI497
S'        # template.'
p6193
sI498
S'        buf = BlockNode('
p6194
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6195
sg84
g206
sa(dp6196
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6197
sg62
(dp6198
S'text'
p6199
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6200
sS'self'
p6201
S'<gluon.template.TemplateParser object>'
p6202
sS'self.parse'
p6203
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6204
ssg72
I319
sg73
(dp6205
I320
S''
sI321
S'    def to_string(self):'
p6206
sI322
S'        """'
p6207
sI323
S'        Returns the parsed template with correct indentation.'
p6208
sI314
S'        # This variable will hold a reference to every block'
p6209
sI315
S'        # that we come across in this template'
p6210
sI316
S'        self.blocks = {}'
p6211
sI317
S''
sI318
S'        # Begin parsing.'
p6212
sI319
S'        self.parse(text)'
p6213
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6214
sg84
g48
sa(dp6215
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6216
sg62
(dp6217
S'self'
p6218
S'<gluon.template.TemplateParser object>'
p6219
sS'extend'
p6220
S'"\'default/index.html\'"'
p6221
sS'self.extend'
p6222
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6223
ssg72
I765
sg73
(dp6224
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6225
sI761
S'            self.child_super_nodes.remove(node)'
p6226
sI762
S''
sI763
S'        # If we need to extend a template.'
p6227
sI764
S'        if extend:'
p6228
sI765
S'            self.extend(extend)'
p6229
sI766
S''
sI767
S'# We need this for integration with gluon'
p6230
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6231
sg84
g188
sa(dp6232
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6233
sg62
(dp6234
S'super_nodes'
p6235
S'[]'
p6236
sS'_super_nodes'
p6237
g114
ssg72
I494
sg73
(dp6238
I489
S'                           name=filename,'
p6239
sI490
S'                           context=self.context,'
p6240
sI491
S'                           path=self.path,'
p6241
sI492
S'                           writer=self.writer,'
p6242
sI493
S'                           delimiters=self.delimiters,'
p6243
sI494
S'                           _super_nodes=super_nodes)'
p6244
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6245
sI497
S'        # template.'
p6246
sI498
S'        buf = BlockNode('
p6247
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6248
sg84
g206
sa(dp6249
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6250
sg62
(dp6251
S'text'
p6252
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6253
sS'self'
p6254
S'<gluon.template.TemplateParser object>'
p6255
sS'self.parse'
p6256
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6257
ssg72
I319
sg73
(dp6258
I320
S''
sI321
S'    def to_string(self):'
p6259
sI322
S'        """'
p6260
sI323
S'        Returns the parsed template with correct indentation.'
p6261
sI314
S'        # This variable will hold a reference to every block'
p6262
sI315
S'        # that we come across in this template'
p6263
sI316
S'        self.blocks = {}'
p6264
sI317
S''
sI318
S'        # Begin parsing.'
p6265
sI319
S'        self.parse(text)'
p6266
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6267
sg84
g48
sa(dp6268
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6269
sg62
(dp6270
S'self'
p6271
S'<gluon.template.TemplateParser object>'
p6272
sS'extend'
p6273
S'"\'default/index.html\'"'
p6274
sS'self.extend'
p6275
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6276
ssg72
I765
sg73
(dp6277
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6278
sI761
S'            self.child_super_nodes.remove(node)'
p6279
sI762
S''
sI763
S'        # If we need to extend a template.'
p6280
sI764
S'        if extend:'
p6281
sI765
S'            self.extend(extend)'
p6282
sI766
S''
sI767
S'# We need this for integration with gluon'
p6283
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6284
sg84
g188
sa(dp6285
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6286
sg62
(dp6287
S'super_nodes'
p6288
S'[]'
p6289
sS'_super_nodes'
p6290
g114
ssg72
I494
sg73
(dp6291
I489
S'                           name=filename,'
p6292
sI490
S'                           context=self.context,'
p6293
sI491
S'                           path=self.path,'
p6294
sI492
S'                           writer=self.writer,'
p6295
sI493
S'                           delimiters=self.delimiters,'
p6296
sI494
S'                           _super_nodes=super_nodes)'
p6297
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6298
sI497
S'        # template.'
p6299
sI498
S'        buf = BlockNode('
p6300
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6301
sg84
g206
sa(dp6302
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6303
sg62
(dp6304
S'text'
p6305
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6306
sS'self'
p6307
S'<gluon.template.TemplateParser object>'
p6308
sS'self.parse'
p6309
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6310
ssg72
I319
sg73
(dp6311
I320
S''
sI321
S'    def to_string(self):'
p6312
sI322
S'        """'
p6313
sI323
S'        Returns the parsed template with correct indentation.'
p6314
sI314
S'        # This variable will hold a reference to every block'
p6315
sI315
S'        # that we come across in this template'
p6316
sI316
S'        self.blocks = {}'
p6317
sI317
S''
sI318
S'        # Begin parsing.'
p6318
sI319
S'        self.parse(text)'
p6319
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6320
sg84
g48
sa(dp6321
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6322
sg62
(dp6323
S'self'
p6324
S'<gluon.template.TemplateParser object>'
p6325
sS'extend'
p6326
S'"\'default/index.html\'"'
p6327
sS'self.extend'
p6328
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6329
ssg72
I765
sg73
(dp6330
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6331
sI761
S'            self.child_super_nodes.remove(node)'
p6332
sI762
S''
sI763
S'        # If we need to extend a template.'
p6333
sI764
S'        if extend:'
p6334
sI765
S'            self.extend(extend)'
p6335
sI766
S''
sI767
S'# We need this for integration with gluon'
p6336
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6337
sg84
g188
sa(dp6338
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6339
sg62
(dp6340
S'super_nodes'
p6341
S'[]'
p6342
sS'_super_nodes'
p6343
g114
ssg72
I494
sg73
(dp6344
I489
S'                           name=filename,'
p6345
sI490
S'                           context=self.context,'
p6346
sI491
S'                           path=self.path,'
p6347
sI492
S'                           writer=self.writer,'
p6348
sI493
S'                           delimiters=self.delimiters,'
p6349
sI494
S'                           _super_nodes=super_nodes)'
p6350
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6351
sI497
S'        # template.'
p6352
sI498
S'        buf = BlockNode('
p6353
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6354
sg84
g206
sa(dp6355
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6356
sg62
(dp6357
S'text'
p6358
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6359
sS'self'
p6360
S'<gluon.template.TemplateParser object>'
p6361
sS'self.parse'
p6362
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6363
ssg72
I319
sg73
(dp6364
I320
S''
sI321
S'    def to_string(self):'
p6365
sI322
S'        """'
p6366
sI323
S'        Returns the parsed template with correct indentation.'
p6367
sI314
S'        # This variable will hold a reference to every block'
p6368
sI315
S'        # that we come across in this template'
p6369
sI316
S'        self.blocks = {}'
p6370
sI317
S''
sI318
S'        # Begin parsing.'
p6371
sI319
S'        self.parse(text)'
p6372
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6373
sg84
g48
sa(dp6374
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6375
sg62
(dp6376
S'self'
p6377
S'<gluon.template.TemplateParser object>'
p6378
sS'extend'
p6379
S'"\'default/index.html\'"'
p6380
sS'self.extend'
p6381
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6382
ssg72
I765
sg73
(dp6383
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6384
sI761
S'            self.child_super_nodes.remove(node)'
p6385
sI762
S''
sI763
S'        # If we need to extend a template.'
p6386
sI764
S'        if extend:'
p6387
sI765
S'            self.extend(extend)'
p6388
sI766
S''
sI767
S'# We need this for integration with gluon'
p6389
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6390
sg84
g188
sa(dp6391
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6392
sg62
(dp6393
S'super_nodes'
p6394
S'[]'
p6395
sS'_super_nodes'
p6396
g114
ssg72
I494
sg73
(dp6397
I489
S'                           name=filename,'
p6398
sI490
S'                           context=self.context,'
p6399
sI491
S'                           path=self.path,'
p6400
sI492
S'                           writer=self.writer,'
p6401
sI493
S'                           delimiters=self.delimiters,'
p6402
sI494
S'                           _super_nodes=super_nodes)'
p6403
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6404
sI497
S'        # template.'
p6405
sI498
S'        buf = BlockNode('
p6406
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6407
sg84
g206
sa(dp6408
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6409
sg62
(dp6410
S'text'
p6411
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6412
sS'self'
p6413
S'<gluon.template.TemplateParser object>'
p6414
sS'self.parse'
p6415
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6416
ssg72
I319
sg73
(dp6417
I320
S''
sI321
S'    def to_string(self):'
p6418
sI322
S'        """'
p6419
sI323
S'        Returns the parsed template with correct indentation.'
p6420
sI314
S'        # This variable will hold a reference to every block'
p6421
sI315
S'        # that we come across in this template'
p6422
sI316
S'        self.blocks = {}'
p6423
sI317
S''
sI318
S'        # Begin parsing.'
p6424
sI319
S'        self.parse(text)'
p6425
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6426
sg84
g48
sa(dp6427
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6428
sg62
(dp6429
S'self'
p6430
S'<gluon.template.TemplateParser object>'
p6431
sS'extend'
p6432
S'"\'default/index.html\'"'
p6433
sS'self.extend'
p6434
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6435
ssg72
I765
sg73
(dp6436
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6437
sI761
S'            self.child_super_nodes.remove(node)'
p6438
sI762
S''
sI763
S'        # If we need to extend a template.'
p6439
sI764
S'        if extend:'
p6440
sI765
S'            self.extend(extend)'
p6441
sI766
S''
sI767
S'# We need this for integration with gluon'
p6442
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6443
sg84
g188
sa(dp6444
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6445
sg62
(dp6446
S'super_nodes'
p6447
S'[]'
p6448
sS'_super_nodes'
p6449
g114
ssg72
I494
sg73
(dp6450
I489
S'                           name=filename,'
p6451
sI490
S'                           context=self.context,'
p6452
sI491
S'                           path=self.path,'
p6453
sI492
S'                           writer=self.writer,'
p6454
sI493
S'                           delimiters=self.delimiters,'
p6455
sI494
S'                           _super_nodes=super_nodes)'
p6456
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6457
sI497
S'        # template.'
p6458
sI498
S'        buf = BlockNode('
p6459
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6460
sg84
g206
sa(dp6461
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6462
sg62
(dp6463
S'text'
p6464
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6465
sS'self'
p6466
S'<gluon.template.TemplateParser object>'
p6467
sS'self.parse'
p6468
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6469
ssg72
I319
sg73
(dp6470
I320
S''
sI321
S'    def to_string(self):'
p6471
sI322
S'        """'
p6472
sI323
S'        Returns the parsed template with correct indentation.'
p6473
sI314
S'        # This variable will hold a reference to every block'
p6474
sI315
S'        # that we come across in this template'
p6475
sI316
S'        self.blocks = {}'
p6476
sI317
S''
sI318
S'        # Begin parsing.'
p6477
sI319
S'        self.parse(text)'
p6478
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6479
sg84
g48
sa(dp6480
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6481
sg62
(dp6482
S'self'
p6483
S'<gluon.template.TemplateParser object>'
p6484
sS'extend'
p6485
S'"\'default/index.html\'"'
p6486
sS'self.extend'
p6487
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6488
ssg72
I765
sg73
(dp6489
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6490
sI761
S'            self.child_super_nodes.remove(node)'
p6491
sI762
S''
sI763
S'        # If we need to extend a template.'
p6492
sI764
S'        if extend:'
p6493
sI765
S'            self.extend(extend)'
p6494
sI766
S''
sI767
S'# We need this for integration with gluon'
p6495
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6496
sg84
g188
sa(dp6497
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6498
sg62
(dp6499
S'super_nodes'
p6500
S'[]'
p6501
sS'_super_nodes'
p6502
g114
ssg72
I494
sg73
(dp6503
I489
S'                           name=filename,'
p6504
sI490
S'                           context=self.context,'
p6505
sI491
S'                           path=self.path,'
p6506
sI492
S'                           writer=self.writer,'
p6507
sI493
S'                           delimiters=self.delimiters,'
p6508
sI494
S'                           _super_nodes=super_nodes)'
p6509
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6510
sI497
S'        # template.'
p6511
sI498
S'        buf = BlockNode('
p6512
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6513
sg84
g206
sa(dp6514
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6515
sg62
(dp6516
S'text'
p6517
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6518
sS'self'
p6519
S'<gluon.template.TemplateParser object>'
p6520
sS'self.parse'
p6521
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6522
ssg72
I319
sg73
(dp6523
I320
S''
sI321
S'    def to_string(self):'
p6524
sI322
S'        """'
p6525
sI323
S'        Returns the parsed template with correct indentation.'
p6526
sI314
S'        # This variable will hold a reference to every block'
p6527
sI315
S'        # that we come across in this template'
p6528
sI316
S'        self.blocks = {}'
p6529
sI317
S''
sI318
S'        # Begin parsing.'
p6530
sI319
S'        self.parse(text)'
p6531
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6532
sg84
g48
sa(dp6533
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6534
sg62
(dp6535
S'self'
p6536
S'<gluon.template.TemplateParser object>'
p6537
sS'extend'
p6538
S'"\'default/index.html\'"'
p6539
sS'self.extend'
p6540
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6541
ssg72
I765
sg73
(dp6542
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6543
sI761
S'            self.child_super_nodes.remove(node)'
p6544
sI762
S''
sI763
S'        # If we need to extend a template.'
p6545
sI764
S'        if extend:'
p6546
sI765
S'            self.extend(extend)'
p6547
sI766
S''
sI767
S'# We need this for integration with gluon'
p6548
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6549
sg84
g188
sa(dp6550
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6551
sg62
(dp6552
S'super_nodes'
p6553
S'[]'
p6554
sS'_super_nodes'
p6555
g114
ssg72
I494
sg73
(dp6556
I489
S'                           name=filename,'
p6557
sI490
S'                           context=self.context,'
p6558
sI491
S'                           path=self.path,'
p6559
sI492
S'                           writer=self.writer,'
p6560
sI493
S'                           delimiters=self.delimiters,'
p6561
sI494
S'                           _super_nodes=super_nodes)'
p6562
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6563
sI497
S'        # template.'
p6564
sI498
S'        buf = BlockNode('
p6565
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6566
sg84
g206
sa(dp6567
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6568
sg62
(dp6569
S'text'
p6570
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6571
sS'self'
p6572
S'<gluon.template.TemplateParser object>'
p6573
sS'self.parse'
p6574
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6575
ssg72
I319
sg73
(dp6576
I320
S''
sI321
S'    def to_string(self):'
p6577
sI322
S'        """'
p6578
sI323
S'        Returns the parsed template with correct indentation.'
p6579
sI314
S'        # This variable will hold a reference to every block'
p6580
sI315
S'        # that we come across in this template'
p6581
sI316
S'        self.blocks = {}'
p6582
sI317
S''
sI318
S'        # Begin parsing.'
p6583
sI319
S'        self.parse(text)'
p6584
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6585
sg84
g48
sa(dp6586
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6587
sg62
(dp6588
S'self'
p6589
S'<gluon.template.TemplateParser object>'
p6590
sS'extend'
p6591
S'"\'default/index.html\'"'
p6592
sS'self.extend'
p6593
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6594
ssg72
I765
sg73
(dp6595
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6596
sI761
S'            self.child_super_nodes.remove(node)'
p6597
sI762
S''
sI763
S'        # If we need to extend a template.'
p6598
sI764
S'        if extend:'
p6599
sI765
S'            self.extend(extend)'
p6600
sI766
S''
sI767
S'# We need this for integration with gluon'
p6601
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6602
sg84
g188
sa(dp6603
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6604
sg62
(dp6605
S'super_nodes'
p6606
S'[]'
p6607
sS'_super_nodes'
p6608
g114
ssg72
I494
sg73
(dp6609
I489
S'                           name=filename,'
p6610
sI490
S'                           context=self.context,'
p6611
sI491
S'                           path=self.path,'
p6612
sI492
S'                           writer=self.writer,'
p6613
sI493
S'                           delimiters=self.delimiters,'
p6614
sI494
S'                           _super_nodes=super_nodes)'
p6615
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6616
sI497
S'        # template.'
p6617
sI498
S'        buf = BlockNode('
p6618
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6619
sg84
g206
sa(dp6620
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6621
sg62
(dp6622
S'text'
p6623
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6624
sS'self'
p6625
S'<gluon.template.TemplateParser object>'
p6626
sS'self.parse'
p6627
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6628
ssg72
I319
sg73
(dp6629
I320
S''
sI321
S'    def to_string(self):'
p6630
sI322
S'        """'
p6631
sI323
S'        Returns the parsed template with correct indentation.'
p6632
sI314
S'        # This variable will hold a reference to every block'
p6633
sI315
S'        # that we come across in this template'
p6634
sI316
S'        self.blocks = {}'
p6635
sI317
S''
sI318
S'        # Begin parsing.'
p6636
sI319
S'        self.parse(text)'
p6637
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6638
sg84
g48
sa(dp6639
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6640
sg62
(dp6641
S'self'
p6642
S'<gluon.template.TemplateParser object>'
p6643
sS'extend'
p6644
S'"\'default/index.html\'"'
p6645
sS'self.extend'
p6646
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6647
ssg72
I765
sg73
(dp6648
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6649
sI761
S'            self.child_super_nodes.remove(node)'
p6650
sI762
S''
sI763
S'        # If we need to extend a template.'
p6651
sI764
S'        if extend:'
p6652
sI765
S'            self.extend(extend)'
p6653
sI766
S''
sI767
S'# We need this for integration with gluon'
p6654
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6655
sg84
g188
sa(dp6656
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6657
sg62
(dp6658
S'super_nodes'
p6659
S'[]'
p6660
sS'_super_nodes'
p6661
g114
ssg72
I494
sg73
(dp6662
I489
S'                           name=filename,'
p6663
sI490
S'                           context=self.context,'
p6664
sI491
S'                           path=self.path,'
p6665
sI492
S'                           writer=self.writer,'
p6666
sI493
S'                           delimiters=self.delimiters,'
p6667
sI494
S'                           _super_nodes=super_nodes)'
p6668
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6669
sI497
S'        # template.'
p6670
sI498
S'        buf = BlockNode('
p6671
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6672
sg84
g206
sa(dp6673
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6674
sg62
(dp6675
S'text'
p6676
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6677
sS'self'
p6678
S'<gluon.template.TemplateParser object>'
p6679
sS'self.parse'
p6680
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6681
ssg72
I319
sg73
(dp6682
I320
S''
sI321
S'    def to_string(self):'
p6683
sI322
S'        """'
p6684
sI323
S'        Returns the parsed template with correct indentation.'
p6685
sI314
S'        # This variable will hold a reference to every block'
p6686
sI315
S'        # that we come across in this template'
p6687
sI316
S'        self.blocks = {}'
p6688
sI317
S''
sI318
S'        # Begin parsing.'
p6689
sI319
S'        self.parse(text)'
p6690
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6691
sg84
g48
sa(dp6692
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6693
sg62
(dp6694
S'self'
p6695
S'<gluon.template.TemplateParser object>'
p6696
sS'extend'
p6697
S'"\'default/index.html\'"'
p6698
sS'self.extend'
p6699
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6700
ssg72
I765
sg73
(dp6701
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6702
sI761
S'            self.child_super_nodes.remove(node)'
p6703
sI762
S''
sI763
S'        # If we need to extend a template.'
p6704
sI764
S'        if extend:'
p6705
sI765
S'            self.extend(extend)'
p6706
sI766
S''
sI767
S'# We need this for integration with gluon'
p6707
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6708
sg84
g188
sa(dp6709
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6710
sg62
(dp6711
S'super_nodes'
p6712
S'[]'
p6713
sS'_super_nodes'
p6714
g114
ssg72
I494
sg73
(dp6715
I489
S'                           name=filename,'
p6716
sI490
S'                           context=self.context,'
p6717
sI491
S'                           path=self.path,'
p6718
sI492
S'                           writer=self.writer,'
p6719
sI493
S'                           delimiters=self.delimiters,'
p6720
sI494
S'                           _super_nodes=super_nodes)'
p6721
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6722
sI497
S'        # template.'
p6723
sI498
S'        buf = BlockNode('
p6724
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6725
sg84
g206
sa(dp6726
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6727
sg62
(dp6728
S'text'
p6729
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6730
sS'self'
p6731
S'<gluon.template.TemplateParser object>'
p6732
sS'self.parse'
p6733
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6734
ssg72
I319
sg73
(dp6735
I320
S''
sI321
S'    def to_string(self):'
p6736
sI322
S'        """'
p6737
sI323
S'        Returns the parsed template with correct indentation.'
p6738
sI314
S'        # This variable will hold a reference to every block'
p6739
sI315
S'        # that we come across in this template'
p6740
sI316
S'        self.blocks = {}'
p6741
sI317
S''
sI318
S'        # Begin parsing.'
p6742
sI319
S'        self.parse(text)'
p6743
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6744
sg84
g48
sa(dp6745
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6746
sg62
(dp6747
S'self'
p6748
S'<gluon.template.TemplateParser object>'
p6749
sS'extend'
p6750
S'"\'default/index.html\'"'
p6751
sS'self.extend'
p6752
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6753
ssg72
I765
sg73
(dp6754
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6755
sI761
S'            self.child_super_nodes.remove(node)'
p6756
sI762
S''
sI763
S'        # If we need to extend a template.'
p6757
sI764
S'        if extend:'
p6758
sI765
S'            self.extend(extend)'
p6759
sI766
S''
sI767
S'# We need this for integration with gluon'
p6760
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6761
sg84
g188
sa(dp6762
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6763
sg62
(dp6764
S'super_nodes'
p6765
S'[]'
p6766
sS'_super_nodes'
p6767
g114
ssg72
I494
sg73
(dp6768
I489
S'                           name=filename,'
p6769
sI490
S'                           context=self.context,'
p6770
sI491
S'                           path=self.path,'
p6771
sI492
S'                           writer=self.writer,'
p6772
sI493
S'                           delimiters=self.delimiters,'
p6773
sI494
S'                           _super_nodes=super_nodes)'
p6774
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6775
sI497
S'        # template.'
p6776
sI498
S'        buf = BlockNode('
p6777
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6778
sg84
g206
sa(dp6779
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6780
sg62
(dp6781
S'text'
p6782
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6783
sS'self'
p6784
S'<gluon.template.TemplateParser object>'
p6785
sS'self.parse'
p6786
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6787
ssg72
I319
sg73
(dp6788
I320
S''
sI321
S'    def to_string(self):'
p6789
sI322
S'        """'
p6790
sI323
S'        Returns the parsed template with correct indentation.'
p6791
sI314
S'        # This variable will hold a reference to every block'
p6792
sI315
S'        # that we come across in this template'
p6793
sI316
S'        self.blocks = {}'
p6794
sI317
S''
sI318
S'        # Begin parsing.'
p6795
sI319
S'        self.parse(text)'
p6796
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6797
sg84
g48
sa(dp6798
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6799
sg62
(dp6800
S'self'
p6801
S'<gluon.template.TemplateParser object>'
p6802
sS'extend'
p6803
S'"\'default/index.html\'"'
p6804
sS'self.extend'
p6805
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6806
ssg72
I765
sg73
(dp6807
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6808
sI761
S'            self.child_super_nodes.remove(node)'
p6809
sI762
S''
sI763
S'        # If we need to extend a template.'
p6810
sI764
S'        if extend:'
p6811
sI765
S'            self.extend(extend)'
p6812
sI766
S''
sI767
S'# We need this for integration with gluon'
p6813
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6814
sg84
g188
sa(dp6815
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6816
sg62
(dp6817
S'super_nodes'
p6818
S'[]'
p6819
sS'_super_nodes'
p6820
g114
ssg72
I494
sg73
(dp6821
I489
S'                           name=filename,'
p6822
sI490
S'                           context=self.context,'
p6823
sI491
S'                           path=self.path,'
p6824
sI492
S'                           writer=self.writer,'
p6825
sI493
S'                           delimiters=self.delimiters,'
p6826
sI494
S'                           _super_nodes=super_nodes)'
p6827
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6828
sI497
S'        # template.'
p6829
sI498
S'        buf = BlockNode('
p6830
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6831
sg84
g206
sa(dp6832
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6833
sg62
(dp6834
S'text'
p6835
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6836
sS'self'
p6837
S'<gluon.template.TemplateParser object>'
p6838
sS'self.parse'
p6839
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6840
ssg72
I319
sg73
(dp6841
I320
S''
sI321
S'    def to_string(self):'
p6842
sI322
S'        """'
p6843
sI323
S'        Returns the parsed template with correct indentation.'
p6844
sI314
S'        # This variable will hold a reference to every block'
p6845
sI315
S'        # that we come across in this template'
p6846
sI316
S'        self.blocks = {}'
p6847
sI317
S''
sI318
S'        # Begin parsing.'
p6848
sI319
S'        self.parse(text)'
p6849
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6850
sg84
g48
sa(dp6851
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6852
sg62
(dp6853
S'self'
p6854
S'<gluon.template.TemplateParser object>'
p6855
sS'extend'
p6856
S'"\'default/index.html\'"'
p6857
sS'self.extend'
p6858
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6859
ssg72
I765
sg73
(dp6860
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6861
sI761
S'            self.child_super_nodes.remove(node)'
p6862
sI762
S''
sI763
S'        # If we need to extend a template.'
p6863
sI764
S'        if extend:'
p6864
sI765
S'            self.extend(extend)'
p6865
sI766
S''
sI767
S'# We need this for integration with gluon'
p6866
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6867
sg84
g188
sa(dp6868
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6869
sg62
(dp6870
S'super_nodes'
p6871
S'[]'
p6872
sS'_super_nodes'
p6873
g114
ssg72
I494
sg73
(dp6874
I489
S'                           name=filename,'
p6875
sI490
S'                           context=self.context,'
p6876
sI491
S'                           path=self.path,'
p6877
sI492
S'                           writer=self.writer,'
p6878
sI493
S'                           delimiters=self.delimiters,'
p6879
sI494
S'                           _super_nodes=super_nodes)'
p6880
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6881
sI497
S'        # template.'
p6882
sI498
S'        buf = BlockNode('
p6883
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6884
sg84
g206
sa(dp6885
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6886
sg62
(dp6887
S'text'
p6888
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6889
sS'self'
p6890
S'<gluon.template.TemplateParser object>'
p6891
sS'self.parse'
p6892
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6893
ssg72
I319
sg73
(dp6894
I320
S''
sI321
S'    def to_string(self):'
p6895
sI322
S'        """'
p6896
sI323
S'        Returns the parsed template with correct indentation.'
p6897
sI314
S'        # This variable will hold a reference to every block'
p6898
sI315
S'        # that we come across in this template'
p6899
sI316
S'        self.blocks = {}'
p6900
sI317
S''
sI318
S'        # Begin parsing.'
p6901
sI319
S'        self.parse(text)'
p6902
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6903
sg84
g48
sa(dp6904
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6905
sg62
(dp6906
S'self'
p6907
S'<gluon.template.TemplateParser object>'
p6908
sS'extend'
p6909
S'"\'default/index.html\'"'
p6910
sS'self.extend'
p6911
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6912
ssg72
I765
sg73
(dp6913
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6914
sI761
S'            self.child_super_nodes.remove(node)'
p6915
sI762
S''
sI763
S'        # If we need to extend a template.'
p6916
sI764
S'        if extend:'
p6917
sI765
S'            self.extend(extend)'
p6918
sI766
S''
sI767
S'# We need this for integration with gluon'
p6919
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6920
sg84
g188
sa(dp6921
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6922
sg62
(dp6923
S'super_nodes'
p6924
S'[]'
p6925
sS'_super_nodes'
p6926
g114
ssg72
I494
sg73
(dp6927
I489
S'                           name=filename,'
p6928
sI490
S'                           context=self.context,'
p6929
sI491
S'                           path=self.path,'
p6930
sI492
S'                           writer=self.writer,'
p6931
sI493
S'                           delimiters=self.delimiters,'
p6932
sI494
S'                           _super_nodes=super_nodes)'
p6933
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6934
sI497
S'        # template.'
p6935
sI498
S'        buf = BlockNode('
p6936
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6937
sg84
g206
sa(dp6938
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6939
sg62
(dp6940
S'text'
p6941
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6942
sS'self'
p6943
S'<gluon.template.TemplateParser object>'
p6944
sS'self.parse'
p6945
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6946
ssg72
I319
sg73
(dp6947
I320
S''
sI321
S'    def to_string(self):'
p6948
sI322
S'        """'
p6949
sI323
S'        Returns the parsed template with correct indentation.'
p6950
sI314
S'        # This variable will hold a reference to every block'
p6951
sI315
S'        # that we come across in this template'
p6952
sI316
S'        self.blocks = {}'
p6953
sI317
S''
sI318
S'        # Begin parsing.'
p6954
sI319
S'        self.parse(text)'
p6955
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6956
sg84
g48
sa(dp6957
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6958
sg62
(dp6959
S'self'
p6960
S'<gluon.template.TemplateParser object>'
p6961
sS'extend'
p6962
S'"\'default/index.html\'"'
p6963
sS'self.extend'
p6964
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6965
ssg72
I765
sg73
(dp6966
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6967
sI761
S'            self.child_super_nodes.remove(node)'
p6968
sI762
S''
sI763
S'        # If we need to extend a template.'
p6969
sI764
S'        if extend:'
p6970
sI765
S'            self.extend(extend)'
p6971
sI766
S''
sI767
S'# We need this for integration with gluon'
p6972
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p6973
sg84
g188
sa(dp6974
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6975
sg62
(dp6976
S'super_nodes'
p6977
S'[]'
p6978
sS'_super_nodes'
p6979
g114
ssg72
I494
sg73
(dp6980
I489
S'                           name=filename,'
p6981
sI490
S'                           context=self.context,'
p6982
sI491
S'                           path=self.path,'
p6983
sI492
S'                           writer=self.writer,'
p6984
sI493
S'                           delimiters=self.delimiters,'
p6985
sI494
S'                           _super_nodes=super_nodes)'
p6986
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p6987
sI497
S'        # template.'
p6988
sI498
S'        buf = BlockNode('
p6989
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p6990
sg84
g206
sa(dp6991
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p6992
sg62
(dp6993
S'text'
p6994
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p6995
sS'self'
p6996
S'<gluon.template.TemplateParser object>'
p6997
sS'self.parse'
p6998
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6999
ssg72
I319
sg73
(dp7000
I320
S''
sI321
S'    def to_string(self):'
p7001
sI322
S'        """'
p7002
sI323
S'        Returns the parsed template with correct indentation.'
p7003
sI314
S'        # This variable will hold a reference to every block'
p7004
sI315
S'        # that we come across in this template'
p7005
sI316
S'        self.blocks = {}'
p7006
sI317
S''
sI318
S'        # Begin parsing.'
p7007
sI319
S'        self.parse(text)'
p7008
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7009
sg84
g48
sa(dp7010
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7011
sg62
(dp7012
S'self'
p7013
S'<gluon.template.TemplateParser object>'
p7014
sS'extend'
p7015
S'"\'default/index.html\'"'
p7016
sS'self.extend'
p7017
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7018
ssg72
I765
sg73
(dp7019
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7020
sI761
S'            self.child_super_nodes.remove(node)'
p7021
sI762
S''
sI763
S'        # If we need to extend a template.'
p7022
sI764
S'        if extend:'
p7023
sI765
S'            self.extend(extend)'
p7024
sI766
S''
sI767
S'# We need this for integration with gluon'
p7025
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7026
sg84
g188
sa(dp7027
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7028
sg62
(dp7029
S'super_nodes'
p7030
S'[]'
p7031
sS'_super_nodes'
p7032
g114
ssg72
I494
sg73
(dp7033
I489
S'                           name=filename,'
p7034
sI490
S'                           context=self.context,'
p7035
sI491
S'                           path=self.path,'
p7036
sI492
S'                           writer=self.writer,'
p7037
sI493
S'                           delimiters=self.delimiters,'
p7038
sI494
S'                           _super_nodes=super_nodes)'
p7039
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7040
sI497
S'        # template.'
p7041
sI498
S'        buf = BlockNode('
p7042
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7043
sg84
g206
sa(dp7044
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7045
sg62
(dp7046
S'text'
p7047
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7048
sS'self'
p7049
S'<gluon.template.TemplateParser object>'
p7050
sS'self.parse'
p7051
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7052
ssg72
I319
sg73
(dp7053
I320
S''
sI321
S'    def to_string(self):'
p7054
sI322
S'        """'
p7055
sI323
S'        Returns the parsed template with correct indentation.'
p7056
sI314
S'        # This variable will hold a reference to every block'
p7057
sI315
S'        # that we come across in this template'
p7058
sI316
S'        self.blocks = {}'
p7059
sI317
S''
sI318
S'        # Begin parsing.'
p7060
sI319
S'        self.parse(text)'
p7061
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7062
sg84
g48
sa(dp7063
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7064
sg62
(dp7065
S'self'
p7066
S'<gluon.template.TemplateParser object>'
p7067
sS'extend'
p7068
S'"\'default/index.html\'"'
p7069
sS'self.extend'
p7070
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7071
ssg72
I765
sg73
(dp7072
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7073
sI761
S'            self.child_super_nodes.remove(node)'
p7074
sI762
S''
sI763
S'        # If we need to extend a template.'
p7075
sI764
S'        if extend:'
p7076
sI765
S'            self.extend(extend)'
p7077
sI766
S''
sI767
S'# We need this for integration with gluon'
p7078
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7079
sg84
g188
sa(dp7080
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7081
sg62
(dp7082
S'super_nodes'
p7083
S'[]'
p7084
sS'_super_nodes'
p7085
g114
ssg72
I494
sg73
(dp7086
I489
S'                           name=filename,'
p7087
sI490
S'                           context=self.context,'
p7088
sI491
S'                           path=self.path,'
p7089
sI492
S'                           writer=self.writer,'
p7090
sI493
S'                           delimiters=self.delimiters,'
p7091
sI494
S'                           _super_nodes=super_nodes)'
p7092
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7093
sI497
S'        # template.'
p7094
sI498
S'        buf = BlockNode('
p7095
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7096
sg84
g206
sa(dp7097
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7098
sg62
(dp7099
S'text'
p7100
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7101
sS'self'
p7102
S'<gluon.template.TemplateParser object>'
p7103
sS'self.parse'
p7104
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7105
ssg72
I319
sg73
(dp7106
I320
S''
sI321
S'    def to_string(self):'
p7107
sI322
S'        """'
p7108
sI323
S'        Returns the parsed template with correct indentation.'
p7109
sI314
S'        # This variable will hold a reference to every block'
p7110
sI315
S'        # that we come across in this template'
p7111
sI316
S'        self.blocks = {}'
p7112
sI317
S''
sI318
S'        # Begin parsing.'
p7113
sI319
S'        self.parse(text)'
p7114
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7115
sg84
g48
sa(dp7116
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7117
sg62
(dp7118
S'self'
p7119
S'<gluon.template.TemplateParser object>'
p7120
sS'extend'
p7121
S'"\'default/index.html\'"'
p7122
sS'self.extend'
p7123
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7124
ssg72
I765
sg73
(dp7125
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7126
sI761
S'            self.child_super_nodes.remove(node)'
p7127
sI762
S''
sI763
S'        # If we need to extend a template.'
p7128
sI764
S'        if extend:'
p7129
sI765
S'            self.extend(extend)'
p7130
sI766
S''
sI767
S'# We need this for integration with gluon'
p7131
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7132
sg84
g188
sa(dp7133
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7134
sg62
(dp7135
S'super_nodes'
p7136
S'[]'
p7137
sS'_super_nodes'
p7138
g114
ssg72
I494
sg73
(dp7139
I489
S'                           name=filename,'
p7140
sI490
S'                           context=self.context,'
p7141
sI491
S'                           path=self.path,'
p7142
sI492
S'                           writer=self.writer,'
p7143
sI493
S'                           delimiters=self.delimiters,'
p7144
sI494
S'                           _super_nodes=super_nodes)'
p7145
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7146
sI497
S'        # template.'
p7147
sI498
S'        buf = BlockNode('
p7148
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7149
sg84
g206
sa(dp7150
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7151
sg62
(dp7152
S'text'
p7153
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7154
sS'self'
p7155
S'<gluon.template.TemplateParser object>'
p7156
sS'self.parse'
p7157
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7158
ssg72
I319
sg73
(dp7159
I320
S''
sI321
S'    def to_string(self):'
p7160
sI322
S'        """'
p7161
sI323
S'        Returns the parsed template with correct indentation.'
p7162
sI314
S'        # This variable will hold a reference to every block'
p7163
sI315
S'        # that we come across in this template'
p7164
sI316
S'        self.blocks = {}'
p7165
sI317
S''
sI318
S'        # Begin parsing.'
p7166
sI319
S'        self.parse(text)'
p7167
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7168
sg84
g48
sa(dp7169
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7170
sg62
(dp7171
S'self'
p7172
S'<gluon.template.TemplateParser object>'
p7173
sS'extend'
p7174
S'"\'default/index.html\'"'
p7175
sS'self.extend'
p7176
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7177
ssg72
I765
sg73
(dp7178
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7179
sI761
S'            self.child_super_nodes.remove(node)'
p7180
sI762
S''
sI763
S'        # If we need to extend a template.'
p7181
sI764
S'        if extend:'
p7182
sI765
S'            self.extend(extend)'
p7183
sI766
S''
sI767
S'# We need this for integration with gluon'
p7184
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7185
sg84
g188
sa(dp7186
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7187
sg62
(dp7188
S'super_nodes'
p7189
S'[]'
p7190
sS'_super_nodes'
p7191
g114
ssg72
I494
sg73
(dp7192
I489
S'                           name=filename,'
p7193
sI490
S'                           context=self.context,'
p7194
sI491
S'                           path=self.path,'
p7195
sI492
S'                           writer=self.writer,'
p7196
sI493
S'                           delimiters=self.delimiters,'
p7197
sI494
S'                           _super_nodes=super_nodes)'
p7198
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7199
sI497
S'        # template.'
p7200
sI498
S'        buf = BlockNode('
p7201
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7202
sg84
g206
sa(dp7203
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7204
sg62
(dp7205
S'text'
p7206
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7207
sS'self'
p7208
S'<gluon.template.TemplateParser object>'
p7209
sS'self.parse'
p7210
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7211
ssg72
I319
sg73
(dp7212
I320
S''
sI321
S'    def to_string(self):'
p7213
sI322
S'        """'
p7214
sI323
S'        Returns the parsed template with correct indentation.'
p7215
sI314
S'        # This variable will hold a reference to every block'
p7216
sI315
S'        # that we come across in this template'
p7217
sI316
S'        self.blocks = {}'
p7218
sI317
S''
sI318
S'        # Begin parsing.'
p7219
sI319
S'        self.parse(text)'
p7220
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7221
sg84
g48
sa(dp7222
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7223
sg62
(dp7224
S'self'
p7225
S'<gluon.template.TemplateParser object>'
p7226
sS'extend'
p7227
S'"\'default/index.html\'"'
p7228
sS'self.extend'
p7229
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7230
ssg72
I765
sg73
(dp7231
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7232
sI761
S'            self.child_super_nodes.remove(node)'
p7233
sI762
S''
sI763
S'        # If we need to extend a template.'
p7234
sI764
S'        if extend:'
p7235
sI765
S'            self.extend(extend)'
p7236
sI766
S''
sI767
S'# We need this for integration with gluon'
p7237
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7238
sg84
g188
sa(dp7239
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7240
sg62
(dp7241
S'super_nodes'
p7242
S'[]'
p7243
sS'_super_nodes'
p7244
g114
ssg72
I494
sg73
(dp7245
I489
S'                           name=filename,'
p7246
sI490
S'                           context=self.context,'
p7247
sI491
S'                           path=self.path,'
p7248
sI492
S'                           writer=self.writer,'
p7249
sI493
S'                           delimiters=self.delimiters,'
p7250
sI494
S'                           _super_nodes=super_nodes)'
p7251
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7252
sI497
S'        # template.'
p7253
sI498
S'        buf = BlockNode('
p7254
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7255
sg84
g206
sa(dp7256
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7257
sg62
(dp7258
S'text'
p7259
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7260
sS'self'
p7261
S'<gluon.template.TemplateParser object>'
p7262
sS'self.parse'
p7263
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7264
ssg72
I319
sg73
(dp7265
I320
S''
sI321
S'    def to_string(self):'
p7266
sI322
S'        """'
p7267
sI323
S'        Returns the parsed template with correct indentation.'
p7268
sI314
S'        # This variable will hold a reference to every block'
p7269
sI315
S'        # that we come across in this template'
p7270
sI316
S'        self.blocks = {}'
p7271
sI317
S''
sI318
S'        # Begin parsing.'
p7272
sI319
S'        self.parse(text)'
p7273
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7274
sg84
g48
sa(dp7275
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7276
sg62
(dp7277
S'self'
p7278
S'<gluon.template.TemplateParser object>'
p7279
sS'extend'
p7280
S'"\'default/index.html\'"'
p7281
sS'self.extend'
p7282
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7283
ssg72
I765
sg73
(dp7284
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7285
sI761
S'            self.child_super_nodes.remove(node)'
p7286
sI762
S''
sI763
S'        # If we need to extend a template.'
p7287
sI764
S'        if extend:'
p7288
sI765
S'            self.extend(extend)'
p7289
sI766
S''
sI767
S'# We need this for integration with gluon'
p7290
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7291
sg84
g188
sa(dp7292
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7293
sg62
(dp7294
S'super_nodes'
p7295
S'[]'
p7296
sS'_super_nodes'
p7297
g114
ssg72
I494
sg73
(dp7298
I489
S'                           name=filename,'
p7299
sI490
S'                           context=self.context,'
p7300
sI491
S'                           path=self.path,'
p7301
sI492
S'                           writer=self.writer,'
p7302
sI493
S'                           delimiters=self.delimiters,'
p7303
sI494
S'                           _super_nodes=super_nodes)'
p7304
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7305
sI497
S'        # template.'
p7306
sI498
S'        buf = BlockNode('
p7307
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7308
sg84
g206
sa(dp7309
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7310
sg62
(dp7311
S'text'
p7312
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7313
sS'self'
p7314
S'<gluon.template.TemplateParser object>'
p7315
sS'self.parse'
p7316
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7317
ssg72
I319
sg73
(dp7318
I320
S''
sI321
S'    def to_string(self):'
p7319
sI322
S'        """'
p7320
sI323
S'        Returns the parsed template with correct indentation.'
p7321
sI314
S'        # This variable will hold a reference to every block'
p7322
sI315
S'        # that we come across in this template'
p7323
sI316
S'        self.blocks = {}'
p7324
sI317
S''
sI318
S'        # Begin parsing.'
p7325
sI319
S'        self.parse(text)'
p7326
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7327
sg84
g48
sa(dp7328
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7329
sg62
(dp7330
S'self'
p7331
S'<gluon.template.TemplateParser object>'
p7332
sS'extend'
p7333
S'"\'default/index.html\'"'
p7334
sS'self.extend'
p7335
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7336
ssg72
I765
sg73
(dp7337
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7338
sI761
S'            self.child_super_nodes.remove(node)'
p7339
sI762
S''
sI763
S'        # If we need to extend a template.'
p7340
sI764
S'        if extend:'
p7341
sI765
S'            self.extend(extend)'
p7342
sI766
S''
sI767
S'# We need this for integration with gluon'
p7343
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7344
sg84
g188
sa(dp7345
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7346
sg62
(dp7347
S'super_nodes'
p7348
S'[]'
p7349
sS'_super_nodes'
p7350
g114
ssg72
I494
sg73
(dp7351
I489
S'                           name=filename,'
p7352
sI490
S'                           context=self.context,'
p7353
sI491
S'                           path=self.path,'
p7354
sI492
S'                           writer=self.writer,'
p7355
sI493
S'                           delimiters=self.delimiters,'
p7356
sI494
S'                           _super_nodes=super_nodes)'
p7357
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7358
sI497
S'        # template.'
p7359
sI498
S'        buf = BlockNode('
p7360
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7361
sg84
g206
sa(dp7362
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7363
sg62
(dp7364
S'text'
p7365
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7366
sS'self'
p7367
S'<gluon.template.TemplateParser object>'
p7368
sS'self.parse'
p7369
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7370
ssg72
I319
sg73
(dp7371
I320
S''
sI321
S'    def to_string(self):'
p7372
sI322
S'        """'
p7373
sI323
S'        Returns the parsed template with correct indentation.'
p7374
sI314
S'        # This variable will hold a reference to every block'
p7375
sI315
S'        # that we come across in this template'
p7376
sI316
S'        self.blocks = {}'
p7377
sI317
S''
sI318
S'        # Begin parsing.'
p7378
sI319
S'        self.parse(text)'
p7379
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7380
sg84
g48
sa(dp7381
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7382
sg62
(dp7383
S'self'
p7384
S'<gluon.template.TemplateParser object>'
p7385
sS'extend'
p7386
S'"\'default/index.html\'"'
p7387
sS'self.extend'
p7388
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7389
ssg72
I765
sg73
(dp7390
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7391
sI761
S'            self.child_super_nodes.remove(node)'
p7392
sI762
S''
sI763
S'        # If we need to extend a template.'
p7393
sI764
S'        if extend:'
p7394
sI765
S'            self.extend(extend)'
p7395
sI766
S''
sI767
S'# We need this for integration with gluon'
p7396
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7397
sg84
g188
sa(dp7398
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7399
sg62
(dp7400
S'super_nodes'
p7401
S'[]'
p7402
sS'_super_nodes'
p7403
g114
ssg72
I494
sg73
(dp7404
I489
S'                           name=filename,'
p7405
sI490
S'                           context=self.context,'
p7406
sI491
S'                           path=self.path,'
p7407
sI492
S'                           writer=self.writer,'
p7408
sI493
S'                           delimiters=self.delimiters,'
p7409
sI494
S'                           _super_nodes=super_nodes)'
p7410
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7411
sI497
S'        # template.'
p7412
sI498
S'        buf = BlockNode('
p7413
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7414
sg84
g206
sa(dp7415
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7416
sg62
(dp7417
S'text'
p7418
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7419
sS'self'
p7420
S'<gluon.template.TemplateParser object>'
p7421
sS'self.parse'
p7422
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7423
ssg72
I319
sg73
(dp7424
I320
S''
sI321
S'    def to_string(self):'
p7425
sI322
S'        """'
p7426
sI323
S'        Returns the parsed template with correct indentation.'
p7427
sI314
S'        # This variable will hold a reference to every block'
p7428
sI315
S'        # that we come across in this template'
p7429
sI316
S'        self.blocks = {}'
p7430
sI317
S''
sI318
S'        # Begin parsing.'
p7431
sI319
S'        self.parse(text)'
p7432
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7433
sg84
g48
sa(dp7434
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7435
sg62
(dp7436
S'self'
p7437
S'<gluon.template.TemplateParser object>'
p7438
sS'extend'
p7439
S'"\'default/index.html\'"'
p7440
sS'self.extend'
p7441
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7442
ssg72
I765
sg73
(dp7443
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7444
sI761
S'            self.child_super_nodes.remove(node)'
p7445
sI762
S''
sI763
S'        # If we need to extend a template.'
p7446
sI764
S'        if extend:'
p7447
sI765
S'            self.extend(extend)'
p7448
sI766
S''
sI767
S'# We need this for integration with gluon'
p7449
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7450
sg84
g188
sa(dp7451
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7452
sg62
(dp7453
S'super_nodes'
p7454
S'[]'
p7455
sS'_super_nodes'
p7456
g114
ssg72
I494
sg73
(dp7457
I489
S'                           name=filename,'
p7458
sI490
S'                           context=self.context,'
p7459
sI491
S'                           path=self.path,'
p7460
sI492
S'                           writer=self.writer,'
p7461
sI493
S'                           delimiters=self.delimiters,'
p7462
sI494
S'                           _super_nodes=super_nodes)'
p7463
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7464
sI497
S'        # template.'
p7465
sI498
S'        buf = BlockNode('
p7466
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7467
sg84
g206
sa(dp7468
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7469
sg62
(dp7470
S'text'
p7471
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7472
sS'self'
p7473
S'<gluon.template.TemplateParser object>'
p7474
sS'self.parse'
p7475
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7476
ssg72
I319
sg73
(dp7477
I320
S''
sI321
S'    def to_string(self):'
p7478
sI322
S'        """'
p7479
sI323
S'        Returns the parsed template with correct indentation.'
p7480
sI314
S'        # This variable will hold a reference to every block'
p7481
sI315
S'        # that we come across in this template'
p7482
sI316
S'        self.blocks = {}'
p7483
sI317
S''
sI318
S'        # Begin parsing.'
p7484
sI319
S'        self.parse(text)'
p7485
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7486
sg84
g48
sa(dp7487
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7488
sg62
(dp7489
S'self'
p7490
S'<gluon.template.TemplateParser object>'
p7491
sS'extend'
p7492
S'"\'default/index.html\'"'
p7493
sS'self.extend'
p7494
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7495
ssg72
I765
sg73
(dp7496
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7497
sI761
S'            self.child_super_nodes.remove(node)'
p7498
sI762
S''
sI763
S'        # If we need to extend a template.'
p7499
sI764
S'        if extend:'
p7500
sI765
S'            self.extend(extend)'
p7501
sI766
S''
sI767
S'# We need this for integration with gluon'
p7502
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7503
sg84
g188
sa(dp7504
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7505
sg62
(dp7506
S'super_nodes'
p7507
S'[]'
p7508
sS'_super_nodes'
p7509
g114
ssg72
I494
sg73
(dp7510
I489
S'                           name=filename,'
p7511
sI490
S'                           context=self.context,'
p7512
sI491
S'                           path=self.path,'
p7513
sI492
S'                           writer=self.writer,'
p7514
sI493
S'                           delimiters=self.delimiters,'
p7515
sI494
S'                           _super_nodes=super_nodes)'
p7516
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7517
sI497
S'        # template.'
p7518
sI498
S'        buf = BlockNode('
p7519
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7520
sg84
g206
sa(dp7521
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7522
sg62
(dp7523
S'text'
p7524
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7525
sS'self'
p7526
S'<gluon.template.TemplateParser object>'
p7527
sS'self.parse'
p7528
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7529
ssg72
I319
sg73
(dp7530
I320
S''
sI321
S'    def to_string(self):'
p7531
sI322
S'        """'
p7532
sI323
S'        Returns the parsed template with correct indentation.'
p7533
sI314
S'        # This variable will hold a reference to every block'
p7534
sI315
S'        # that we come across in this template'
p7535
sI316
S'        self.blocks = {}'
p7536
sI317
S''
sI318
S'        # Begin parsing.'
p7537
sI319
S'        self.parse(text)'
p7538
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7539
sg84
g48
sa(dp7540
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7541
sg62
(dp7542
S'self'
p7543
S'<gluon.template.TemplateParser object>'
p7544
sS'extend'
p7545
S'"\'default/index.html\'"'
p7546
sS'self.extend'
p7547
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7548
ssg72
I765
sg73
(dp7549
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7550
sI761
S'            self.child_super_nodes.remove(node)'
p7551
sI762
S''
sI763
S'        # If we need to extend a template.'
p7552
sI764
S'        if extend:'
p7553
sI765
S'            self.extend(extend)'
p7554
sI766
S''
sI767
S'# We need this for integration with gluon'
p7555
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7556
sg84
g188
sa(dp7557
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7558
sg62
(dp7559
S'super_nodes'
p7560
S'[]'
p7561
sS'_super_nodes'
p7562
g114
ssg72
I494
sg73
(dp7563
I489
S'                           name=filename,'
p7564
sI490
S'                           context=self.context,'
p7565
sI491
S'                           path=self.path,'
p7566
sI492
S'                           writer=self.writer,'
p7567
sI493
S'                           delimiters=self.delimiters,'
p7568
sI494
S'                           _super_nodes=super_nodes)'
p7569
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7570
sI497
S'        # template.'
p7571
sI498
S'        buf = BlockNode('
p7572
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7573
sg84
g206
sa(dp7574
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7575
sg62
(dp7576
S'text'
p7577
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7578
sS'self'
p7579
S'<gluon.template.TemplateParser object>'
p7580
sS'self.parse'
p7581
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7582
ssg72
I319
sg73
(dp7583
I320
S''
sI321
S'    def to_string(self):'
p7584
sI322
S'        """'
p7585
sI323
S'        Returns the parsed template with correct indentation.'
p7586
sI314
S'        # This variable will hold a reference to every block'
p7587
sI315
S'        # that we come across in this template'
p7588
sI316
S'        self.blocks = {}'
p7589
sI317
S''
sI318
S'        # Begin parsing.'
p7590
sI319
S'        self.parse(text)'
p7591
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7592
sg84
g48
sa(dp7593
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7594
sg62
(dp7595
S'self'
p7596
S'<gluon.template.TemplateParser object>'
p7597
sS'extend'
p7598
S'"\'default/index.html\'"'
p7599
sS'self.extend'
p7600
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7601
ssg72
I765
sg73
(dp7602
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7603
sI761
S'            self.child_super_nodes.remove(node)'
p7604
sI762
S''
sI763
S'        # If we need to extend a template.'
p7605
sI764
S'        if extend:'
p7606
sI765
S'            self.extend(extend)'
p7607
sI766
S''
sI767
S'# We need this for integration with gluon'
p7608
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7609
sg84
g188
sa(dp7610
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7611
sg62
(dp7612
S'super_nodes'
p7613
S'[]'
p7614
sS'_super_nodes'
p7615
g114
ssg72
I494
sg73
(dp7616
I489
S'                           name=filename,'
p7617
sI490
S'                           context=self.context,'
p7618
sI491
S'                           path=self.path,'
p7619
sI492
S'                           writer=self.writer,'
p7620
sI493
S'                           delimiters=self.delimiters,'
p7621
sI494
S'                           _super_nodes=super_nodes)'
p7622
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7623
sI497
S'        # template.'
p7624
sI498
S'        buf = BlockNode('
p7625
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7626
sg84
g206
sa(dp7627
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7628
sg62
(dp7629
S'text'
p7630
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7631
sS'self'
p7632
S'<gluon.template.TemplateParser object>'
p7633
sS'self.parse'
p7634
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7635
ssg72
I319
sg73
(dp7636
I320
S''
sI321
S'    def to_string(self):'
p7637
sI322
S'        """'
p7638
sI323
S'        Returns the parsed template with correct indentation.'
p7639
sI314
S'        # This variable will hold a reference to every block'
p7640
sI315
S'        # that we come across in this template'
p7641
sI316
S'        self.blocks = {}'
p7642
sI317
S''
sI318
S'        # Begin parsing.'
p7643
sI319
S'        self.parse(text)'
p7644
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7645
sg84
g48
sa(dp7646
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7647
sg62
(dp7648
S'self'
p7649
S'<gluon.template.TemplateParser object>'
p7650
sS'extend'
p7651
S'"\'default/index.html\'"'
p7652
sS'self.extend'
p7653
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7654
ssg72
I765
sg73
(dp7655
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7656
sI761
S'            self.child_super_nodes.remove(node)'
p7657
sI762
S''
sI763
S'        # If we need to extend a template.'
p7658
sI764
S'        if extend:'
p7659
sI765
S'            self.extend(extend)'
p7660
sI766
S''
sI767
S'# We need this for integration with gluon'
p7661
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7662
sg84
g188
sa(dp7663
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7664
sg62
(dp7665
S'super_nodes'
p7666
S'[]'
p7667
sS'_super_nodes'
p7668
g114
ssg72
I494
sg73
(dp7669
I489
S'                           name=filename,'
p7670
sI490
S'                           context=self.context,'
p7671
sI491
S'                           path=self.path,'
p7672
sI492
S'                           writer=self.writer,'
p7673
sI493
S'                           delimiters=self.delimiters,'
p7674
sI494
S'                           _super_nodes=super_nodes)'
p7675
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7676
sI497
S'        # template.'
p7677
sI498
S'        buf = BlockNode('
p7678
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7679
sg84
g206
sa(dp7680
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7681
sg62
(dp7682
S'text'
p7683
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7684
sS'self'
p7685
S'<gluon.template.TemplateParser object>'
p7686
sS'self.parse'
p7687
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7688
ssg72
I319
sg73
(dp7689
I320
S''
sI321
S'    def to_string(self):'
p7690
sI322
S'        """'
p7691
sI323
S'        Returns the parsed template with correct indentation.'
p7692
sI314
S'        # This variable will hold a reference to every block'
p7693
sI315
S'        # that we come across in this template'
p7694
sI316
S'        self.blocks = {}'
p7695
sI317
S''
sI318
S'        # Begin parsing.'
p7696
sI319
S'        self.parse(text)'
p7697
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7698
sg84
g48
sa(dp7699
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7700
sg62
(dp7701
S'self'
p7702
S'<gluon.template.TemplateParser object>'
p7703
sS'extend'
p7704
S'"\'default/index.html\'"'
p7705
sS'self.extend'
p7706
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7707
ssg72
I765
sg73
(dp7708
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7709
sI761
S'            self.child_super_nodes.remove(node)'
p7710
sI762
S''
sI763
S'        # If we need to extend a template.'
p7711
sI764
S'        if extend:'
p7712
sI765
S'            self.extend(extend)'
p7713
sI766
S''
sI767
S'# We need this for integration with gluon'
p7714
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7715
sg84
g188
sa(dp7716
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7717
sg62
(dp7718
S'super_nodes'
p7719
S'[]'
p7720
sS'_super_nodes'
p7721
g114
ssg72
I494
sg73
(dp7722
I489
S'                           name=filename,'
p7723
sI490
S'                           context=self.context,'
p7724
sI491
S'                           path=self.path,'
p7725
sI492
S'                           writer=self.writer,'
p7726
sI493
S'                           delimiters=self.delimiters,'
p7727
sI494
S'                           _super_nodes=super_nodes)'
p7728
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7729
sI497
S'        # template.'
p7730
sI498
S'        buf = BlockNode('
p7731
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7732
sg84
g206
sa(dp7733
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7734
sg62
(dp7735
S'text'
p7736
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7737
sS'self'
p7738
S'<gluon.template.TemplateParser object>'
p7739
sS'self.parse'
p7740
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7741
ssg72
I319
sg73
(dp7742
I320
S''
sI321
S'    def to_string(self):'
p7743
sI322
S'        """'
p7744
sI323
S'        Returns the parsed template with correct indentation.'
p7745
sI314
S'        # This variable will hold a reference to every block'
p7746
sI315
S'        # that we come across in this template'
p7747
sI316
S'        self.blocks = {}'
p7748
sI317
S''
sI318
S'        # Begin parsing.'
p7749
sI319
S'        self.parse(text)'
p7750
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7751
sg84
g48
sa(dp7752
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7753
sg62
(dp7754
S'self'
p7755
S'<gluon.template.TemplateParser object>'
p7756
sS'extend'
p7757
S'"\'default/index.html\'"'
p7758
sS'self.extend'
p7759
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7760
ssg72
I765
sg73
(dp7761
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7762
sI761
S'            self.child_super_nodes.remove(node)'
p7763
sI762
S''
sI763
S'        # If we need to extend a template.'
p7764
sI764
S'        if extend:'
p7765
sI765
S'            self.extend(extend)'
p7766
sI766
S''
sI767
S'# We need this for integration with gluon'
p7767
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7768
sg84
g188
sa(dp7769
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7770
sg62
(dp7771
S'super_nodes'
p7772
S'[]'
p7773
sS'_super_nodes'
p7774
g114
ssg72
I494
sg73
(dp7775
I489
S'                           name=filename,'
p7776
sI490
S'                           context=self.context,'
p7777
sI491
S'                           path=self.path,'
p7778
sI492
S'                           writer=self.writer,'
p7779
sI493
S'                           delimiters=self.delimiters,'
p7780
sI494
S'                           _super_nodes=super_nodes)'
p7781
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7782
sI497
S'        # template.'
p7783
sI498
S'        buf = BlockNode('
p7784
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7785
sg84
g206
sa(dp7786
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7787
sg62
(dp7788
S'text'
p7789
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7790
sS'self'
p7791
S'<gluon.template.TemplateParser object>'
p7792
sS'self.parse'
p7793
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7794
ssg72
I319
sg73
(dp7795
I320
S''
sI321
S'    def to_string(self):'
p7796
sI322
S'        """'
p7797
sI323
S'        Returns the parsed template with correct indentation.'
p7798
sI314
S'        # This variable will hold a reference to every block'
p7799
sI315
S'        # that we come across in this template'
p7800
sI316
S'        self.blocks = {}'
p7801
sI317
S''
sI318
S'        # Begin parsing.'
p7802
sI319
S'        self.parse(text)'
p7803
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7804
sg84
g48
sa(dp7805
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7806
sg62
(dp7807
S'self'
p7808
S'<gluon.template.TemplateParser object>'
p7809
sS'extend'
p7810
S'"\'default/index.html\'"'
p7811
sS'self.extend'
p7812
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7813
ssg72
I765
sg73
(dp7814
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7815
sI761
S'            self.child_super_nodes.remove(node)'
p7816
sI762
S''
sI763
S'        # If we need to extend a template.'
p7817
sI764
S'        if extend:'
p7818
sI765
S'            self.extend(extend)'
p7819
sI766
S''
sI767
S'# We need this for integration with gluon'
p7820
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7821
sg84
g188
sa(dp7822
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7823
sg62
(dp7824
S'super_nodes'
p7825
S'[]'
p7826
sS'_super_nodes'
p7827
g114
ssg72
I494
sg73
(dp7828
I489
S'                           name=filename,'
p7829
sI490
S'                           context=self.context,'
p7830
sI491
S'                           path=self.path,'
p7831
sI492
S'                           writer=self.writer,'
p7832
sI493
S'                           delimiters=self.delimiters,'
p7833
sI494
S'                           _super_nodes=super_nodes)'
p7834
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7835
sI497
S'        # template.'
p7836
sI498
S'        buf = BlockNode('
p7837
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7838
sg84
g206
sa(dp7839
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7840
sg62
(dp7841
S'text'
p7842
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7843
sS'self'
p7844
S'<gluon.template.TemplateParser object>'
p7845
sS'self.parse'
p7846
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7847
ssg72
I319
sg73
(dp7848
I320
S''
sI321
S'    def to_string(self):'
p7849
sI322
S'        """'
p7850
sI323
S'        Returns the parsed template with correct indentation.'
p7851
sI314
S'        # This variable will hold a reference to every block'
p7852
sI315
S'        # that we come across in this template'
p7853
sI316
S'        self.blocks = {}'
p7854
sI317
S''
sI318
S'        # Begin parsing.'
p7855
sI319
S'        self.parse(text)'
p7856
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7857
sg84
g48
sa(dp7858
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7859
sg62
(dp7860
S'self'
p7861
S'<gluon.template.TemplateParser object>'
p7862
sS'extend'
p7863
S'"\'default/index.html\'"'
p7864
sS'self.extend'
p7865
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7866
ssg72
I765
sg73
(dp7867
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7868
sI761
S'            self.child_super_nodes.remove(node)'
p7869
sI762
S''
sI763
S'        # If we need to extend a template.'
p7870
sI764
S'        if extend:'
p7871
sI765
S'            self.extend(extend)'
p7872
sI766
S''
sI767
S'# We need this for integration with gluon'
p7873
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7874
sg84
g188
sa(dp7875
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7876
sg62
(dp7877
S'super_nodes'
p7878
S'[]'
p7879
sS'_super_nodes'
p7880
g114
ssg72
I494
sg73
(dp7881
I489
S'                           name=filename,'
p7882
sI490
S'                           context=self.context,'
p7883
sI491
S'                           path=self.path,'
p7884
sI492
S'                           writer=self.writer,'
p7885
sI493
S'                           delimiters=self.delimiters,'
p7886
sI494
S'                           _super_nodes=super_nodes)'
p7887
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7888
sI497
S'        # template.'
p7889
sI498
S'        buf = BlockNode('
p7890
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7891
sg84
g206
sa(dp7892
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7893
sg62
(dp7894
S'text'
p7895
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7896
sS'self'
p7897
S'<gluon.template.TemplateParser object>'
p7898
sS'self.parse'
p7899
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7900
ssg72
I319
sg73
(dp7901
I320
S''
sI321
S'    def to_string(self):'
p7902
sI322
S'        """'
p7903
sI323
S'        Returns the parsed template with correct indentation.'
p7904
sI314
S'        # This variable will hold a reference to every block'
p7905
sI315
S'        # that we come across in this template'
p7906
sI316
S'        self.blocks = {}'
p7907
sI317
S''
sI318
S'        # Begin parsing.'
p7908
sI319
S'        self.parse(text)'
p7909
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7910
sg84
g48
sa(dp7911
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7912
sg62
(dp7913
S'self'
p7914
S'<gluon.template.TemplateParser object>'
p7915
sS'extend'
p7916
S'"\'default/index.html\'"'
p7917
sS'self.extend'
p7918
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7919
ssg72
I765
sg73
(dp7920
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7921
sI761
S'            self.child_super_nodes.remove(node)'
p7922
sI762
S''
sI763
S'        # If we need to extend a template.'
p7923
sI764
S'        if extend:'
p7924
sI765
S'            self.extend(extend)'
p7925
sI766
S''
sI767
S'# We need this for integration with gluon'
p7926
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7927
sg84
g188
sa(dp7928
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7929
sg62
(dp7930
S'super_nodes'
p7931
S'[]'
p7932
sS'_super_nodes'
p7933
g114
ssg72
I494
sg73
(dp7934
I489
S'                           name=filename,'
p7935
sI490
S'                           context=self.context,'
p7936
sI491
S'                           path=self.path,'
p7937
sI492
S'                           writer=self.writer,'
p7938
sI493
S'                           delimiters=self.delimiters,'
p7939
sI494
S'                           _super_nodes=super_nodes)'
p7940
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7941
sI497
S'        # template.'
p7942
sI498
S'        buf = BlockNode('
p7943
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7944
sg84
g206
sa(dp7945
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7946
sg62
(dp7947
S'text'
p7948
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p7949
sS'self'
p7950
S'<gluon.template.TemplateParser object>'
p7951
sS'self.parse'
p7952
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7953
ssg72
I319
sg73
(dp7954
I320
S''
sI321
S'    def to_string(self):'
p7955
sI322
S'        """'
p7956
sI323
S'        Returns the parsed template with correct indentation.'
p7957
sI314
S'        # This variable will hold a reference to every block'
p7958
sI315
S'        # that we come across in this template'
p7959
sI316
S'        self.blocks = {}'
p7960
sI317
S''
sI318
S'        # Begin parsing.'
p7961
sI319
S'        self.parse(text)'
p7962
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7963
sg84
g48
sa(dp7964
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7965
sg62
(dp7966
S'self'
p7967
S'<gluon.template.TemplateParser object>'
p7968
sS'extend'
p7969
S'"\'default/index.html\'"'
p7970
sS'self.extend'
p7971
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7972
ssg72
I765
sg73
(dp7973
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7974
sI761
S'            self.child_super_nodes.remove(node)'
p7975
sI762
S''
sI763
S'        # If we need to extend a template.'
p7976
sI764
S'        if extend:'
p7977
sI765
S'            self.extend(extend)'
p7978
sI766
S''
sI767
S'# We need this for integration with gluon'
p7979
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p7980
sg84
g188
sa(dp7981
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7982
sg62
(dp7983
S'super_nodes'
p7984
S'[]'
p7985
sS'_super_nodes'
p7986
g114
ssg72
I494
sg73
(dp7987
I489
S'                           name=filename,'
p7988
sI490
S'                           context=self.context,'
p7989
sI491
S'                           path=self.path,'
p7990
sI492
S'                           writer=self.writer,'
p7991
sI493
S'                           delimiters=self.delimiters,'
p7992
sI494
S'                           _super_nodes=super_nodes)'
p7993
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p7994
sI497
S'        # template.'
p7995
sI498
S'        buf = BlockNode('
p7996
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p7997
sg84
g206
sa(dp7998
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p7999
sg62
(dp8000
S'text'
p8001
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8002
sS'self'
p8003
S'<gluon.template.TemplateParser object>'
p8004
sS'self.parse'
p8005
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8006
ssg72
I319
sg73
(dp8007
I320
S''
sI321
S'    def to_string(self):'
p8008
sI322
S'        """'
p8009
sI323
S'        Returns the parsed template with correct indentation.'
p8010
sI314
S'        # This variable will hold a reference to every block'
p8011
sI315
S'        # that we come across in this template'
p8012
sI316
S'        self.blocks = {}'
p8013
sI317
S''
sI318
S'        # Begin parsing.'
p8014
sI319
S'        self.parse(text)'
p8015
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8016
sg84
g48
sa(dp8017
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8018
sg62
(dp8019
S'self'
p8020
S'<gluon.template.TemplateParser object>'
p8021
sS'extend'
p8022
S'"\'default/index.html\'"'
p8023
sS'self.extend'
p8024
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8025
ssg72
I765
sg73
(dp8026
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8027
sI761
S'            self.child_super_nodes.remove(node)'
p8028
sI762
S''
sI763
S'        # If we need to extend a template.'
p8029
sI764
S'        if extend:'
p8030
sI765
S'            self.extend(extend)'
p8031
sI766
S''
sI767
S'# We need this for integration with gluon'
p8032
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8033
sg84
g188
sa(dp8034
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8035
sg62
(dp8036
S'super_nodes'
p8037
S'[]'
p8038
sS'_super_nodes'
p8039
g114
ssg72
I494
sg73
(dp8040
I489
S'                           name=filename,'
p8041
sI490
S'                           context=self.context,'
p8042
sI491
S'                           path=self.path,'
p8043
sI492
S'                           writer=self.writer,'
p8044
sI493
S'                           delimiters=self.delimiters,'
p8045
sI494
S'                           _super_nodes=super_nodes)'
p8046
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8047
sI497
S'        # template.'
p8048
sI498
S'        buf = BlockNode('
p8049
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8050
sg84
g206
sa(dp8051
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8052
sg62
(dp8053
S'text'
p8054
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8055
sS'self'
p8056
S'<gluon.template.TemplateParser object>'
p8057
sS'self.parse'
p8058
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8059
ssg72
I319
sg73
(dp8060
I320
S''
sI321
S'    def to_string(self):'
p8061
sI322
S'        """'
p8062
sI323
S'        Returns the parsed template with correct indentation.'
p8063
sI314
S'        # This variable will hold a reference to every block'
p8064
sI315
S'        # that we come across in this template'
p8065
sI316
S'        self.blocks = {}'
p8066
sI317
S''
sI318
S'        # Begin parsing.'
p8067
sI319
S'        self.parse(text)'
p8068
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8069
sg84
g48
sa(dp8070
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8071
sg62
(dp8072
S'self'
p8073
S'<gluon.template.TemplateParser object>'
p8074
sS'extend'
p8075
S'"\'default/index.html\'"'
p8076
sS'self.extend'
p8077
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8078
ssg72
I765
sg73
(dp8079
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8080
sI761
S'            self.child_super_nodes.remove(node)'
p8081
sI762
S''
sI763
S'        # If we need to extend a template.'
p8082
sI764
S'        if extend:'
p8083
sI765
S'            self.extend(extend)'
p8084
sI766
S''
sI767
S'# We need this for integration with gluon'
p8085
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8086
sg84
g188
sa(dp8087
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8088
sg62
(dp8089
S'super_nodes'
p8090
S'[]'
p8091
sS'_super_nodes'
p8092
g114
ssg72
I494
sg73
(dp8093
I489
S'                           name=filename,'
p8094
sI490
S'                           context=self.context,'
p8095
sI491
S'                           path=self.path,'
p8096
sI492
S'                           writer=self.writer,'
p8097
sI493
S'                           delimiters=self.delimiters,'
p8098
sI494
S'                           _super_nodes=super_nodes)'
p8099
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8100
sI497
S'        # template.'
p8101
sI498
S'        buf = BlockNode('
p8102
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8103
sg84
g206
sa(dp8104
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8105
sg62
(dp8106
S'text'
p8107
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8108
sS'self'
p8109
S'<gluon.template.TemplateParser object>'
p8110
sS'self.parse'
p8111
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8112
ssg72
I319
sg73
(dp8113
I320
S''
sI321
S'    def to_string(self):'
p8114
sI322
S'        """'
p8115
sI323
S'        Returns the parsed template with correct indentation.'
p8116
sI314
S'        # This variable will hold a reference to every block'
p8117
sI315
S'        # that we come across in this template'
p8118
sI316
S'        self.blocks = {}'
p8119
sI317
S''
sI318
S'        # Begin parsing.'
p8120
sI319
S'        self.parse(text)'
p8121
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8122
sg84
g48
sa(dp8123
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8124
sg62
(dp8125
S'self'
p8126
S'<gluon.template.TemplateParser object>'
p8127
sS'extend'
p8128
S'"\'default/index.html\'"'
p8129
sS'self.extend'
p8130
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8131
ssg72
I765
sg73
(dp8132
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8133
sI761
S'            self.child_super_nodes.remove(node)'
p8134
sI762
S''
sI763
S'        # If we need to extend a template.'
p8135
sI764
S'        if extend:'
p8136
sI765
S'            self.extend(extend)'
p8137
sI766
S''
sI767
S'# We need this for integration with gluon'
p8138
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8139
sg84
g188
sa(dp8140
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8141
sg62
(dp8142
S'super_nodes'
p8143
S'[]'
p8144
sS'_super_nodes'
p8145
g114
ssg72
I494
sg73
(dp8146
I489
S'                           name=filename,'
p8147
sI490
S'                           context=self.context,'
p8148
sI491
S'                           path=self.path,'
p8149
sI492
S'                           writer=self.writer,'
p8150
sI493
S'                           delimiters=self.delimiters,'
p8151
sI494
S'                           _super_nodes=super_nodes)'
p8152
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8153
sI497
S'        # template.'
p8154
sI498
S'        buf = BlockNode('
p8155
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8156
sg84
g206
sa(dp8157
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8158
sg62
(dp8159
S'text'
p8160
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8161
sS'self'
p8162
S'<gluon.template.TemplateParser object>'
p8163
sS'self.parse'
p8164
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8165
ssg72
I319
sg73
(dp8166
I320
S''
sI321
S'    def to_string(self):'
p8167
sI322
S'        """'
p8168
sI323
S'        Returns the parsed template with correct indentation.'
p8169
sI314
S'        # This variable will hold a reference to every block'
p8170
sI315
S'        # that we come across in this template'
p8171
sI316
S'        self.blocks = {}'
p8172
sI317
S''
sI318
S'        # Begin parsing.'
p8173
sI319
S'        self.parse(text)'
p8174
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8175
sg84
g48
sa(dp8176
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8177
sg62
(dp8178
S'self'
p8179
S'<gluon.template.TemplateParser object>'
p8180
sS'extend'
p8181
S'"\'default/index.html\'"'
p8182
sS'self.extend'
p8183
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8184
ssg72
I765
sg73
(dp8185
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8186
sI761
S'            self.child_super_nodes.remove(node)'
p8187
sI762
S''
sI763
S'        # If we need to extend a template.'
p8188
sI764
S'        if extend:'
p8189
sI765
S'            self.extend(extend)'
p8190
sI766
S''
sI767
S'# We need this for integration with gluon'
p8191
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8192
sg84
g188
sa(dp8193
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8194
sg62
(dp8195
S'super_nodes'
p8196
S'[]'
p8197
sS'_super_nodes'
p8198
g114
ssg72
I494
sg73
(dp8199
I489
S'                           name=filename,'
p8200
sI490
S'                           context=self.context,'
p8201
sI491
S'                           path=self.path,'
p8202
sI492
S'                           writer=self.writer,'
p8203
sI493
S'                           delimiters=self.delimiters,'
p8204
sI494
S'                           _super_nodes=super_nodes)'
p8205
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8206
sI497
S'        # template.'
p8207
sI498
S'        buf = BlockNode('
p8208
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8209
sg84
g206
sa(dp8210
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8211
sg62
(dp8212
S'text'
p8213
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8214
sS'self'
p8215
S'<gluon.template.TemplateParser object>'
p8216
sS'self.parse'
p8217
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8218
ssg72
I319
sg73
(dp8219
I320
S''
sI321
S'    def to_string(self):'
p8220
sI322
S'        """'
p8221
sI323
S'        Returns the parsed template with correct indentation.'
p8222
sI314
S'        # This variable will hold a reference to every block'
p8223
sI315
S'        # that we come across in this template'
p8224
sI316
S'        self.blocks = {}'
p8225
sI317
S''
sI318
S'        # Begin parsing.'
p8226
sI319
S'        self.parse(text)'
p8227
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8228
sg84
g48
sa(dp8229
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8230
sg62
(dp8231
S'self'
p8232
S'<gluon.template.TemplateParser object>'
p8233
sS'extend'
p8234
S'"\'default/index.html\'"'
p8235
sS'self.extend'
p8236
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8237
ssg72
I765
sg73
(dp8238
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8239
sI761
S'            self.child_super_nodes.remove(node)'
p8240
sI762
S''
sI763
S'        # If we need to extend a template.'
p8241
sI764
S'        if extend:'
p8242
sI765
S'            self.extend(extend)'
p8243
sI766
S''
sI767
S'# We need this for integration with gluon'
p8244
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8245
sg84
g188
sa(dp8246
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8247
sg62
(dp8248
S'super_nodes'
p8249
S'[]'
p8250
sS'_super_nodes'
p8251
g114
ssg72
I494
sg73
(dp8252
I489
S'                           name=filename,'
p8253
sI490
S'                           context=self.context,'
p8254
sI491
S'                           path=self.path,'
p8255
sI492
S'                           writer=self.writer,'
p8256
sI493
S'                           delimiters=self.delimiters,'
p8257
sI494
S'                           _super_nodes=super_nodes)'
p8258
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8259
sI497
S'        # template.'
p8260
sI498
S'        buf = BlockNode('
p8261
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8262
sg84
g206
sa(dp8263
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8264
sg62
(dp8265
S'text'
p8266
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8267
sS'self'
p8268
S'<gluon.template.TemplateParser object>'
p8269
sS'self.parse'
p8270
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8271
ssg72
I319
sg73
(dp8272
I320
S''
sI321
S'    def to_string(self):'
p8273
sI322
S'        """'
p8274
sI323
S'        Returns the parsed template with correct indentation.'
p8275
sI314
S'        # This variable will hold a reference to every block'
p8276
sI315
S'        # that we come across in this template'
p8277
sI316
S'        self.blocks = {}'
p8278
sI317
S''
sI318
S'        # Begin parsing.'
p8279
sI319
S'        self.parse(text)'
p8280
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8281
sg84
g48
sa(dp8282
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8283
sg62
(dp8284
S'self'
p8285
S'<gluon.template.TemplateParser object>'
p8286
sS'extend'
p8287
S'"\'default/index.html\'"'
p8288
sS'self.extend'
p8289
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8290
ssg72
I765
sg73
(dp8291
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8292
sI761
S'            self.child_super_nodes.remove(node)'
p8293
sI762
S''
sI763
S'        # If we need to extend a template.'
p8294
sI764
S'        if extend:'
p8295
sI765
S'            self.extend(extend)'
p8296
sI766
S''
sI767
S'# We need this for integration with gluon'
p8297
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8298
sg84
g188
sa(dp8299
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8300
sg62
(dp8301
S'super_nodes'
p8302
S'[]'
p8303
sS'_super_nodes'
p8304
g114
ssg72
I494
sg73
(dp8305
I489
S'                           name=filename,'
p8306
sI490
S'                           context=self.context,'
p8307
sI491
S'                           path=self.path,'
p8308
sI492
S'                           writer=self.writer,'
p8309
sI493
S'                           delimiters=self.delimiters,'
p8310
sI494
S'                           _super_nodes=super_nodes)'
p8311
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8312
sI497
S'        # template.'
p8313
sI498
S'        buf = BlockNode('
p8314
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8315
sg84
g206
sa(dp8316
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8317
sg62
(dp8318
S'text'
p8319
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8320
sS'self'
p8321
S'<gluon.template.TemplateParser object>'
p8322
sS'self.parse'
p8323
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8324
ssg72
I319
sg73
(dp8325
I320
S''
sI321
S'    def to_string(self):'
p8326
sI322
S'        """'
p8327
sI323
S'        Returns the parsed template with correct indentation.'
p8328
sI314
S'        # This variable will hold a reference to every block'
p8329
sI315
S'        # that we come across in this template'
p8330
sI316
S'        self.blocks = {}'
p8331
sI317
S''
sI318
S'        # Begin parsing.'
p8332
sI319
S'        self.parse(text)'
p8333
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8334
sg84
g48
sa(dp8335
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8336
sg62
(dp8337
S'self'
p8338
S'<gluon.template.TemplateParser object>'
p8339
sS'extend'
p8340
S'"\'default/index.html\'"'
p8341
sS'self.extend'
p8342
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8343
ssg72
I765
sg73
(dp8344
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8345
sI761
S'            self.child_super_nodes.remove(node)'
p8346
sI762
S''
sI763
S'        # If we need to extend a template.'
p8347
sI764
S'        if extend:'
p8348
sI765
S'            self.extend(extend)'
p8349
sI766
S''
sI767
S'# We need this for integration with gluon'
p8350
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8351
sg84
g188
sa(dp8352
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8353
sg62
(dp8354
S'super_nodes'
p8355
S'[]'
p8356
sS'_super_nodes'
p8357
g114
ssg72
I494
sg73
(dp8358
I489
S'                           name=filename,'
p8359
sI490
S'                           context=self.context,'
p8360
sI491
S'                           path=self.path,'
p8361
sI492
S'                           writer=self.writer,'
p8362
sI493
S'                           delimiters=self.delimiters,'
p8363
sI494
S'                           _super_nodes=super_nodes)'
p8364
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8365
sI497
S'        # template.'
p8366
sI498
S'        buf = BlockNode('
p8367
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8368
sg84
g206
sa(dp8369
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8370
sg62
(dp8371
S'text'
p8372
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8373
sS'self'
p8374
S'<gluon.template.TemplateParser object>'
p8375
sS'self.parse'
p8376
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8377
ssg72
I319
sg73
(dp8378
I320
S''
sI321
S'    def to_string(self):'
p8379
sI322
S'        """'
p8380
sI323
S'        Returns the parsed template with correct indentation.'
p8381
sI314
S'        # This variable will hold a reference to every block'
p8382
sI315
S'        # that we come across in this template'
p8383
sI316
S'        self.blocks = {}'
p8384
sI317
S''
sI318
S'        # Begin parsing.'
p8385
sI319
S'        self.parse(text)'
p8386
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8387
sg84
g48
sa(dp8388
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8389
sg62
(dp8390
S'self'
p8391
S'<gluon.template.TemplateParser object>'
p8392
sS'extend'
p8393
S'"\'default/index.html\'"'
p8394
sS'self.extend'
p8395
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8396
ssg72
I765
sg73
(dp8397
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8398
sI761
S'            self.child_super_nodes.remove(node)'
p8399
sI762
S''
sI763
S'        # If we need to extend a template.'
p8400
sI764
S'        if extend:'
p8401
sI765
S'            self.extend(extend)'
p8402
sI766
S''
sI767
S'# We need this for integration with gluon'
p8403
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8404
sg84
g188
sa(dp8405
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8406
sg62
(dp8407
S'super_nodes'
p8408
S'[]'
p8409
sS'_super_nodes'
p8410
g114
ssg72
I494
sg73
(dp8411
I489
S'                           name=filename,'
p8412
sI490
S'                           context=self.context,'
p8413
sI491
S'                           path=self.path,'
p8414
sI492
S'                           writer=self.writer,'
p8415
sI493
S'                           delimiters=self.delimiters,'
p8416
sI494
S'                           _super_nodes=super_nodes)'
p8417
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8418
sI497
S'        # template.'
p8419
sI498
S'        buf = BlockNode('
p8420
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8421
sg84
g206
sa(dp8422
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8423
sg62
(dp8424
S'text'
p8425
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8426
sS'self'
p8427
S'<gluon.template.TemplateParser object>'
p8428
sS'self.parse'
p8429
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8430
ssg72
I319
sg73
(dp8431
I320
S''
sI321
S'    def to_string(self):'
p8432
sI322
S'        """'
p8433
sI323
S'        Returns the parsed template with correct indentation.'
p8434
sI314
S'        # This variable will hold a reference to every block'
p8435
sI315
S'        # that we come across in this template'
p8436
sI316
S'        self.blocks = {}'
p8437
sI317
S''
sI318
S'        # Begin parsing.'
p8438
sI319
S'        self.parse(text)'
p8439
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8440
sg84
g48
sa(dp8441
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8442
sg62
(dp8443
S'self'
p8444
S'<gluon.template.TemplateParser object>'
p8445
sS'extend'
p8446
S'"\'default/index.html\'"'
p8447
sS'self.extend'
p8448
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8449
ssg72
I765
sg73
(dp8450
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8451
sI761
S'            self.child_super_nodes.remove(node)'
p8452
sI762
S''
sI763
S'        # If we need to extend a template.'
p8453
sI764
S'        if extend:'
p8454
sI765
S'            self.extend(extend)'
p8455
sI766
S''
sI767
S'# We need this for integration with gluon'
p8456
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8457
sg84
g188
sa(dp8458
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8459
sg62
(dp8460
S'super_nodes'
p8461
S'[]'
p8462
sS'_super_nodes'
p8463
g114
ssg72
I494
sg73
(dp8464
I489
S'                           name=filename,'
p8465
sI490
S'                           context=self.context,'
p8466
sI491
S'                           path=self.path,'
p8467
sI492
S'                           writer=self.writer,'
p8468
sI493
S'                           delimiters=self.delimiters,'
p8469
sI494
S'                           _super_nodes=super_nodes)'
p8470
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8471
sI497
S'        # template.'
p8472
sI498
S'        buf = BlockNode('
p8473
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8474
sg84
g206
sa(dp8475
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8476
sg62
(dp8477
S'text'
p8478
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8479
sS'self'
p8480
S'<gluon.template.TemplateParser object>'
p8481
sS'self.parse'
p8482
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8483
ssg72
I319
sg73
(dp8484
I320
S''
sI321
S'    def to_string(self):'
p8485
sI322
S'        """'
p8486
sI323
S'        Returns the parsed template with correct indentation.'
p8487
sI314
S'        # This variable will hold a reference to every block'
p8488
sI315
S'        # that we come across in this template'
p8489
sI316
S'        self.blocks = {}'
p8490
sI317
S''
sI318
S'        # Begin parsing.'
p8491
sI319
S'        self.parse(text)'
p8492
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8493
sg84
g48
sa(dp8494
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8495
sg62
(dp8496
S'self'
p8497
S'<gluon.template.TemplateParser object>'
p8498
sS'extend'
p8499
S'"\'default/index.html\'"'
p8500
sS'self.extend'
p8501
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8502
ssg72
I765
sg73
(dp8503
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8504
sI761
S'            self.child_super_nodes.remove(node)'
p8505
sI762
S''
sI763
S'        # If we need to extend a template.'
p8506
sI764
S'        if extend:'
p8507
sI765
S'            self.extend(extend)'
p8508
sI766
S''
sI767
S'# We need this for integration with gluon'
p8509
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8510
sg84
g188
sa(dp8511
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8512
sg62
(dp8513
S'super_nodes'
p8514
S'[]'
p8515
sS'_super_nodes'
p8516
g114
ssg72
I494
sg73
(dp8517
I489
S'                           name=filename,'
p8518
sI490
S'                           context=self.context,'
p8519
sI491
S'                           path=self.path,'
p8520
sI492
S'                           writer=self.writer,'
p8521
sI493
S'                           delimiters=self.delimiters,'
p8522
sI494
S'                           _super_nodes=super_nodes)'
p8523
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8524
sI497
S'        # template.'
p8525
sI498
S'        buf = BlockNode('
p8526
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8527
sg84
g206
sa(dp8528
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8529
sg62
(dp8530
S'text'
p8531
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8532
sS'self'
p8533
S'<gluon.template.TemplateParser object>'
p8534
sS'self.parse'
p8535
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8536
ssg72
I319
sg73
(dp8537
I320
S''
sI321
S'    def to_string(self):'
p8538
sI322
S'        """'
p8539
sI323
S'        Returns the parsed template with correct indentation.'
p8540
sI314
S'        # This variable will hold a reference to every block'
p8541
sI315
S'        # that we come across in this template'
p8542
sI316
S'        self.blocks = {}'
p8543
sI317
S''
sI318
S'        # Begin parsing.'
p8544
sI319
S'        self.parse(text)'
p8545
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8546
sg84
g48
sa(dp8547
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8548
sg62
(dp8549
S'self'
p8550
S'<gluon.template.TemplateParser object>'
p8551
sS'extend'
p8552
S'"\'default/index.html\'"'
p8553
sS'self.extend'
p8554
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8555
ssg72
I765
sg73
(dp8556
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8557
sI761
S'            self.child_super_nodes.remove(node)'
p8558
sI762
S''
sI763
S'        # If we need to extend a template.'
p8559
sI764
S'        if extend:'
p8560
sI765
S'            self.extend(extend)'
p8561
sI766
S''
sI767
S'# We need this for integration with gluon'
p8562
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8563
sg84
g188
sa(dp8564
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8565
sg62
(dp8566
S'super_nodes'
p8567
S'[]'
p8568
sS'_super_nodes'
p8569
g114
ssg72
I494
sg73
(dp8570
I489
S'                           name=filename,'
p8571
sI490
S'                           context=self.context,'
p8572
sI491
S'                           path=self.path,'
p8573
sI492
S'                           writer=self.writer,'
p8574
sI493
S'                           delimiters=self.delimiters,'
p8575
sI494
S'                           _super_nodes=super_nodes)'
p8576
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8577
sI497
S'        # template.'
p8578
sI498
S'        buf = BlockNode('
p8579
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8580
sg84
g206
sa(dp8581
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8582
sg62
(dp8583
S'text'
p8584
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8585
sS'self'
p8586
S'<gluon.template.TemplateParser object>'
p8587
sS'self.parse'
p8588
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8589
ssg72
I319
sg73
(dp8590
I320
S''
sI321
S'    def to_string(self):'
p8591
sI322
S'        """'
p8592
sI323
S'        Returns the parsed template with correct indentation.'
p8593
sI314
S'        # This variable will hold a reference to every block'
p8594
sI315
S'        # that we come across in this template'
p8595
sI316
S'        self.blocks = {}'
p8596
sI317
S''
sI318
S'        # Begin parsing.'
p8597
sI319
S'        self.parse(text)'
p8598
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8599
sg84
g48
sa(dp8600
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8601
sg62
(dp8602
S'self'
p8603
S'<gluon.template.TemplateParser object>'
p8604
sS'extend'
p8605
S'"\'default/index.html\'"'
p8606
sS'self.extend'
p8607
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8608
ssg72
I765
sg73
(dp8609
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8610
sI761
S'            self.child_super_nodes.remove(node)'
p8611
sI762
S''
sI763
S'        # If we need to extend a template.'
p8612
sI764
S'        if extend:'
p8613
sI765
S'            self.extend(extend)'
p8614
sI766
S''
sI767
S'# We need this for integration with gluon'
p8615
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8616
sg84
g188
sa(dp8617
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8618
sg62
(dp8619
S'super_nodes'
p8620
S'[]'
p8621
sS'_super_nodes'
p8622
g114
ssg72
I494
sg73
(dp8623
I489
S'                           name=filename,'
p8624
sI490
S'                           context=self.context,'
p8625
sI491
S'                           path=self.path,'
p8626
sI492
S'                           writer=self.writer,'
p8627
sI493
S'                           delimiters=self.delimiters,'
p8628
sI494
S'                           _super_nodes=super_nodes)'
p8629
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8630
sI497
S'        # template.'
p8631
sI498
S'        buf = BlockNode('
p8632
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8633
sg84
g206
sa(dp8634
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8635
sg62
(dp8636
S'text'
p8637
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8638
sS'self'
p8639
S'<gluon.template.TemplateParser object>'
p8640
sS'self.parse'
p8641
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8642
ssg72
I319
sg73
(dp8643
I320
S''
sI321
S'    def to_string(self):'
p8644
sI322
S'        """'
p8645
sI323
S'        Returns the parsed template with correct indentation.'
p8646
sI314
S'        # This variable will hold a reference to every block'
p8647
sI315
S'        # that we come across in this template'
p8648
sI316
S'        self.blocks = {}'
p8649
sI317
S''
sI318
S'        # Begin parsing.'
p8650
sI319
S'        self.parse(text)'
p8651
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8652
sg84
g48
sa(dp8653
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8654
sg62
(dp8655
S'self'
p8656
S'<gluon.template.TemplateParser object>'
p8657
sS'extend'
p8658
S'"\'default/index.html\'"'
p8659
sS'self.extend'
p8660
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8661
ssg72
I765
sg73
(dp8662
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8663
sI761
S'            self.child_super_nodes.remove(node)'
p8664
sI762
S''
sI763
S'        # If we need to extend a template.'
p8665
sI764
S'        if extend:'
p8666
sI765
S'            self.extend(extend)'
p8667
sI766
S''
sI767
S'# We need this for integration with gluon'
p8668
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8669
sg84
g188
sa(dp8670
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8671
sg62
(dp8672
S'super_nodes'
p8673
S'[]'
p8674
sS'_super_nodes'
p8675
g114
ssg72
I494
sg73
(dp8676
I489
S'                           name=filename,'
p8677
sI490
S'                           context=self.context,'
p8678
sI491
S'                           path=self.path,'
p8679
sI492
S'                           writer=self.writer,'
p8680
sI493
S'                           delimiters=self.delimiters,'
p8681
sI494
S'                           _super_nodes=super_nodes)'
p8682
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8683
sI497
S'        # template.'
p8684
sI498
S'        buf = BlockNode('
p8685
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8686
sg84
g206
sa(dp8687
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8688
sg62
(dp8689
S'text'
p8690
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8691
sS'self'
p8692
S'<gluon.template.TemplateParser object>'
p8693
sS'self.parse'
p8694
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8695
ssg72
I319
sg73
(dp8696
I320
S''
sI321
S'    def to_string(self):'
p8697
sI322
S'        """'
p8698
sI323
S'        Returns the parsed template with correct indentation.'
p8699
sI314
S'        # This variable will hold a reference to every block'
p8700
sI315
S'        # that we come across in this template'
p8701
sI316
S'        self.blocks = {}'
p8702
sI317
S''
sI318
S'        # Begin parsing.'
p8703
sI319
S'        self.parse(text)'
p8704
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8705
sg84
g48
sa(dp8706
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8707
sg62
(dp8708
S'self'
p8709
S'<gluon.template.TemplateParser object>'
p8710
sS'extend'
p8711
S'"\'default/index.html\'"'
p8712
sS'self.extend'
p8713
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8714
ssg72
I765
sg73
(dp8715
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8716
sI761
S'            self.child_super_nodes.remove(node)'
p8717
sI762
S''
sI763
S'        # If we need to extend a template.'
p8718
sI764
S'        if extend:'
p8719
sI765
S'            self.extend(extend)'
p8720
sI766
S''
sI767
S'# We need this for integration with gluon'
p8721
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8722
sg84
g188
sa(dp8723
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8724
sg62
(dp8725
S'super_nodes'
p8726
S'[]'
p8727
sS'_super_nodes'
p8728
g114
ssg72
I494
sg73
(dp8729
I489
S'                           name=filename,'
p8730
sI490
S'                           context=self.context,'
p8731
sI491
S'                           path=self.path,'
p8732
sI492
S'                           writer=self.writer,'
p8733
sI493
S'                           delimiters=self.delimiters,'
p8734
sI494
S'                           _super_nodes=super_nodes)'
p8735
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8736
sI497
S'        # template.'
p8737
sI498
S'        buf = BlockNode('
p8738
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8739
sg84
g206
sa(dp8740
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8741
sg62
(dp8742
S'text'
p8743
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8744
sS'self'
p8745
S'<gluon.template.TemplateParser object>'
p8746
sS'self.parse'
p8747
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8748
ssg72
I319
sg73
(dp8749
I320
S''
sI321
S'    def to_string(self):'
p8750
sI322
S'        """'
p8751
sI323
S'        Returns the parsed template with correct indentation.'
p8752
sI314
S'        # This variable will hold a reference to every block'
p8753
sI315
S'        # that we come across in this template'
p8754
sI316
S'        self.blocks = {}'
p8755
sI317
S''
sI318
S'        # Begin parsing.'
p8756
sI319
S'        self.parse(text)'
p8757
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8758
sg84
g48
sa(dp8759
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8760
sg62
(dp8761
S'self'
p8762
S'<gluon.template.TemplateParser object>'
p8763
sS'extend'
p8764
S'"\'default/index.html\'"'
p8765
sS'self.extend'
p8766
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8767
ssg72
I765
sg73
(dp8768
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8769
sI761
S'            self.child_super_nodes.remove(node)'
p8770
sI762
S''
sI763
S'        # If we need to extend a template.'
p8771
sI764
S'        if extend:'
p8772
sI765
S'            self.extend(extend)'
p8773
sI766
S''
sI767
S'# We need this for integration with gluon'
p8774
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8775
sg84
g188
sa(dp8776
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8777
sg62
(dp8778
S'super_nodes'
p8779
S'[]'
p8780
sS'_super_nodes'
p8781
g114
ssg72
I494
sg73
(dp8782
I489
S'                           name=filename,'
p8783
sI490
S'                           context=self.context,'
p8784
sI491
S'                           path=self.path,'
p8785
sI492
S'                           writer=self.writer,'
p8786
sI493
S'                           delimiters=self.delimiters,'
p8787
sI494
S'                           _super_nodes=super_nodes)'
p8788
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8789
sI497
S'        # template.'
p8790
sI498
S'        buf = BlockNode('
p8791
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8792
sg84
g206
sa(dp8793
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8794
sg62
(dp8795
S'text'
p8796
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8797
sS'self'
p8798
S'<gluon.template.TemplateParser object>'
p8799
sS'self.parse'
p8800
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8801
ssg72
I319
sg73
(dp8802
I320
S''
sI321
S'    def to_string(self):'
p8803
sI322
S'        """'
p8804
sI323
S'        Returns the parsed template with correct indentation.'
p8805
sI314
S'        # This variable will hold a reference to every block'
p8806
sI315
S'        # that we come across in this template'
p8807
sI316
S'        self.blocks = {}'
p8808
sI317
S''
sI318
S'        # Begin parsing.'
p8809
sI319
S'        self.parse(text)'
p8810
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8811
sg84
g48
sa(dp8812
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8813
sg62
(dp8814
S'self'
p8815
S'<gluon.template.TemplateParser object>'
p8816
sS'extend'
p8817
S'"\'default/index.html\'"'
p8818
sS'self.extend'
p8819
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8820
ssg72
I765
sg73
(dp8821
I768
S''
sI769
S''
sI760
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8822
sI761
S'            self.child_super_nodes.remove(node)'
p8823
sI762
S''
sI763
S'        # If we need to extend a template.'
p8824
sI764
S'        if extend:'
p8825
sI765
S'            self.extend(extend)'
p8826
sI766
S''
sI767
S'# We need this for integration with gluon'
p8827
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>")'
p8828
sg84
g188
sa(dp8829
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8830
sg62
(dp8831
S'super_nodes'
p8832
S'[]'
p8833
sS'_super_nodes'
p8834
g114
ssg72
I494
sg73
(dp8835
I489
S'                           name=filename,'
p8836
sI490
S'                           context=self.context,'
p8837
sI491
S'                           path=self.path,'
p8838
sI492
S'                           writer=self.writer,'
p8839
sI493
S'                           delimiters=self.delimiters,'
p8840
sI494
S'                           _super_nodes=super_nodes)'
p8841
sI495
S''
sI496
S'        # Make a temporary buffer that is unique for parent'
p8842
sI497
S'        # template.'
p8843
sI498
S'        buf = BlockNode('
p8844
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'default/index.html\'")'
p8845
sg84
g206
sa(dp8846
g60
S'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py'
p8847
sg62
(dp8848
S'delimiters'
p8849
S"('{{', '}}')"
p8850
sS'self'
p8851
S'<gluon.template.TemplateParser object>'
p8852
sS'self.default_delimiters'
p8853
S"('{{', '}}')"
p8854
ssg72
I283
sg73
(dp8855
I278
S'        # Context for templates.'
p8856
sI279
S'        self.context = context'
p8857
sI280
S''
sI281
S'        # allow optional alternative delimiters'
p8858
sI282
S''
sI283
S'        if delimiters != self.default_delimiters:'
p8859
sI284
S'            escaped_delimiters = (escape(delimiters[0]),'
p8860
sI285
S'                                  escape(delimiters[1]))'
p8861
sI286
S"            self.r_tag = compile(r'(%s.*?%s)' % escaped_delimiters, DOTALL)"
p8862
sI287
S"        elif hasattr(context.get('response', None), 'delimiters'):"
p8863
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>", name="\'default/index.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, ...}, path=r\'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8864
sg84
g48
sasS'pyver'
p8865
S'Python 2.7.9: C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\web2py.exe (prefix: )'
p8866
sS'session'
p8867
g55
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp8868
sS'etype'
p8869
S"<type 'exceptions.RuntimeError'>"
p8870
sS'date'
p8871
S'Mon Jun 06 17:58:10 2016'
p8872
sS'response'
p8873
g55
(S's\xcd>\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x039D4CE0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_informarq</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bba25674-c2d0-44fe-bafa-960bff979b52<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>Hola Mundo</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Inicio</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/InformarQ/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Mis Sitios</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Esta Aplicaci\xc3\xb3n</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/InformarQ</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Controlador</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/controllers/default.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Vista</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/views/default/index.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Modelo BDD</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/models/db.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Modelo "menu"</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/models/menu.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Config.ini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/private/appconfig.ini</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Dise\xc3\xb1o de p\xc3\xa1gina</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/views/layout.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Hoja de estilo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/InformarQ/static/css/web2py-bootstrap3.css</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Base de datos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/InformarQ/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Errores</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/errors/InformarQ</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Acerca de</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/about/InformarQ</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Descargas</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/download</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Soporte</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/support</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Demostraci\xc3\xb3n</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/demo_admin</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ejemplos R\xc3\xa1pidos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/examples/default/examples</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>FAQ</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/AlterEgo</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>V\xc3\xaddeos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/videos/</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Aplicaciones Libres</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/appliances</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/plugins</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recetas</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2pyslices.com/</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentaci\xc3\xb3n</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Online book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Prefacio</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/00</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Introducci\xc3\xb3n</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/01</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Python</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/02</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Resumen</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/03</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>El N\xc3\xbacleo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/04</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Las Vistas</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/05</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Base de datos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/06</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Formularios y validadores</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/07</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Correo electr\xc3\xb3nico y SMS</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/08</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Control de Acceso</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/09</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Servicios</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/10</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recetas AJAX</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/11</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Componentes y Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/12</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recetas de despliegue</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/13</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Otras Recetas</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/14</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Helping web2py</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/15</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Buy web2py\'s book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://stores.lulu.com/web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Comunidad</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Grupos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/usergroups</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Twitter</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://twitter.com/web2py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Chat en vivo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://webchat.freenode.net/?channels=web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>web2py</div></td></tr><tr><td><div>python</div></td></tr><tr><td><div>framework</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/index/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_informarq</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\sessions\\127.0.0.1-bba25674-c2d0-44fe-bafa-960bff979b52</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c0762cbf4baf7f9af97c051e7fcb8083</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bba25674-c2d0-44fe-bafa-960bff979b52</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_informarq</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>InformarQ</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Informarq</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/index.html</div></td></tr></table></div>'
tRp8874
sS'locals'
p8875
(dp8876
S'name'
p8877
S'"\'default/index.html\'"'
p8878
sS'delimiters'
p8879
S"('{{', '}}')"
p8880
sS'text'
p8881
S'"{{extend \'default/index.html\'}}\\r\\n   <h2>{{=messa...2>\\r\\n<p>{{for i in range(1000):}}bla {{pass}} </p>"'
p8882
sS'self'
p8883
S'<gluon.template.TemplateParser object>'
p8884
sS'writer'
p8885
S"'response.write'"
p8886
sS'_super_nodes'
p8887
S'[]'
p8888
sS'context'
p8889
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}"
p8890
sS'path'
p8891
S"r'C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\applications\\InformarQ\\views'"
p8892
sS'lexers'
p8893
g43
sssS'traceback'
p8894
S'Traceback (most recent call last):\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\main.py", line 449, in wsgibase\n    serve_controller(request, response, session)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\main.py", line 191, in serve_controller\n    run_view_in(response._view_environment)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\compileapp.py", line 714, in run_view_in\n    context=environment)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 797, in parse_template\n    return str(TemplateParser(text, context=context, path=path, lexers=lexers, delimiters=delimiters))\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 319, in __init__\n    self.parse(text)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 765, in parse\n    self.extend(extend)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 494, in extend\n    _super_nodes=super_nodes)\n  File "C:\\Users\\Augusto\\Desktop\\Informatorio\\App-Bienal\\web2py\\gluon\\template.py", line 283, in __init__\n    if delimiters != self.default_delimiters:\nRuntimeError: maximum recursion depth exceeded in cmp\n'
p8895
s.